var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexExtractor/ptex/PtexCache.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_extractor_2ptex_2_ptex_cache_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexExtractor/ptex/PtexCache.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexExtractor/ptex/PtexCache.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sys/types.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sys/stat.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;Ptexture.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexReader.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexCache.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef GATHER_STATS</span></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>PtexInternal {</div>\n\
<div class=\"line\">    CacheStats::~CacheStats() { </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (getenv(<span class=\"stringliteral\">&quot;PTEX_STATS&quot;</span>))</div>\n\
<div class=\"line\">        print(); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> CacheStats::print()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nfilesOpened || ndataAllocated || nblocksRead) {</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;Ptex Stats:\\n&quot;</span>);</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  nfilesOpened:   %6d\\n&quot;</span>, nfilesOpened);</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  nfilesClosed:   %6d\\n&quot;</span>, nfilesClosed);</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  ndataAllocated: %6d\\n&quot;</span>, ndataAllocated);</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  ndataFreed:     %6d\\n&quot;</span>, ndataFreed);</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  nblocksRead:    %6d\\n&quot;</span>, nblocksRead);</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  nseeks:         %6d\\n&quot;</span>, nseeks);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nblocksRead)</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  avgReadSize:    %6d\\n&quot;</span>, <span class=\"keywordtype\">int</span>(nbytesRead/nblocksRead));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (nseeks)</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  avgSeqReadSize: %6d\\n&quot;</span>, <span class=\"keywordtype\">int</span>(nbytesRead/nseeks));</div>\n\
<div class=\"line\">        printf(<span class=\"stringliteral\">&quot;  MbytesRead:     %6.2f\\n&quot;</span>, nbytesRead/(1024.0*1024.0));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CacheStats stats;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexCacheImpl::~PtexCacheImpl()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// explicitly pop all unused items so that they are </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// destroyed while cache is still valid</span></div>\n\
<div class=\"line\">    AutoLockCache locker(cachelock);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (_unusedData.pop());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (_unusedFiles.pop());</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexCacheImpl::setFileInUse(PtexLruItem* file)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(cachelock.locked());</div>\n\
<div class=\"line\">    _unusedFiles.extract(file); </div>\n\
<div class=\"line\">    _unusedFileCount--;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexCacheImpl::setFileUnused(PtexLruItem* file)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(cachelock.locked());</div>\n\
<div class=\"line\">    _unusedFiles.push(file);</div>\n\
<div class=\"line\">    _unusedFileCount++;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexCacheImpl::removeFile()</div>\n\
<div class=\"line\">{ </div>\n\
<div class=\"line\">    <span class=\"comment\">// cachelock should be locked, but might not be if cache is being deleted</span></div>\n\
<div class=\"line\">    _unusedFileCount--;</div>\n\
<div class=\"line\">    STATS_INC(nfilesClosed);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexCacheImpl::setDataInUse(PtexLruItem* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(cachelock.locked());</div>\n\
<div class=\"line\">    _unusedData.extract(data); </div>\n\
<div class=\"line\">    _unusedDataCount--;</div>\n\
<div class=\"line\">    _unusedDataSize -= <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexCacheImpl::setDataUnused(PtexLruItem* data, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(cachelock.locked());</div>\n\
<div class=\"line\">    _unusedData.push(data);</div>\n\
<div class=\"line\">    _unusedDataCount++;</div>\n\
<div class=\"line\">    _unusedDataSize += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexCacheImpl::removeData(<span class=\"keywordtype\">int</span> size) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// cachelock should be locked, but might not be if cache is being deleted</span></div>\n\
<div class=\"line\">    _unusedDataCount--;</div>\n\
<div class=\"line\">    _unusedDataSize -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">    STATS_INC(ndataFreed);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexReaderCache : <span class=\"keyword\">public</span> PtexCacheImpl</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexReaderCache(<span class=\"keywordtype\">int</span> maxFiles, <span class=\"keywordtype\">int</span> maxMem, <span class=\"keywordtype\">bool</span> premultiply, PtexInputHandler* handler)</div>\n\
<div class=\"line\">    : PtexCacheImpl(maxFiles, maxMem),</div>\n\
<div class=\"line\">      _io(handler), _cleanupCount(0), _premultiply(premultiply)</div>\n\
<div class=\"line\">    {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~PtexReaderCache()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// orphan all files since we&#39;re about to delete the file table</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and we don&#39;t want the base dtor to try to access it</span></div>\n\
<div class=\"line\">    purgeAll();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> setSearchPath(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// get the open lock since the path is used during open operations</span></div>\n\
<div class=\"line\">    AutoMutex locker(openlock);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// record path</span></div>\n\
<div class=\"line\">    _searchpath = path ? path : <span class=\"stringliteral\">&quot;&quot;</span>; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// split into dirs</span></div>\n\
<div class=\"line\">    _searchdirs.clear();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* buff = strdup(path);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* pos = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* token = strtok_r(buff, <span class=\"stringliteral\">&quot;:&quot;</span>, &amp;pos);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (token) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (token[0]) _searchdirs.push_back(token);</div>\n\
<div class=\"line\">        token = strtok_r(0, <span class=\"stringliteral\">&quot;:&quot;</span>, &amp;pos);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    free(buff);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* getSearchPath()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// get the open lock since the path is used during open operations</span></div>\n\
<div class=\"line\">    AutoMutex locker(openlock);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> _searchpath.c_str(); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexTexture* <span class=\"keyword\">get</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, Ptex::String&amp; error);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> purge(PtexTexture* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab21590c4736d1459a5a0674a42b5a655\">texture</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    PtexReader* reader = <span class=\"keyword\">dynamic_cast&lt;</span>PtexReader*<span class=\"keyword\">&gt;</span>(<a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab21590c4736d1459a5a0674a42b5a655\">texture</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!reader) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    purge(reader-&gt;path());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> purge(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* filename)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    AutoLockCache locker(cachelock); </div>\n\
<div class=\"line\">    FileMap::iterator iter = _files.find(filename);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iter != _files.end()) {</div>\n\
<div class=\"line\">        PtexReader* reader = iter-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (reader &amp;&amp; intptr_t(reader) != -1) {</div>\n\
<div class=\"line\">        reader-&gt;orphan();</div>\n\
<div class=\"line\">        iter-&gt;second = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        _files.erase(iter);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> purgeAll()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    AutoLockCache locker(cachelock); </div>\n\
<div class=\"line\">    FileMap::iterator iter = _files.begin();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (iter != _files.end()) {</div>\n\
<div class=\"line\">        PtexReader* reader = iter-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (reader &amp;&amp; intptr_t(reader) != -1) {</div>\n\
<div class=\"line\">        reader-&gt;orphan();</div>\n\
<div class=\"line\">        iter-&gt;second = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        iter = _files.erase(iter);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeBlankEntries()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// remove blank file entries to keep map size in check</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (FileMap::iterator i = _files.begin(); i != _files.end();) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (i-&gt;second == 0) i = _files.erase(i);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> i++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    PtexInputHandler* _io;</div>\n\
<div class=\"line\">    <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> _searchpath;</div>\n\
<div class=\"line\">    std::vector&lt;std::string&gt; _searchdirs;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> PtexDict&lt;PtexReader*&gt; FileMap;</div>\n\
<div class=\"line\">    FileMap _files;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _cleanupCount;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> _premultiply;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexTexture* PtexReaderCache::get(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* filename, Ptex::String&amp; error)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    AutoLockCache locker(cachelock); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// lookup reader in map</span></div>\n\
<div class=\"line\">    PtexReader* reader = _files[filename];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (reader) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// -1 means previous open attempt failed</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (intptr_t(reader) == -1) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    reader-&gt;ref();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> reader;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> ok = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get open lock and make sure we still need to open</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// temporarily release cache lock while we open acquire open lock</span></div>\n\
<div class=\"line\">    cachelock.unlock();</div>\n\
<div class=\"line\">    AutoMutex openlocker(openlock);</div>\n\
<div class=\"line\">    cachelock.lock();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// lookup entry again (it might have changed in another thread)</span></div>\n\
<div class=\"line\">    PtexReader** entry = &amp;_files[filename];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*entry) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// another thread opened it while we were waiting</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (intptr_t(*entry) == -1) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        (*entry)-&gt;ref();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> *entry; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// make a new reader</span></div>\n\
<div class=\"line\">    reader = <span class=\"keyword\">new</span> PtexReader((<span class=\"keywordtype\">void</span>**)entry, <span class=\"keyword\">this</span>, _premultiply, _io);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// temporarily release cache lock while we open the file</span></div>\n\
<div class=\"line\">    cachelock.unlock();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_io) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> tmppath[PATH_MAX+1];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (filename[0] != <span class=\"charliteral\">&#39;/&#39;</span> &amp;&amp; !_searchdirs.empty()) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// file is relative, search in searchpath</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> found = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keyword\">struct </span>stat statbuf;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">size_t</span> i = 0, size = _searchdirs.size(); i &lt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>; i++) {</div>\n\
<div class=\"line\">            snprintf(tmppath, <span class=\"keyword\">sizeof</span>(tmppath), <span class=\"stringliteral\">&quot;%s/%s&quot;</span>, _searchdirs[i].c_str(), filename);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (stat(tmppath, &amp;statbuf) == 0) {</div>\n\
<div class=\"line\">            found = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            filename = tmppath;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!found) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> errstr = <span class=\"stringliteral\">&quot;Can&#39;t find ptex file: &quot;</span>;</div>\n\
<div class=\"line\">            errstr += filename;</div>\n\
<div class=\"line\">            error = errstr.c_str();</div>\n\
<div class=\"line\">            ok = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ok) ok = reader-&gt;open(filename, error);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// reacquire cache lock</span></div>\n\
<div class=\"line\">    cachelock.lock();</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ok) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// open failed, clear parent ptr and unref to delete</span></div>\n\
<div class=\"line\">        *entry = reader; <span class=\"comment\">// to pass parent check in orphan()</span></div>\n\
<div class=\"line\">        reader-&gt;orphan();</div>\n\
<div class=\"line\">        reader-&gt;unref();</div>\n\
<div class=\"line\">        *entry = (PtexReader*)-1; <span class=\"comment\">// flag for future lookups</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"comment\">// successful open, record in _files map entry</span></div>\n\
<div class=\"line\">    *entry = reader;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clean up unused files</span></div>\n\
<div class=\"line\">    purgeFiles();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Cleanup map every so often so it doesn&#39;t get HUGE</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// from being filled with blank entries from dead files.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note: this must be done while we still have the open lock!</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (++_cleanupCount &gt;= 1000) {</div>\n\
<div class=\"line\">        _cleanupCount = 0;</div>\n\
<div class=\"line\">        removeBlankEntries();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> reader;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexCache* PtexCache::create(<span class=\"keywordtype\">int</span> maxFiles, <span class=\"keywordtype\">int</span> maxMem, <span class=\"keywordtype\">bool</span> premultiply,</div>\n\
<div class=\"line\">                 PtexInputHandler* handler)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// set default files to 100</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (maxFiles &lt;= 0) maxFiles = 100;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set default memory to 100 MB</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> MB = 1024*1024;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (maxMem &lt;= 0) maxMem = 100 * MB;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if memory is &lt; 1 MB, warn</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (maxMem &lt; 1 * MB) {</div>\n\
<div class=\"line\">    std::cerr &lt;&lt; <span class=\"stringliteral\">&quot;Warning, PtexCache created with &lt; 1 MB&quot;</span> &lt;&lt; <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qtextstream_8h.html#ad61c42fcbf3cb355a75ddd5216d12ace\">std::endl</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexReaderCache(maxFiles, maxMem, premultiply, handler);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";