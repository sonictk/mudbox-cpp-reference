var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/PtexWriter.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptex_writer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/PtexWriter.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/PtexWriter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* Ptex writer classes:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">   PtexIncrWriter implements &quot;incremental&quot; mode and simply appends</span></div>\n\
<div class=\"line\"><span class=\"comment\">   &quot;edit&quot; blocks to the end of the file.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">   PtexMainWriter implements both writing from scratch and updating</span></div>\n\
<div class=\"line\"><span class=\"comment\">   an existing file, either to add data or to &quot;roll up&quot; previous</span></div>\n\
<div class=\"line\"><span class=\"comment\">   incremental edits.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">   Because the various headers (faceinfo, levelinfo, etc.) are</span></div>\n\
<div class=\"line\"><span class=\"comment\">   variable-length and precede the data, and because the data size</span></div>\n\
<div class=\"line\"><span class=\"comment\">   is not known until it is compressed and written, all data</span></div>\n\
<div class=\"line\"><span class=\"comment\">   are written to a temp file and then copied at the end to the</span></div>\n\
<div class=\"line\"><span class=\"comment\">   final location.  This happens during the &quot;finish&quot; phase.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">   Each time a texture is written to the file, a reduction of the</span></div>\n\
<div class=\"line\"><span class=\"comment\">   texture is also generated and stored.  These reductions are stored</span></div>\n\
<div class=\"line\"><span class=\"comment\">   in a temporary form and recalled later as the resolution levels are</span></div>\n\
<div class=\"line\"><span class=\"comment\">   generated.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">   The final reduction for each face is averaged and stored in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">   const data block.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;errno.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;signal.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;iostream&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;sstream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;Ptexture.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexUtils.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexWriter.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FILE* OpenTempFile(<a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a>&amp; tmppath)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> Mutex lock;</div>\n\
<div class=\"line\">    AutoMutex locker(lock);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// choose temp dir</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> tmpdir;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> initialized = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!initialized) {</div>\n\
<div class=\"line\">        initialized = 1;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WINDOWS</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// use GetTempPath API (first call determines length of result)</span></div>\n\
<div class=\"line\">        DWORD result = ::GetTempPath(0, _T(<span class=\"stringliteral\">&quot;&quot;</span>));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (result &gt; 0) {</div>\n\
<div class=\"line\">        std::vector&lt;TCHAR&gt; tempPath(result + 1);</div>\n\
<div class=\"line\">        result = ::GetTempPath(static_cast&lt;DWORD&gt;(tempPath.size()), &amp;tempPath[0]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (result &gt; 0 &amp;&amp; result &lt;= tempPath.size())</div>\n\
<div class=\"line\">            tmpdir = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a>(tempPath.begin(), </div>\n\
<div class=\"line\">                     tempPath.begin() + <span class=\"keyword\">static_cast&lt;</span>std::size_t<span class=\"keyword\">&gt;</span>(result));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            tmpdir = <span class=\"stringliteral\">&quot;.&quot;</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// try $TEMP or $TMP, use /tmp as last resort</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a> = getenv(<span class=\"stringliteral\">&quot;TEMP&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!t) t = getenv(<span class=\"stringliteral\">&quot;TMP&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!t) t = <span class=\"stringliteral\">&quot;/tmp&quot;</span>;</div>\n\
<div class=\"line\">        tmpdir = <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a>;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build temp path</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WINDOWS</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// use process id and counter to make unique filename</span></div>\n\
<div class=\"line\">    std::stringstream <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a> = 0;</div>\n\
<div class=\"line\">    s &lt;&lt; tmpdir &lt;&lt; <span class=\"stringliteral\">&quot;/&quot;</span> &lt;&lt; <span class=\"stringliteral\">&quot;PtexTmp&quot;</span> &lt;&lt; getpid() &lt;&lt; <span class=\"stringliteral\">&quot;_&quot;</span> &lt;&lt; ++<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>;</div>\n\
<div class=\"line\">    tmppath = s.str();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fopen((<span class=\"keywordtype\">char</span>*) tmppath.c_str(), <span class=\"stringliteral\">&quot;wb+&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// use mkstemp to open unique file</span></div>\n\
<div class=\"line\">    tmppath = tmpdir + <span class=\"stringliteral\">&quot;/PtexTmpXXXXXX&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> fd = mkstemp((<span class=\"keywordtype\">char</span>*) tmppath.c_str());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fdopen(fd, <span class=\"stringliteral\">&quot;w+&quot;</span>);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> fileError(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* message, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    std::stringstream str;</div>\n\
<div class=\"line\">    str &lt;&lt; message &lt;&lt; path &lt;&lt; <span class=\"stringliteral\">&quot;\\n&quot;</span> &lt;&lt; strerror(errno);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> str.str();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> checkFormat(Ptex::MeshType mt, Ptex::DataType dt, <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan,</div>\n\
<div class=\"line\">             Ptex::String&amp; error)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// check to see if given file attributes are valid</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!PtexIO::LittleEndian()) {</div>\n\
<div class=\"line\">        error = <span class=\"stringliteral\">&quot;PtexWriter doesn&#39;t currently support big-endian cpu&#39;s&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mt &lt; Ptex::mt_triangle || mt &gt; Ptex::mt_quad) {</div>\n\
<div class=\"line\">        error = <span class=\"stringliteral\">&quot;PtexWriter error: Invalid mesh type&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (dt &lt; Ptex::dt_uint8 || dt &gt; Ptex::dt_float) {</div>\n\
<div class=\"line\">        error = <span class=\"stringliteral\">&quot;PtexWriter error: Invalid data type&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nchannels &lt;= 0) {</div>\n\
<div class=\"line\">        error = <span class=\"stringliteral\">&quot;PtexWriter error: Invalid number of channels&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alphachan != -1 &amp;&amp; (alphachan &lt; 0 || alphachan &gt;= nchannels)) {</div>\n\
<div class=\"line\">        error = <span class=\"stringliteral\">&quot;PtexWriter error: Invalid alpha channel&quot;</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexWriter* PtexWriter::open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path,</div>\n\
<div class=\"line\">                 Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces,</div>\n\
<div class=\"line\">                 Ptex::String&amp; error, <span class=\"keywordtype\">bool</span> genmipmaps)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!checkFormat(mt, dt, nchannels, alphachan, error))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexMainWriter* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = <span class=\"keyword\">new</span> PtexMainWriter(path, 0,</div>\n\
<div class=\"line\">                       mt, dt, nchannels, alphachan, nfaces,</div>\n\
<div class=\"line\">                       genmipmaps);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> errstr;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!w-&gt;ok(error)) {</div>\n\
<div class=\"line\">    w-&gt;release();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexWriter* PtexWriter::edit(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, <span class=\"keywordtype\">bool</span> incremental,</div>\n\
<div class=\"line\">                 Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces,</div>\n\
<div class=\"line\">                 Ptex::String&amp; error, <span class=\"keywordtype\">bool</span> genmipmaps)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!checkFormat(mt, dt, nchannels, alphachan, error))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// try to open existing file (it might not exist)</span></div>\n\
<div class=\"line\">    FILE* fp = fopen(path, <span class=\"stringliteral\">&quot;rb+&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fp &amp;&amp; errno != ENOENT) {</div>\n\
<div class=\"line\">    error = fileError(<span class=\"stringliteral\">&quot;Can&#39;t open ptex file for update: &quot;</span>, path).c_str();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexWriterBase* w = 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">// use incremental writer iff incremental mode requested and file exists</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (incremental &amp;&amp; fp) {</div>\n\
<div class=\"line\">    w = <span class=\"keyword\">new</span> PtexIncrWriter(path, fp, mt, dt, nchannels, alphachan, nfaces);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// otherwise use main writer</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    PtexTexture* tex = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fp) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// got an existing file, close and reopen with PtexReader</span></div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// open reader for existing file</span></div>\n\
<div class=\"line\">        tex = PtexTexture::open(path, error);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!tex) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// make sure header matches</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> headerMatch = (mt == tex-&gt;meshType() &amp;&amp;</div>\n\
<div class=\"line\">                dt == tex-&gt;dataType() &amp;&amp;</div>\n\
<div class=\"line\">                nchannels == tex-&gt;numChannels() &amp;&amp;</div>\n\
<div class=\"line\">                alphachan == tex-&gt;alphaChannel() &amp;&amp;</div>\n\
<div class=\"line\">                nfaces == tex-&gt;numFaces());</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!headerMatch) {</div>\n\
<div class=\"line\">        std::stringstream str;</div>\n\
<div class=\"line\">        str &lt;&lt; <span class=\"stringliteral\">&quot;PtexWriter::edit error: header doesn&#39;t match existing file, &quot;</span></div>\n\
<div class=\"line\">            &lt;&lt; <span class=\"stringliteral\">&quot;conversions not currently supported&quot;</span>;</div>\n\
<div class=\"line\">        error = str.str().c_str();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    w = <span class=\"keyword\">new</span> PtexMainWriter(path, tex, mt, dt, nchannels, alphachan,</div>\n\
<div class=\"line\">                   nfaces, genmipmaps);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!w-&gt;ok(error)) {</div>\n\
<div class=\"line\">    w-&gt;release();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexWriter::applyEdits(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, Ptex::String&amp; error)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// open reader for existing file</span></div>\n\
<div class=\"line\">    PtexTexture* tex = PtexTexture::open(path, error);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!tex) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// see if we have any edits to apply</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (tex-&gt;hasEdits()) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// create non-incremental writer</span></div>\n\
<div class=\"line\">    PtexWriter* w = <span class=\"keyword\">new</span> PtexMainWriter(path, tex, tex-&gt;meshType(), tex-&gt;dataType(),</div>\n\
<div class=\"line\">                       tex-&gt;numChannels(), tex-&gt;alphaChannel(), tex-&gt;numFaces(),</div>\n\
<div class=\"line\">                       tex-&gt;hasMipMaps());</div>\n\
<div class=\"line\">    <span class=\"comment\">// close to rebuild file</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!w-&gt;close(error)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    w-&gt;release();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexWriterBase::PtexWriterBase(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path,</div>\n\
<div class=\"line\">                   Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">bool</span> compress)</div>\n\
<div class=\"line\">    : _ok(true),</div>\n\
<div class=\"line\">      _path(path),</div>\n\
<div class=\"line\">      _tilefp(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    memset(&amp;_header, 0, <span class=\"keyword\">sizeof</span>(_header));</div>\n\
<div class=\"line\">    _header.magic = Magic;</div>\n\
<div class=\"line\">    _header.version = PtexFileMajorVersion;</div>\n\
<div class=\"line\">    _header.minorversion = PtexFileMinorVersion;</div>\n\
<div class=\"line\">    _header.meshtype = mt;</div>\n\
<div class=\"line\">    _header.datatype = dt;</div>\n\
<div class=\"line\">    _header.alphachan = alphachan;</div>\n\
<div class=\"line\">    _header.nchannels = nchannels;</div>\n\
<div class=\"line\">    _header.nfaces = nfaces;</div>\n\
<div class=\"line\">    _header.nlevels = 0;</div>\n\
<div class=\"line\">    _header.extheadersize = <span class=\"keyword\">sizeof</span>(_extheader);</div>\n\
<div class=\"line\">    _pixelSize = _header.pixelSize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    memset(&amp;_extheader, 0, <span class=\"keyword\">sizeof</span>(_extheader));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mt == mt_triangle)</div>\n\
<div class=\"line\">    _reduceFn = &amp;PtexUtils::reduceTri;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    _reduceFn = &amp;PtexUtils::reduce;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    memset(&amp;_zstream, 0, <span class=\"keyword\">sizeof</span>(_zstream));</div>\n\
<div class=\"line\">    deflateInit(&amp;_zstream, compress ? Z_DEFAULT_COMPRESSION : 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create temp file for writing tiles</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (must compress each tile before assembling a tiled face)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> error;</div>\n\
<div class=\"line\">    _tilefp = OpenTempFile(_tilepath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_tilefp) {</div>\n\
<div class=\"line\">    setError(fileError(<span class=\"stringliteral\">&quot;Error creating temp file: &quot;</span>, _tilepath.c_str()));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::release()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Ptex::String error;</div>\n\
<div class=\"line\">    <span class=\"comment\">// close writer if app didn&#39;t, and report error if any</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_tilefp &amp;&amp; !close(error))</div>\n\
<div class=\"line\">    std::cerr &lt;&lt; error.c_str() &lt;&lt; <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qtextstream_8h.html#ad61c42fcbf3cb355a75ddd5216d12ace\">std::endl</a>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexWriterBase::~PtexWriterBase()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    deflateEnd(&amp;_zstream);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexWriterBase::close(Ptex::String&amp; error)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_ok) finish();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) getError(error);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_tilefp) {</div>\n\
<div class=\"line\">    fclose(_tilefp);</div>\n\
<div class=\"line\">    unlink(_tilepath.c_str());</div>\n\
<div class=\"line\">    _tilefp = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> _ok;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexWriterBase::storeFaceInfo(<span class=\"keywordtype\">int</span> faceid, FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, <span class=\"keyword\">const</span> FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a>, <span class=\"keywordtype\">int</span> flags)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (faceid &lt; 0 || <span class=\"keywordtype\">size_t</span>(faceid) &gt;= _header.nfaces) {</div>\n\
<div class=\"line\">    setError(<span class=\"stringliteral\">&quot;PtexWriter error: faceid out of range&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_header.meshtype == mt_triangle &amp;&amp; (f.res.ulog2 != f.res.vlog2)) {</div>\n\
<div class=\"line\">    setError(<span class=\"stringliteral\">&quot;PtexWriter error: asymmetric face res not supported for triangle textures&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy all values</span></div>\n\
<div class=\"line\">    f = <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// and clear extraneous ones</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_header.meshtype == mt_triangle) {</div>\n\
<div class=\"line\">    f.flags = 0; <span class=\"comment\">// no user-settable flags on triangles</span></div>\n\
<div class=\"line\">    f.adjfaces[3] = -1;</div>\n\
<div class=\"line\">    f.adjedges &amp;= 0x3f; <span class=\"comment\">// clear all but bottom six bits</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// clear non-user-settable flags</span></div>\n\
<div class=\"line\">    f.flags &amp;= FaceInfo::flag_subface;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set new flags</span></div>\n\
<div class=\"line\">    f.flags |= flags;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    addMetaData(key, mdt_string, value, <span class=\"keywordtype\">int</span>(strlen(value)+1));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int8_t* value, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    addMetaData(key, mdt_int8, value, count);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int16_t* value, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    addMetaData(key, mdt_int16, value, count*<span class=\"keyword\">sizeof</span>(int16_t));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int32_t* value, <span class=\"keywordtype\">int</span> count)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    addMetaData(key, mdt_int32, value, count*<span class=\"keyword\">sizeof</span>(int32_t));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* value, <span class=\"keywordtype\">int</span> count)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    addMetaData(key, mdt_float, value, count*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* value, <span class=\"keywordtype\">int</span> count)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    addMetaData(key, mdt_double, value, count*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeMeta(PtexMetaData* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nkeys = data-&gt;numKeys();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nkeys; i++) {</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key = 0;</div>\n\
<div class=\"line\">    MetaDataType <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>;</div>\n\
<div class=\"line\">    data-&gt;getKey(i, key, type);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (type) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> mdt_string:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* val=0;</div>\n\
<div class=\"line\">        data-&gt;getValue(key, val);</div>\n\
<div class=\"line\">        writeMeta(key, val);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> mdt_int8:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> int8_t* val=0;</div>\n\
<div class=\"line\">        data-&gt;getValue(key, val, count);</div>\n\
<div class=\"line\">        writeMeta(key, val, count);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> mdt_int16:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> int16_t* val=0;</div>\n\
<div class=\"line\">        data-&gt;getValue(key, val, count);</div>\n\
<div class=\"line\">        writeMeta(key, val, count);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> mdt_int32:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> int32_t* val=0;</div>\n\
<div class=\"line\">        data-&gt;getValue(key, val, count);</div>\n\
<div class=\"line\">        writeMeta(key, val, count);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> mdt_float:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* val=0;</div>\n\
<div class=\"line\">        data-&gt;getValue(key, val, count);</div>\n\
<div class=\"line\">        writeMeta(key, val, count);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> mdt_double:</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* val=0;</div>\n\
<div class=\"line\">        data-&gt;getValue(key, val, count);</div>\n\
<div class=\"line\">        writeMeta(key, val, count);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::addMetaData(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, MetaDataType <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a>,</div>\n\
<div class=\"line\">                 <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* value, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strlen(key) &gt; 255) {</div>\n\
<div class=\"line\">    std::stringstream str;</div>\n\
<div class=\"line\">    str &lt;&lt; <span class=\"stringliteral\">&quot;PtexWriter error: meta data key too long (max=255) \\&quot;&quot;</span> &lt;&lt; key &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">    setError(str.str());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (size &lt;= 0) {</div>\n\
<div class=\"line\">    std::stringstream str;</div>\n\
<div class=\"line\">    str &lt;&lt; <span class=\"stringliteral\">&quot;PtexWriter error: meta data size &lt;= 0 for \\&quot;&quot;</span> &lt;&lt; key &lt;&lt; <span class=\"stringliteral\">&quot;\\&quot;&quot;</span>;</div>\n\
<div class=\"line\">    setError(str.str());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    std::map&lt;std::string,int&gt;::iterator iter = _metamap.find(key);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a6468fe3bfff24d7d939eb21863b88268\">index</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (iter != _metamap.end()) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// see if we already have this entry - if so, overwrite it</span></div>\n\
<div class=\"line\">    index = iter-&gt;second;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// allocate a new entry</span></div>\n\
<div class=\"line\">    index = _metadata.size();</div>\n\
<div class=\"line\">    _metadata.resize(index+1);</div>\n\
<div class=\"line\">    _metamap[key] = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a6468fe3bfff24d7d939eb21863b88268\">index</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    MetaEntry&amp; m = _metadata[<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a6468fe3bfff24d7d939eb21863b88268\">index</a>];</div>\n\
<div class=\"line\">    m.key = key;</div>\n\
<div class=\"line\">    m.datatype = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a>;</div>\n\
<div class=\"line\">    m.data.resize(size);</div>\n\
<div class=\"line\">    memcpy(&amp;m.data[0], value, size);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> PtexWriterBase::writeBlank(FILE* fp, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">char</span> zeros[BlockSize] = {0};</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> remain = <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (remain &gt; 0) {</div>\n\
<div class=\"line\">    remain -= writeBlock(fp, zeros, remain &lt; BlockSize ? remain : BlockSize);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> PtexWriterBase::writeBlock(FILE* fp, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fwrite(data, size, 1, fp)) {</div>\n\
<div class=\"line\">    setError(<span class=\"stringliteral\">&quot;PtexWriter error: file write failed&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> PtexWriterBase::writeZipBlock(FILE* fp, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> size, <span class=\"keywordtype\">bool</span> finish)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* buff = alloca(BlockSize);</div>\n\
<div class=\"line\">    _zstream.next_in = (Bytef*)data;</div>\n\
<div class=\"line\">    _zstream.avail_in = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (1) {</div>\n\
<div class=\"line\">    _zstream.next_out = (Bytef*)buff;</div>\n\
<div class=\"line\">    _zstream.avail_out = BlockSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> zresult = deflate(&amp;_zstream, finish ? Z_FINISH : Z_NO_FLUSH);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> size = BlockSize - _zstream.avail_out;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (size &gt; 0) writeBlock(fp, buff, size);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (zresult == Z_STREAM_END) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (zresult != Z_OK) {</div>\n\
<div class=\"line\">        setError(<span class=\"stringliteral\">&quot;PtexWriter error: data compression internal error&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!finish &amp;&amp; _zstream.avail_out != 0)</div>\n\
<div class=\"line\">        <span class=\"comment\">// waiting for more input</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!finish) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> total = _zstream.total_out;</div>\n\
<div class=\"line\">    deflateReset(&amp;_zstream);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> total;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> PtexWriterBase::readBlock(FILE* fp, <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fread(data, size, 1, fp)) {</div>\n\
<div class=\"line\">    setError(<span class=\"stringliteral\">&quot;PtexWriter error: temp file read failed&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> PtexWriterBase::copyBlock(FILE* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>, FILE* src, FilePos pos, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (size &lt;= 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    fseeko(src, pos, SEEK_SET);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> remain = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* buff = alloca(BlockSize);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (remain) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nbytes = remain &lt; BlockSize ? remain : BlockSize;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fread(buff, nbytes, 1, src)) {</div>\n\
<div class=\"line\">        setError(<span class=\"stringliteral\">&quot;PtexWriter error: temp file read failed&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!writeBlock(dst, buff, nbytes)) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    remain -= nbytes;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Ptex::Res PtexWriterBase::calcTileRes(Res faceres)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// desired number of tiles = floor(log2(facesize / tilesize))</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> facesize = faceres.size() * _pixelSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntileslog2 = PtexUtils::floor_log2(facesize/TileSize);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ntileslog2 == 0) <span class=\"keywordflow\">return</span> faceres;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// number of tiles is defined as:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   ntileslog2 = ureslog2 + vreslog2 - (tile_ureslog2 + tile_vreslog2)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// rearranging to solve for the tile res:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   tile_ureslog2 + tile_vreslog2 = ureslog2 + vreslog2 - ntileslog2</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a> = faceres.ulog2 + faceres.vlog2 - ntileslog2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// choose u and v sizes for roughly square result (u ~= v ~= n/2)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and make sure tile isn&#39;t larger than face</span></div>\n\
<div class=\"line\">    Res tileres;</div>\n\
<div class=\"line\">    tileres.ulog2 = PtexUtils::min((n+1)/2, <span class=\"keywordtype\">int</span>(faceres.ulog2));</div>\n\
<div class=\"line\">    tileres.vlog2 = PtexUtils::min(n - tileres.ulog2, <span class=\"keywordtype\">int</span>(faceres.vlog2));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> tileres;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeConstFaceBlock(FILE* fp, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data,</div>\n\
<div class=\"line\">                     FaceDataHeader&amp; fdh)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// write a single const face data block</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// record level data for face and output the one pixel value</span></div>\n\
<div class=\"line\">    fdh.set(_pixelSize, enc_constant);</div>\n\
<div class=\"line\">    writeBlock(fp, data, _pixelSize);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeFaceBlock(FILE* fp, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>,</div>\n\
<div class=\"line\">                    Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>, FaceDataHeader&amp; fdh)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// write a single face data block</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy to temp buffer, and deinterleave</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ures = res.u(), vres = res.v();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> blockSize = ures*vres*_pixelSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useMalloc = blockSize &gt; AllocaMax;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* buff = useMalloc ? (<span class=\"keywordtype\">char</span>*) malloc(blockSize) : (char*)alloca(blockSize);</div>\n\
<div class=\"line\">    PtexUtils::deinterleave(data, stride, ures, vres, buff,</div>\n\
<div class=\"line\">                ures*DataSize(_header.datatype),</div>\n\
<div class=\"line\">                _header.datatype, _header.nchannels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// difference if needed</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> diff = (_header.datatype == dt_uint8 ||</div>\n\
<div class=\"line\">         _header.datatype == dt_uint16);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (diff) PtexUtils::encodeDifference(buff, blockSize, _header.datatype);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compress and stream data to file, and record size in header</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> zippedsize = writeZipBlock(fp, buff, blockSize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// record compressed size and encoding in data header</span></div>\n\
<div class=\"line\">    fdh.set(zippedsize, diff ? enc_diffzipped : enc_zipped);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (useMalloc) free(buff);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeFaceData(FILE* fp, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> stride,</div>\n\
<div class=\"line\">                   Res res, FaceDataHeader&amp; fdh)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// determine whether to break into tiles</span></div>\n\
<div class=\"line\">    Res tileres = calcTileRes(res);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesu = res.ntilesu(tileres);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesv = res.ntilesv(tileres);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntiles = ntilesu * ntilesv;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ntiles == 1) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// write single block</span></div>\n\
<div class=\"line\">    writeFaceBlock(fp, data, stride, res, fdh);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// write tiles to tilefp temp file</span></div>\n\
<div class=\"line\">    rewind(_tilefp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// alloc tile header</span></div>\n\
<div class=\"line\">    std::vector&lt;FaceDataHeader&gt; tileHeader(ntiles);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileures = tileres.u();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tilevres = tileres.v();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileustride = tileures*_pixelSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tilevstride = tilevres*<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// output tiles</span></div>\n\
<div class=\"line\">    FaceDataHeader* tdh = &amp;tileHeader[0];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> datasize = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* rowp = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*) data;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* rowpend = rowp + ntilesv * tilevstride;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; rowp != rowpend; rowp += tilevstride) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a> = rowp;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* pend = p + ntilesu * tileustride;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (; p != pend; tdh++, p += tileustride) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// determine if tile is constant</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (PtexUtils::isConstant(p, stride, tileures, tilevres, _pixelSize))</div>\n\
<div class=\"line\">            writeConstFaceBlock(_tilefp, p, *tdh);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            writeFaceBlock(_tilefp, p, stride, tileres, *tdh);</div>\n\
<div class=\"line\">        datasize += tdh-&gt;blocksize();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// output compressed tile header</span></div>\n\
<div class=\"line\">    uint32_t tileheadersize = writeZipBlock(_tilefp, &amp;tileHeader[0],</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span>(<span class=\"keyword\">sizeof</span>(FaceDataHeader)*tileHeader.size()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// output tile data pre-header</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> totalsize = 0;</div>\n\
<div class=\"line\">    totalsize += writeBlock(fp, &amp;tileres, <span class=\"keyword\">sizeof</span>(Res));</div>\n\
<div class=\"line\">    totalsize += writeBlock(fp, &amp;tileheadersize, <span class=\"keyword\">sizeof</span>(tileheadersize));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy compressed tile header from temp file</span></div>\n\
<div class=\"line\">    totalsize += copyBlock(fp, _tilefp, datasize, tileheadersize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy tile data from temp file</span></div>\n\
<div class=\"line\">    totalsize += copyBlock(fp, _tilefp, 0, datasize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    fdh.set(totalsize, enc_tiled);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexWriterBase::writeReduction(FILE* fp, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> stride, Res res)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// reduce and write to file</span></div>\n\
<div class=\"line\">    Ptex::Res newres(res.ulog2-1, res.vlog2-1);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> buffsize = newres.size() * _pixelSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> useMalloc = buffsize &gt; AllocaMax;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* buff = useMalloc ? (<span class=\"keywordtype\">char</span>*) malloc(buffsize) : (char*)alloca(buffsize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> dstride = newres.u() * _pixelSize;</div>\n\
<div class=\"line\">    _reduceFn(data, stride, res.u(), res.v(), buff, dstride, _header.datatype, _header.nchannels);</div>\n\
<div class=\"line\">    writeBlock(fp, buff, buffsize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (useMalloc) free(buff);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> PtexWriterBase::writeMetaDataBlock(FILE* fp, MetaEntry&amp; val)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    uint8_t keysize = uint8_t(val.key.size()+1);</div>\n\
<div class=\"line\">    uint8_t datatype = val.datatype;</div>\n\
<div class=\"line\">    uint32_t datasize = uint32_t(val.data.size());</div>\n\
<div class=\"line\">    writeZipBlock(fp, &amp;keysize, <span class=\"keyword\">sizeof</span>(keysize), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    writeZipBlock(fp, val.key.c_str(), keysize, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    writeZipBlock(fp, &amp;datatype, <span class=\"keyword\">sizeof</span>(datatype), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    writeZipBlock(fp, &amp;datasize, <span class=\"keyword\">sizeof</span>(datasize), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    writeZipBlock(fp, &amp;val.data[0], datasize, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> memsize = (<span class=\"keyword\">sizeof</span>(keysize) + keysize + <span class=\"keyword\">sizeof</span>(datatype)</div>\n\
<div class=\"line\">           + <span class=\"keyword\">sizeof</span>(datasize) + datasize);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> memsize;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexMainWriter::PtexMainWriter(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, PtexTexture* tex,</div>\n\
<div class=\"line\">                   Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces, <span class=\"keywordtype\">bool</span> genmipmaps)</div>\n\
<div class=\"line\">    : PtexWriterBase(path, mt, dt, nchannels, alphachan, nfaces,</div>\n\
<div class=\"line\">             <span class=\"comment\">/* compress */</span> true),</div>\n\
<div class=\"line\">      _hasNewData(false),</div>\n\
<div class=\"line\">      _genmipmaps(genmipmaps),</div>\n\
<div class=\"line\">      _reader(0)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    _tmpfp = OpenTempFile(_tmppath);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_tmpfp) {</div>\n\
<div class=\"line\">    setError(fileError(<span class=\"stringliteral\">&quot;Error creating temp file: &quot;</span>, _tmppath.c_str()));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// data will be written to a &quot;.new&quot; path and then renamed to final location</span></div>\n\
<div class=\"line\">    _newpath = path; _newpath += <span class=\"stringliteral\">&quot;.new&quot;</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _levels.reserve(20);</div>\n\
<div class=\"line\">    _levels.resize(1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// init faceinfo and set flags to -1 to mark as uninitialized</span></div>\n\
<div class=\"line\">    _faceinfo.resize(nfaces);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nfaces; i++) _faceinfo[i].flags = uint8_t(-1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    _levels.front().pos.resize(nfaces);</div>\n\
<div class=\"line\">    _levels.front().fdh.resize(nfaces);</div>\n\
<div class=\"line\">    _rpos.resize(nfaces);</div>\n\
<div class=\"line\">    _constdata.resize(nfaces*_pixelSize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (tex) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// access reader implementation</span></div>\n\
<div class=\"line\">    _reader = <span class=\"keyword\">dynamic_cast&lt;</span>PtexReader*<span class=\"keyword\">&gt;</span>(tex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_reader) {</div>\n\
<div class=\"line\">        setError(<span class=\"stringliteral\">&quot;Internal error: dynamic_cast&lt;PtexReader*&gt; failed&quot;</span>);</div>\n\
<div class=\"line\">        tex-&gt;release();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy border modes</span></div>\n\
<div class=\"line\">    setBorderModes(tex-&gt;uBorderMode(), tex-&gt;vBorderMode());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy meta data from existing file</span></div>\n\
<div class=\"line\">    PtexPtr&lt;PtexMetaData&gt; meta ( _reader-&gt;getMetaData() );</div>\n\
<div class=\"line\">    writeMeta(meta);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// see if we have any edits</span></div>\n\
<div class=\"line\">    _hasNewData = _reader-&gt;hasEdits();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexMainWriter::~PtexMainWriter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_reader) _reader-&gt;release();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexMainWriter::close(Ptex::String&amp; error)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// closing base writer will write all pending data via finish() method</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and will close _fp (which in this case is on the temp disk)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = PtexWriterBase::close(error);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_reader) {</div>\n\
<div class=\"line\">    _reader-&gt;release();</div>\n\
<div class=\"line\">    _reader = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_tmpfp) {</div>\n\
<div class=\"line\">    fclose(_tmpfp);</div>\n\
<div class=\"line\">    unlink(_tmppath.c_str());</div>\n\
<div class=\"line\">    _tmpfp = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (result &amp;&amp; _hasNewData) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// rename temppath into final location</span></div>\n\
<div class=\"line\">    unlink(_path.c_str());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (rename(_newpath.c_str(), _path.c_str()) == -1) {</div>\n\
<div class=\"line\">        error = fileError(<span class=\"stringliteral\">&quot;Can&#39;t write to ptex file: &quot;</span>, _path.c_str()).c_str();</div>\n\
<div class=\"line\">        unlink(_newpath.c_str());</div>\n\
<div class=\"line\">        result = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexMainWriter::writeFace(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> FaceInfo&amp; f, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> stride)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// auto-compute stride</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stride == 0) stride = f.res.u()*_pixelSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// handle constant case</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (PtexUtils::isConstant(data, stride, f.res.u(), f.res.v(), _pixelSize))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> writeConstantFace(faceid, f, data);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// non-constant case, ...</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check and store face info</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!storeFaceInfo(faceid, _faceinfo[faceid], f)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// record position of current face</span></div>\n\
<div class=\"line\">    _levels.front().pos[faceid] = ftello(_tmpfp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write face data</span></div>\n\
<div class=\"line\">    writeFaceData(_tmpfp, data, stride, f.res, _levels.front().fdh[faceid]);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// premultiply (if needed) before making reductions; use temp copy of data</span></div>\n\
<div class=\"line\">    uint8_t* temp = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_header.hasAlpha()) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// first copy to temp buffer</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = f.res.u() * _pixelSize, nrows = f.res.v();</div>\n\
<div class=\"line\">    temp = (uint8_t*) malloc(rowlen * nrows);</div>\n\
<div class=\"line\">    PtexUtils::copy(data, stride, temp, rowlen, nrows, rowlen);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// multiply alpha</span></div>\n\
<div class=\"line\">    PtexUtils::multalpha(temp, f.res.size(), _header.datatype, _header.nchannels,</div>\n\
<div class=\"line\">                 _header.alphachan);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// override source buffer</span></div>\n\
<div class=\"line\">    data = temp;</div>\n\
<div class=\"line\">    stride = rowlen;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// generate first reduction (if needed)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_genmipmaps &amp;&amp;</div>\n\
<div class=\"line\">    (f.res.ulog2 &gt; MinReductionLog2 &amp;&amp; f.res.vlog2 &gt; MinReductionLog2))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    _rpos[faceid] = ftello(_tmpfp);</div>\n\
<div class=\"line\">    writeReduction(_tmpfp, data, stride, f.res);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    storeConstValue(faceid, data, stride, f.res);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (temp) free(temp);</div>\n\
<div class=\"line\">    _hasNewData = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexMainWriter::writeConstantFace(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> FaceInfo&amp; f, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check and store face info</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!storeFaceInfo(faceid, _faceinfo[faceid], f, FaceInfo::flag_constant)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// store face value in constant block</span></div>\n\
<div class=\"line\">    memcpy(&amp;_constdata[faceid*_pixelSize], data, _pixelSize);</div>\n\
<div class=\"line\">    _hasNewData = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexMainWriter::storeConstValue(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> stride, Res res)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// compute average value and store in _constdata block</span></div>\n\
<div class=\"line\">    uint8_t* constdata = &amp;_constdata[faceid*_pixelSize];</div>\n\
<div class=\"line\">    PtexUtils::average(data, stride, res.u(), res.v(), constdata,</div>\n\
<div class=\"line\">               _header.datatype, _header.nchannels);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_header.hasAlpha())</div>\n\
<div class=\"line\">    PtexUtils::divalpha(constdata, 1, _header.datatype, _header.nchannels, _header.alphachan);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexMainWriter::finish()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// do nothing if there&#39;s no new data to write</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_hasNewData) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy missing faces from _reader</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_reader) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0, nfaces = _header.nfaces; i &lt; nfaces; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (_faceinfo[i].flags == uint8_t(-1)) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// copy face data</span></div>\n\
<div class=\"line\">                <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; info = _reader-&gt;getFaceInfo(i);</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> size = _pixelSize * info.res.size();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (info.isConstant()) {</div>\n\
<div class=\"line\">                    PtexPtr&lt;PtexFaceData&gt; <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a> ( _reader-&gt;getData(i) );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (data) {</div>\n\
<div class=\"line\">                        writeConstantFace(i, info, data-&gt;getData());</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">void</span>* data = malloc(size);</div>\n\
<div class=\"line\">                    _reader-&gt;getData(i, data, 0);</div>\n\
<div class=\"line\">                    writeFace(i, info, data, 0);</div>\n\
<div class=\"line\">                    free(data);</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// just flag missing faces as constant (black)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0, nfaces = _header.nfaces; i &lt; nfaces; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (_faceinfo[i].flags == uint8_t(-1))</div>\n\
<div class=\"line\">        _faceinfo[i].flags = FaceInfo::flag_constant;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write reductions to tmp file</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_genmipmaps)</div>\n\
<div class=\"line\">    generateReductions();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// flag faces w/ constant neighborhoods</span></div>\n\
<div class=\"line\">    flagConstantNeighorhoods();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update header</span></div>\n\
<div class=\"line\">    _header.nlevels = uint16_t(_levels.size());</div>\n\
<div class=\"line\">    _header.nfaces = uint32_t(_faceinfo.size());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create new file</span></div>\n\
<div class=\"line\">    FILE* newfp = fopen(_newpath.c_str(), <span class=\"stringliteral\">&quot;wb+&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!newfp) {</div>\n\
<div class=\"line\">    setError(fileError(<span class=\"stringliteral\">&quot;Can&#39;t write to ptex file: &quot;</span>, _newpath.c_str()));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write blank header (to fill in later)</span></div>\n\
<div class=\"line\">    writeBlank(newfp, HeaderSize);</div>\n\
<div class=\"line\">    writeBlank(newfp, ExtHeaderSize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write compressed face info block</span></div>\n\
<div class=\"line\">    _header.faceinfosize = writeZipBlock(newfp, &amp;_faceinfo[0],</div>\n\
<div class=\"line\">                     <span class=\"keyword\">sizeof</span>(FaceInfo)*_header.nfaces);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write compressed const data block</span></div>\n\
<div class=\"line\">    _header.constdatasize = writeZipBlock(newfp, &amp;_constdata[0], <span class=\"keywordtype\">int</span>(_constdata.size()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write blank level info block (to fill in later)</span></div>\n\
<div class=\"line\">    FilePos levelInfoPos = ftello(newfp);</div>\n\
<div class=\"line\">    writeBlank(newfp, LevelInfoSize * _header.nlevels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write level data blocks (and record level info)</span></div>\n\
<div class=\"line\">    std::vector&lt;LevelInfo&gt; levelinfo(_header.nlevels);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> li = 0; li &lt; _header.nlevels; li++)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    LevelInfo&amp; info = levelinfo[li];</div>\n\
<div class=\"line\">    LevelRec&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#abc60a79088789bd61297bf5f9ff500d1\">level</a> = _levels[li];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nfaces = <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(level.fdh.size());</div>\n\
<div class=\"line\">    info.nfaces = nfaces;</div>\n\
<div class=\"line\">    <span class=\"comment\">// output compressed level data header</span></div>\n\
<div class=\"line\">    info.levelheadersize = writeZipBlock(newfp, &amp;level.fdh[0],</div>\n\
<div class=\"line\">                         <span class=\"keyword\">sizeof</span>(FaceDataHeader)*nfaces);</div>\n\
<div class=\"line\">    info.leveldatasize = info.levelheadersize;</div>\n\
<div class=\"line\">    <span class=\"comment\">// copy level data from tmp file</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> fi = 0; fi &lt; nfaces; fi++)</div>\n\
<div class=\"line\">        info.leveldatasize += copyBlock(newfp, _tmpfp, level.pos[fi],</div>\n\
<div class=\"line\">                        level.fdh[fi].blocksize());</div>\n\
<div class=\"line\">    _header.leveldatasize += info.leveldatasize;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    rewind(_tmpfp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write meta data (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_metadata.empty())</div>\n\
<div class=\"line\">    writeMetaData(newfp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update extheader for edit data position</span></div>\n\
<div class=\"line\">    _extheader.editdatapos = ftello(newfp);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// rewrite level info block</span></div>\n\
<div class=\"line\">    fseeko(newfp, levelInfoPos, SEEK_SET);</div>\n\
<div class=\"line\">    _header.levelinfosize = writeBlock(newfp, &amp;levelinfo[0], LevelInfoSize*_header.nlevels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// rewrite header</span></div>\n\
<div class=\"line\">    fseeko(newfp, 0, SEEK_SET);</div>\n\
<div class=\"line\">    writeBlock(newfp, &amp;_header, HeaderSize);</div>\n\
<div class=\"line\">    writeBlock(newfp, &amp;_extheader, ExtHeaderSize);</div>\n\
<div class=\"line\">    fclose(newfp);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexMainWriter::flagConstantNeighorhoods()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// for each constant face</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> faceid = 0, n = <span class=\"keywordtype\">int</span>(_faceinfo.size()); faceid &lt; <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>; faceid++) {</div>\n\
<div class=\"line\">    FaceInfo&amp; f = _faceinfo[faceid];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!f.isConstant()) <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">    uint8_t* constdata = &amp;_constdata[faceid*_pixelSize];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check to see if neighborhood is constant</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConst = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isTriangle = _header.meshtype == mt_triangle;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nedges = isTriangle ? 3 : 4;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> eid = 0; eid &lt; nedges; eid++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> prevWasSubface = f.isSubface();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> prevFid = faceid;</div>\n\
<div class=\"line\">        <span class=\"comment\">// traverse across edge</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> afid = f.adjface(eid);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> aeid = f.adjedge(eid);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> count = 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> maxcount = 10; <span class=\"comment\">// max valence (as safety valve)</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (afid != faceid) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// if we hit a boundary, assume non-const (not worth</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the trouble to redo traversal from CCW direction;</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// also, boundary might want to be &quot;black&quot;)</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// assume const if we hit max valence too</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (afid &lt; 0 || ++count == maxcount)</div>\n\
<div class=\"line\">        { isConst = <span class=\"keyword\">false</span>; <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// check if neighor is constant, and has the same value as face</span></div>\n\
<div class=\"line\">        FaceInfo&amp; af = _faceinfo[afid];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!af.isConstant() ||</div>\n\
<div class=\"line\">            0 != memcmp(constdata, &amp;_constdata[afid*_pixelSize], _pixelSize))</div>\n\
<div class=\"line\">        { isConst = <span class=\"keyword\">false</span>; <span class=\"keywordflow\">break</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// traverse around vertex in CW direction</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// handle T junction between subfaces and main face</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isSubface = af.isSubface();</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isT = !isTriangle &amp;&amp; prevWasSubface &amp;&amp; !isSubface &amp;&amp; af.adjface(aeid) == prevFid;</div>\n\
<div class=\"line\">        <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacestd.html#a48315615ae44e23b2308833bd7116ba5\">std::swap</a>(prevFid, afid);</div>\n\
<div class=\"line\">        prevWasSubface = isSubface;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isT) {</div>\n\
<div class=\"line\">            <span class=\"comment\">// traverse to secondary subface across T junction</span></div>\n\
<div class=\"line\">            FaceInfo&amp; pf = _faceinfo[afid];</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> peid = af.adjedge(aeid);</div>\n\
<div class=\"line\">            peid = (peid + 3) % 4;</div>\n\
<div class=\"line\">            afid = pf.adjface(peid);</div>\n\
<div class=\"line\">            aeid = pf.adjedge(peid);</div>\n\
<div class=\"line\">            aeid = (aeid + 3) % 4;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            <span class=\"comment\">// traverse around vertex</span></div>\n\
<div class=\"line\">            aeid = (aeid + 1) % nedges;</div>\n\
<div class=\"line\">            afid = af.adjface(aeid);</div>\n\
<div class=\"line\">            aeid = af.adjedge(aeid);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!isConst) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (isConst) f.flags |= FaceInfo::flag_nbconstant;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexMainWriter::generateReductions()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// first generate &quot;rfaceids&quot;, reduction faceids,</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// which are faceids reordered by decreasing smaller dimension</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nfaces = _header.nfaces;</div>\n\
<div class=\"line\">    _rfaceids.resize(nfaces);</div>\n\
<div class=\"line\">    _faceids_r.resize(nfaces);</div>\n\
<div class=\"line\">    PtexUtils::genRfaceids(&amp;_faceinfo[0], nfaces, &amp;_rfaceids[0], &amp;_faceids_r[0]);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// determine how many faces in each level, and resize _levels</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// traverse in reverse rfaceid order to find number of faces</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// larger than cutoff size of each level</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> rfaceid = nfaces-1, cutoffres = MinReductionLog2; rfaceid &gt;= 0; rfaceid--) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceid = _faceids_r[rfaceid];</div>\n\
<div class=\"line\">    FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a676ca580c460c0154eb58200433d2a9e\">face</a> = _faceinfo[faceid];</div>\n\
<div class=\"line\">    Res res = face.res;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> min = face.isConstant() ? 1 : PtexUtils::min(res.ulog2, res.vlog2);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (min &gt; cutoffres) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// i == last face for current level</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> size = rfaceid+1;</div>\n\
<div class=\"line\">        _levels.push_back(LevelRec());</div>\n\
<div class=\"line\">        LevelRec&amp; level = _levels.back();</div>\n\
<div class=\"line\">        level.pos.resize(size);</div>\n\
<div class=\"line\">        level.fdh.resize(size);</div>\n\
<div class=\"line\">        cutoffres++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// generate and cache reductions (including const data)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// first, find largest face and allocate tmp buffer</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> buffsize = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nfaces; i++)</div>\n\
<div class=\"line\">    buffsize = <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(buffsize, _faceinfo[i].res.size());</div>\n\
<div class=\"line\">    buffsize *= _pixelSize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* buff = (<span class=\"keywordtype\">char</span>*) malloc(buffsize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nlevels = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(_levels.size());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 1; i &lt; nlevels; i++) {</div>\n\
<div class=\"line\">    LevelRec&amp; level = _levels[i];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nextsize = (i+1 &lt; nlevels)? <span class=\"keywordtype\">int</span>(_levels[i+1].fdh.size()) : 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> rfaceid = 0, size = <span class=\"keywordtype\">int</span>(level.fdh.size()); rfaceid &lt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>; rfaceid++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// output current reduction for face (previously generated)</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> faceid = _faceids_r[rfaceid];</div>\n\
<div class=\"line\">        Res res = _faceinfo[faceid].res;</div>\n\
<div class=\"line\">        res.ulog2 -= i; res.vlog2 -= i;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> stride = res.u() * _pixelSize;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> blocksize = res.size() * _pixelSize;</div>\n\
<div class=\"line\">        fseeko(_tmpfp, _rpos[faceid], SEEK_SET);</div>\n\
<div class=\"line\">        readBlock(_tmpfp, buff, blocksize);</div>\n\
<div class=\"line\">        fseeko(_tmpfp, 0, SEEK_END);</div>\n\
<div class=\"line\">        level.pos[rfaceid] = ftello(_tmpfp);</div>\n\
<div class=\"line\">        writeFaceData(_tmpfp, buff, stride, res, level.fdh[rfaceid]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!_ok) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// write a new reduction if needed for next level</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (rfaceid &lt; nextsize) {</div>\n\
<div class=\"line\">        fseeko(_tmpfp, _rpos[faceid], SEEK_SET);</div>\n\
<div class=\"line\">        writeReduction(_tmpfp, buff, stride, res);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// the last reduction for each face is its constant value</span></div>\n\
<div class=\"line\">        storeConstValue(faceid, buff, stride, res);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fseeko(_tmpfp, 0, SEEK_END);</div>\n\
<div class=\"line\">    free(buff);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexMainWriter::writeMetaData(FILE* fp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    std::vector&lt;MetaEntry*&gt; lmdEntries; <span class=\"comment\">// large meta data items</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write small meta data items in a single zip block</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0, n = _metadata.size(); i &lt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>; i++) {</div>\n\
<div class=\"line\">    MetaEntry&amp; e = _metadata[i];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keywordtype\">int</span>(e.data.size()) &gt; MetaDataThreshold) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// skip large items, but record for later</span></div>\n\
<div class=\"line\">        lmdEntries.push_back(&amp;e);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// add small item to zip block</span></div>\n\
<div class=\"line\">        _header.metadatamemsize += writeMetaDataBlock(fp, e);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_header.metadatamemsize) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// finish zip block</span></div>\n\
<div class=\"line\">    _header.metadatazipsize = writeZipBlock(fp, 0, 0, <span class=\"comment\">/*finish*/</span> <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write compatibility barrier</span></div>\n\
<div class=\"line\">    writeBlank(fp, <span class=\"keyword\">sizeof</span>(uint64_t));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write large items as separate blocks</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nLmd = lmdEntries.size();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (nLmd &gt; 0) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// write data records to tmp file and accumulate zip sizes for lmd header</span></div>\n\
<div class=\"line\">    std::vector&lt;FilePos&gt; lmdoffset(nLmd);</div>\n\
<div class=\"line\">    std::vector&lt;uint32_t&gt; lmdzipsize(nLmd);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nLmd; i++) {</div>\n\
<div class=\"line\">        MetaEntry* e= lmdEntries[i];</div>\n\
<div class=\"line\">        lmdoffset[i] = ftello(_tmpfp);</div>\n\
<div class=\"line\">        lmdzipsize[i] = writeZipBlock(_tmpfp, &amp;e-&gt;data[0], e-&gt;data.size());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write lmd header records as single zip block</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nLmd; i++) {</div>\n\
<div class=\"line\">        MetaEntry* e = lmdEntries[i];</div>\n\
<div class=\"line\">        uint8_t keysize = uint8_t(e-&gt;key.size()+1);</div>\n\
<div class=\"line\">        uint8_t datatype = e-&gt;datatype;</div>\n\
<div class=\"line\">        uint32_t datasize = e-&gt;data.size();</div>\n\
<div class=\"line\">        uint32_t zipsize = lmdzipsize[i];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        writeZipBlock(fp, &amp;keysize, <span class=\"keyword\">sizeof</span>(keysize), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        writeZipBlock(fp, e-&gt;key.c_str(), keysize, <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        writeZipBlock(fp, &amp;datatype, <span class=\"keyword\">sizeof</span>(datatype), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        writeZipBlock(fp, &amp;datasize, <span class=\"keyword\">sizeof</span>(datasize), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        writeZipBlock(fp, &amp;zipsize, <span class=\"keyword\">sizeof</span>(zipsize), <span class=\"keyword\">false</span>);</div>\n\
<div class=\"line\">        _extheader.lmdheadermemsize +=</div>\n\
<div class=\"line\">        <span class=\"keyword\">sizeof</span>(keysize) + keysize + <span class=\"keyword\">sizeof</span>(datatype) + <span class=\"keyword\">sizeof</span>(datasize) + <span class=\"keyword\">sizeof</span>(zipsize);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    _extheader.lmdheaderzipsize = writeZipBlock(fp, 0, 0, <span class=\"comment\">/*finish*/</span> <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy data records</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nLmd; i++) {</div>\n\
<div class=\"line\">        _extheader.lmddatasize +=</div>\n\
<div class=\"line\">        copyBlock(fp, _tmpfp, lmdoffset[i], lmdzipsize[i]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexIncrWriter::PtexIncrWriter(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, FILE* fp,</div>\n\
<div class=\"line\">                   Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces)</div>\n\
<div class=\"line\">    : PtexWriterBase(path, mt, dt, nchannels, alphachan, nfaces,</div>\n\
<div class=\"line\">             <span class=\"comment\">/* compress */</span> false),</div>\n\
<div class=\"line\">      _fp(fp)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// note: incremental saves are not compressed (see compress flag above)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// to improve save time in the case where in incremental save is followed by</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a full save (which ultimately it always should be).  With a compressed</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// incremental save, the data would be compressed twice and decompressed once</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// on every save vs. just compressing once.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// make sure existing header matches</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fread(&amp;_header, PtexIO::HeaderSize, 1, fp) || _header.magic != Magic) {</div>\n\
<div class=\"line\">    std::stringstream str;</div>\n\
<div class=\"line\">    str &lt;&lt; <span class=\"stringliteral\">&quot;Not a ptex file: &quot;</span> &lt;&lt; path;</div>\n\
<div class=\"line\">    setError(str.str());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> headerMatch = (mt == _header.meshtype &amp;&amp;</div>\n\
<div class=\"line\">            dt == _header.datatype &amp;&amp;</div>\n\
<div class=\"line\">            nchannels == _header.nchannels &amp;&amp;</div>\n\
<div class=\"line\">            alphachan == <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(_header.alphachan) &amp;&amp;</div>\n\
<div class=\"line\">            nfaces == <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(_header.nfaces));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!headerMatch) {</div>\n\
<div class=\"line\">    std::stringstream str;</div>\n\
<div class=\"line\">    str &lt;&lt; <span class=\"stringliteral\">&quot;PtexWriter::edit error: header doesn&#39;t match existing file, &quot;</span></div>\n\
<div class=\"line\">        &lt;&lt; <span class=\"stringliteral\">&quot;conversions not currently supported&quot;</span>;</div>\n\
<div class=\"line\">    setError(str.str());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// read extended header</span></div>\n\
<div class=\"line\">    memset(&amp;_extheader, 0, <span class=\"keyword\">sizeof</span>(_extheader));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fread(&amp;_extheader, PtexUtils::min(uint32_t(ExtHeaderSize), _header.extheadersize), 1, fp)) {</div>\n\
<div class=\"line\">    std::stringstream str;</div>\n\
<div class=\"line\">    str &lt;&lt; <span class=\"stringliteral\">&quot;Error reading extended header: &quot;</span> &lt;&lt; path;</div>\n\
<div class=\"line\">    setError(str.str());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// seek to end of file to append</span></div>\n\
<div class=\"line\">    fseeko(_fp, 0, SEEK_END);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexIncrWriter::~PtexIncrWriter()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexIncrWriter::writeFace(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> FaceInfo&amp; f, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> stride)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (stride == 0) stride = f.res.u()*_pixelSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// handle constant case</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (PtexUtils::isConstant(data, stride, f.res.u(), f.res.v(), _pixelSize))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> writeConstantFace(faceid, f, data);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// init headers</span></div>\n\
<div class=\"line\">    uint8_t edittype = et_editfacedata;</div>\n\
<div class=\"line\">    uint32_t editsize;</div>\n\
<div class=\"line\">    EditFaceDataHeader efdh;</div>\n\
<div class=\"line\">    efdh.faceid = faceid;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check and store face info</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!storeFaceInfo(faceid, efdh.faceinfo, f))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// record position and skip headers</span></div>\n\
<div class=\"line\">    FilePos pos = ftello(_fp);</div>\n\
<div class=\"line\">    writeBlank(_fp, <span class=\"keyword\">sizeof</span>(edittype) + <span class=\"keyword\">sizeof</span>(editsize) + <span class=\"keyword\">sizeof</span>(efdh));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// must compute constant (average) val first</span></div>\n\
<div class=\"line\">    uint8_t* constval = (uint8_t*) malloc(_pixelSize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_header.hasAlpha()) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// must premult alpha before averaging</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// first copy to temp buffer</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = f.res.u() * _pixelSize, nrows = f.res.v();</div>\n\
<div class=\"line\">    uint8_t* temp = (uint8_t*) malloc(rowlen * nrows);</div>\n\
<div class=\"line\">    PtexUtils::copy(data, stride, temp, rowlen, nrows, rowlen);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// multiply alpha</span></div>\n\
<div class=\"line\">    PtexUtils::multalpha(temp, f.res.size(), _header.datatype, _header.nchannels,</div>\n\
<div class=\"line\">                 _header.alphachan);</div>\n\
<div class=\"line\">    <span class=\"comment\">// average</span></div>\n\
<div class=\"line\">    PtexUtils::average(temp, rowlen, f.res.u(), f.res.v(), constval,</div>\n\
<div class=\"line\">               _header.datatype, _header.nchannels);</div>\n\
<div class=\"line\">    <span class=\"comment\">// unmult alpha</span></div>\n\
<div class=\"line\">    PtexUtils::divalpha(constval, 1, _header.datatype, _header.nchannels,</div>\n\
<div class=\"line\">                _header.alphachan);</div>\n\
<div class=\"line\">    free(temp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// average</span></div>\n\
<div class=\"line\">    PtexUtils::average(data, stride, f.res.u(), f.res.v(), constval,</div>\n\
<div class=\"line\">               _header.datatype, _header.nchannels);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// write const val</span></div>\n\
<div class=\"line\">    writeBlock(_fp, constval, _pixelSize);</div>\n\
<div class=\"line\">    free(constval);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write face data</span></div>\n\
<div class=\"line\">    writeFaceData(_fp, data, stride, f.res, efdh.fdh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update editsize in header</span></div>\n\
<div class=\"line\">    editsize = <span class=\"keyword\">sizeof</span>(efdh) + _pixelSize + efdh.fdh.blocksize();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// rewind and write headers</span></div>\n\
<div class=\"line\">    fseeko(_fp, pos, SEEK_SET);</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;edittype, <span class=\"keyword\">sizeof</span>(edittype));</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;editsize, <span class=\"keyword\">sizeof</span>(editsize));</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;efdh, <span class=\"keyword\">sizeof</span>(efdh));</div>\n\
<div class=\"line\">    fseeko(_fp, 0, SEEK_END);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexIncrWriter::writeConstantFace(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> FaceInfo&amp; f, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* data)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// init headers</span></div>\n\
<div class=\"line\">    uint8_t edittype = et_editfacedata;</div>\n\
<div class=\"line\">    uint32_t editsize;</div>\n\
<div class=\"line\">    EditFaceDataHeader efdh;</div>\n\
<div class=\"line\">    efdh.faceid = faceid;</div>\n\
<div class=\"line\">    efdh.fdh.set(0, enc_constant);</div>\n\
<div class=\"line\">    editsize = <span class=\"keyword\">sizeof</span>(efdh) + _pixelSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check and store face info</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!storeFaceInfo(faceid, efdh.faceinfo, f, FaceInfo::flag_constant))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write headers</span></div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;edittype, <span class=\"keyword\">sizeof</span>(edittype));</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;editsize, <span class=\"keyword\">sizeof</span>(editsize));</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;efdh, <span class=\"keyword\">sizeof</span>(efdh));</div>\n\
<div class=\"line\">    <span class=\"comment\">// write data</span></div>\n\
<div class=\"line\">    writeBlock(_fp, data, _pixelSize);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexIncrWriter::writeMetaDataEdit()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// init headers</span></div>\n\
<div class=\"line\">    uint8_t edittype = et_editmetadata;</div>\n\
<div class=\"line\">    uint32_t editsize;</div>\n\
<div class=\"line\">    EditMetaDataHeader emdh;</div>\n\
<div class=\"line\">    emdh.metadatazipsize = 0;</div>\n\
<div class=\"line\">    emdh.metadatamemsize = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// record position and skip headers</span></div>\n\
<div class=\"line\">    FilePos pos = ftello(_fp);</div>\n\
<div class=\"line\">    writeBlank(_fp, <span class=\"keyword\">sizeof</span>(edittype) + <span class=\"keyword\">sizeof</span>(editsize) + <span class=\"keyword\">sizeof</span>(emdh));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// write meta data</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0, n = _metadata.size(); i &lt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>; i++) {</div>\n\
<div class=\"line\">    MetaEntry&amp; e = _metadata[i];</div>\n\
<div class=\"line\">    emdh.metadatamemsize += writeMetaDataBlock(_fp, e);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// finish zip block</span></div>\n\
<div class=\"line\">    emdh.metadatazipsize = writeZipBlock(_fp, 0, 0, <span class=\"comment\">/*finish*/</span> <span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// update headers</span></div>\n\
<div class=\"line\">    editsize = <span class=\"keyword\">sizeof</span>(emdh) + emdh.metadatazipsize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// rewind and write headers</span></div>\n\
<div class=\"line\">    fseeko(_fp, pos, SEEK_SET);</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;edittype, <span class=\"keyword\">sizeof</span>(edittype));</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;editsize, <span class=\"keyword\">sizeof</span>(editsize));</div>\n\
<div class=\"line\">    writeBlock(_fp, &amp;emdh, <span class=\"keyword\">sizeof</span>(emdh));</div>\n\
<div class=\"line\">    fseeko(_fp, 0, SEEK_END);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexIncrWriter::close(Ptex::String&amp; error)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// closing base writer will write all pending data via finish() method</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> result = PtexWriterBase::close(error);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_fp) {</div>\n\
<div class=\"line\">    fclose(_fp);</div>\n\
<div class=\"line\">    _fp = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexIncrWriter::finish()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// write meta data edit block (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_metadata.empty()) writeMetaDataEdit();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// rewrite extheader for updated editdatasize</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_extheader.editdatapos) {</div>\n\
<div class=\"line\">    _extheader.editdatasize = uint64_t(ftello(_fp)) - _extheader.editdatapos;</div>\n\
<div class=\"line\">    fseeko(_fp, HeaderSize, SEEK_SET);</div>\n\
<div class=\"line\">    fwrite(&amp;_extheader, PtexUtils::min(uint32_t(ExtHeaderSize), _header.extheadersize), 1, _fp);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";