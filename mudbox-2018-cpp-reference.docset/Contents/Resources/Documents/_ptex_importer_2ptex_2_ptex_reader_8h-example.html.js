var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/PtexReader.h</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptex_reader_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/PtexReader.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/PtexReader.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef PtexReader_h</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexReader_h</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;zlib/zlib.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;map&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;Ptexture.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexIO.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexCache.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexUtils.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexHashMap.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>PtexInternal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">class </span>safevector : <span class=\"keyword\">public</span> std::vector&lt;T&gt;</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    safevector() : std::vector&lt;T&gt;() {}</div>\n\
<div class=\"line\">    safevector(<span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>, <span class=\"keyword\">const</span> T&amp; val = T()) : std::vector&lt;T&gt;(<a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>, val) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> T&amp; operator[] (<span class=\"keywordtype\">size_t</span> n)<span class=\"keyword\"> const </span>{</div>\n\
<div class=\"line\">    assert(n &lt; <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">std::vector&lt;T&gt;::size</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::vector&lt;T&gt;::operator[](n);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    T&amp; operator[] (<span class=\"keywordtype\">size_t</span> n) {</div>\n\
<div class=\"line\">    assert(n &lt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">std::vector&lt;T&gt;::size</a>());</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> std::vector&lt;T&gt;::operator[](n);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define safevector std::vector</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexReader : <span class=\"keyword\">public</span> PtexCachedFile, <span class=\"keyword\">public</span> PtexTexture, <span class=\"keyword\">public</span> PtexIO {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexReader(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, <span class=\"keywordtype\">bool</span> premultiply,</div>\n\
<div class=\"line\">           PtexInputHandler* handler);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, Ptex::String&amp; error);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setOwnsCache() { _ownsCache = <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release();</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path() { <span class=\"keywordflow\">return</span> _path.c_str(); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::MeshType meshType() { <span class=\"keywordflow\">return</span> MeshType(_header.meshtype); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::DataType dataType() { <span class=\"keywordflow\">return</span> DataType(_header.datatype); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::BorderMode uBorderMode() { <span class=\"keywordflow\">return</span> BorderMode(_extheader.ubordermode); };</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::BorderMode vBorderMode() { <span class=\"keywordflow\">return</span> BorderMode(_extheader.vbordermode); };</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> alphaChannel() { <span class=\"keywordflow\">return</span> _header.alphachan; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> numChannels() { <span class=\"keywordflow\">return</span> _header.nchannels; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> numFaces() { <span class=\"keywordflow\">return</span> _header.nfaces; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> hasEdits() { <span class=\"keywordflow\">return</span> _hasEdits; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> hasMipMaps() { <span class=\"keywordflow\">return</span> _header.nlevels &gt; 1; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexMetaData* getMetaData();</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; getFaceInfo(<span class=\"keywordtype\">int</span> faceid);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getData(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getData(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>, Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getData(<span class=\"keywordtype\">int</span> faceid);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getData(<span class=\"keywordtype\">int</span> faceid, Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels,</div>\n\
<div class=\"line\">              Ptex::Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    DataType datatype()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _header.datatype; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nchannels()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _header.nchannels; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> pixelsize()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _pixelsize; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Header&amp; header()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _header; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> ExtHeader&amp; extheader()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _extheader; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> LevelInfo&amp; levelinfo(<span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#abc60a79088789bd61297bf5f9ff500d1\">level</a>)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _levelinfo[<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#abc60a79088789bd61297bf5f9ff500d1\">level</a>]; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span><a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_phonon.html#a85d1594e87e4c4e5da912ca49a87f8d3\">MetaData</a> : <span class=\"keyword\">public</span> PtexCachedData, <span class=\"keyword\">public</span> PtexMetaData {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_phonon.html#a85d1594e87e4c4e5da912ca49a87f8d3\">MetaData</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/namespace_phonon.html#a85d1594e87e4c4e5da912ca49a87f8d3\">MetaData</a>** parent, PtexCacheImpl* cache, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>, PtexReader* reader)</div>\n\
<div class=\"line\">        : PtexCachedData((<a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3db05964a3cc4410f35b7ea2b7eb850d\">void</a>**)parent, cache, sizeof(*this) + size),</div>\n\
<div class=\"line\">          _reader(reader) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() {</div>\n\
<div class=\"line\">        AutoLockCache lock(_cache-&gt;cachelock);</div>\n\
<div class=\"line\">        <span class=\"comment\">// first, unref all lmdData refs</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a> = _lmdRefs.size(); i &lt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>; i++)</div>\n\
<div class=\"line\">        _lmdRefs[i]-&gt;unref();</div>\n\
<div class=\"line\">        _lmdRefs.resize(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// finally, unref self</span></div>\n\
<div class=\"line\">        unref();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> numKeys() { <span class=\"keywordflow\">return</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(_entries.size()); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getKey(<span class=\"keywordtype\">int</span> n, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*&amp; key, MetaDataType&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = _entries[<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>];</div>\n\
<div class=\"line\">        key = e-&gt;key;</div>\n\
<div class=\"line\">        type = e-&gt;type;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = getEntry(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (e) value = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*) e-&gt;data;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> value = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int8_t*&amp; value, <span class=\"keywordtype\">int</span>&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = getEntry(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (e) { value = (<span class=\"keyword\">const</span> int8_t*) e-&gt;data; count = e-&gt;datasize; }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> { value = 0; count = 0; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int16_t*&amp; value, <span class=\"keywordtype\">int</span>&amp; count)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = getEntry(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (e) {</div>\n\
<div class=\"line\">        value = (<span class=\"keyword\">const</span> int16_t*) e-&gt;data;</div>\n\
<div class=\"line\">        count = <span class=\"keywordtype\">int</span>(e-&gt;datasize/<span class=\"keyword\">sizeof</span>(int16_t));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> { value = 0; count = 0; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int32_t*&amp; value, <span class=\"keywordtype\">int</span>&amp; count)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = getEntry(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (e) {</div>\n\
<div class=\"line\">        value = (<span class=\"keyword\">const</span> int32_t*) e-&gt;data;</div>\n\
<div class=\"line\">        count = <span class=\"keywordtype\">int</span>(e-&gt;datasize/<span class=\"keyword\">sizeof</span>(int32_t));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> { value = 0; count = 0; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*&amp; value, <span class=\"keywordtype\">int</span>&amp; count)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = getEntry(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (e) {</div>\n\
<div class=\"line\">        value = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) e-&gt;data;</div>\n\
<div class=\"line\">        count = <span class=\"keywordtype\">int</span>(e-&gt;datasize/<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> { value = 0; count = 0; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>*&amp; value, <span class=\"keywordtype\">int</span>&amp; count)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = getEntry(key);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (e) {</div>\n\
<div class=\"line\">        value = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>*) e-&gt;data;</div>\n\
<div class=\"line\">        count = <span class=\"keywordtype\">int</span>(e-&gt;datasize/<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>));</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> { value = 0; count = 0; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addEntry(uint8_t keysize, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, uint8_t datatype,</div>\n\
<div class=\"line\">              uint32_t datasize, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = newEntry(keysize, key, datatype, datasize);</div>\n\
<div class=\"line\">        e-&gt;data = malloc(datasize);</div>\n\
<div class=\"line\">        memcpy(e-&gt;data, data, datasize);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> addLmdEntry(uint8_t keysize, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, uint8_t datatype,</div>\n\
<div class=\"line\">             uint32_t datasize, FilePos filepos, uint32_t zipsize)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        Entry* e = newEntry(keysize, key, datatype, datasize);</div>\n\
<div class=\"line\">        e-&gt;isLmd = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">        e-&gt;lmdData = 0;</div>\n\
<div class=\"line\">        e-&gt;lmdPos = filepos;</div>\n\
<div class=\"line\">        e-&gt;lmdZipSize = zipsize;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>LargeMetaData : <span class=\"keyword\">public</span> PtexCachedData</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">     <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        LargeMetaData(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">        : PtexCachedData(parent, cache, size), _data(malloc(size)) {}</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span>* <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>() { <span class=\"keywordflow\">return</span> _data; }</div>\n\
<div class=\"line\">     <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~LargeMetaData() { free(_data); }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span>* _data;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Entry {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key;          <span class=\"comment\">// ptr to map key string</span></div>\n\
<div class=\"line\">        MetaDataType <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>;        <span class=\"comment\">// meta data type</span></div>\n\
<div class=\"line\">        uint32_t datasize;        <span class=\"comment\">// size of data in bytes</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>;           <span class=\"comment\">// if lmd, data only valid when lmd is loaded and ref&#39;ed</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> isLmd;           <span class=\"comment\">// true if data is a large meta data block</span></div>\n\
<div class=\"line\">        LargeMetaData* lmdData;   <span class=\"comment\">// large meta data (lazy-loaded, lru-cached)</span></div>\n\
<div class=\"line\">        FilePos lmdPos;       <span class=\"comment\">// large meta data file position</span></div>\n\
<div class=\"line\">        uint32_t lmdZipSize;      <span class=\"comment\">// large meta data size on disk</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        Entry() :</div>\n\
<div class=\"line\">        key(0), type(MetaDataType(0)), datasize(0), data(0),</div>\n\
<div class=\"line\">        isLmd(0), lmdData(0), lmdPos(0), lmdZipSize(0) {}</div>\n\
<div class=\"line\">        ~Entry() { clear(); }</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> clear() {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (isLmd) {</div>\n\
<div class=\"line\">            isLmd = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (lmdData) { lmdData-&gt;orphan(); lmdData = 0; }</div>\n\
<div class=\"line\">            lmdPos = 0;</div>\n\
<div class=\"line\">            lmdZipSize = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            free(data);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        data = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Entry* newEntry(uint8_t keysize, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, uint8_t datatype, uint32_t datasize)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::pair&lt;MetaMap::iterator,bool&gt; result =</div>\n\
<div class=\"line\">        _map.insert(std::make_pair(<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a>(key, keysize), Entry()));</div>\n\
<div class=\"line\">        Entry* e = &amp;result.first-&gt;second;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> newEntry = result.second;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (newEntry) _entries.push_back(e);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> e-&gt;clear();</div>\n\
<div class=\"line\">        e-&gt;key = result.first-&gt;first.c_str();</div>\n\
<div class=\"line\">        e-&gt;type = MetaDataType(datatype);</div>\n\
<div class=\"line\">        e-&gt;datasize = datasize;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> e;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Entry* getEntry(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexReader* _reader;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> std::map&lt;std::string, Entry&gt; MetaMap;</div>\n\
<div class=\"line\">    MetaMap _map;</div>\n\
<div class=\"line\">    safevector&lt;Entry*&gt; _entries;</div>\n\
<div class=\"line\">    std::vector&lt;LargeMetaData*&gt; _lmdRefs;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ConstDataPtr : <span class=\"keyword\">public</span> PtexFaceData {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    ConstDataPtr(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> pixelsize)</div>\n\
<div class=\"line\">        : _data(data), _pixelsize(pixelsize) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() { <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>() { <span class=\"keywordflow\">return</span> 0; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isConstant() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">void</span>* result)</div>\n\
<div class=\"line\">    { memcpy(result, _data, _pixelsize); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span>* getData() { <span class=\"keywordflow\">return</span> _data; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isTiled() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res tileRes() { <span class=\"keywordflow\">return</span> 0; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getTile(<span class=\"keywordtype\">int</span>) { <span class=\"keywordflow\">return</span> 0; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* _data;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _pixelsize;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>FaceData : <span class=\"keyword\">public</span> PtexCachedData, <span class=\"keyword\">public</span> PtexFaceData {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    FaceData(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">        : PtexCachedData(parent, cache, size), _res(res) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() { AutoLockCache lock(_cache-&gt;cachelock); unref(); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>() { <span class=\"keywordflow\">return</span> _res; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> reduce(FaceData*&amp;, PtexReader*,</div>\n\
<div class=\"line\">                Res newres, PtexUtils::ReduceFn) = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    Res _res;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>PackedFace : <span class=\"keyword\">public</span> FaceData {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PackedFace(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>, <span class=\"keywordtype\">int</span> pixelsize, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">        : FaceData(parent, cache, res, sizeof(*this)+size),</div>\n\
<div class=\"line\">          _pixelsize(pixelsize), _data(malloc(size)) {}</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>() { <span class=\"keywordflow\">return</span> _data; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isConstant() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <span class=\"keywordtype\">void</span>* result)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        memcpy(result, (<span class=\"keywordtype\">char</span>*)_data + (v*_res.u() + u) * _pixelsize, _pixelsize);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span>* getData() { <span class=\"keywordflow\">return</span> _data; };</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isTiled() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res tileRes() { <span class=\"keywordflow\">return</span> _res; };</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getTile(<span class=\"keywordtype\">int</span>) { <span class=\"keywordflow\">return</span> 0; };</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> reduce(FaceData*&amp;, PtexReader*,</div>\n\
<div class=\"line\">                Res newres, PtexUtils::ReduceFn);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PackedFace() { free(_data); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _pixelsize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* _data;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>ConstantFace : <span class=\"keyword\">public</span> PackedFace {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    ConstantFace(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, <span class=\"keywordtype\">int</span> pixelsize)</div>\n\
<div class=\"line\">        : PackedFace(parent, cache, 0, pixelsize, pixelsize) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isConstant() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">int</span>, <span class=\"keywordtype\">void</span>* result) { memcpy(result, _data, _pixelsize); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> reduce(FaceData*&amp;, PtexReader*,</div>\n\
<div class=\"line\">                Res newres, PtexUtils::ReduceFn);</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>TiledFaceBase : <span class=\"keyword\">public</span> FaceData {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    TiledFaceBase(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>,</div>\n\
<div class=\"line\">              Res tileres, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">        : FaceData(parent, cache, res, sizeof(*this)),</div>\n\
<div class=\"line\">          _tileres(tileres),</div>\n\
<div class=\"line\">          _dt(dt),</div>\n\
<div class=\"line\">          _nchan(nchan),</div>\n\
<div class=\"line\">          _pixelsize(DataSize(dt)*nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        _ntilesu = _res.ntilesu(tileres);</div>\n\
<div class=\"line\">        _ntilesv = _res.ntilesv(tileres);</div>\n\
<div class=\"line\">        _ntiles = _ntilesu*_ntilesv;</div>\n\
<div class=\"line\">        _tiles.resize(_ntiles);</div>\n\
<div class=\"line\">        incSize(<span class=\"keyword\">sizeof</span>(FaceData*)*_ntiles);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() {</div>\n\
<div class=\"line\">        <span class=\"comment\">// Tiled faces ref the reader (directly or indirectly) and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// thus may trigger cache deletion on release.  Call cache</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// to check for pending delete.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Note: release() may delete &quot;this&quot;, so save _cache in</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// local var.</span></div>\n\
<div class=\"line\">        PtexCacheImpl* cache = _cache;</div>\n\
<div class=\"line\">        FaceData::release();</div>\n\
<div class=\"line\">        cache-&gt;handlePendingDelete();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isConstant() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> v, <span class=\"keywordtype\">void</span>* result);</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span>* getData() { <span class=\"keywordflow\">return</span> 0; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isTiled() { <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res tileRes() { <span class=\"keywordflow\">return</span> _tileres; };</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> reduce(FaceData*&amp;, PtexReader*,</div>\n\
<div class=\"line\">                Res newres, PtexUtils::ReduceFn);</div>\n\
<div class=\"line\">    Res tileres()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _tileres; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesu()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _ntilesu; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesv()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _ntilesv; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntiles()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _ntiles; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~TiledFaceBase() { orphanList(_tiles); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Res _tileres;</div>\n\
<div class=\"line\">    DataType _dt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _ntilesu;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _ntilesv;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _ntiles;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _pixelsize;</div>\n\
<div class=\"line\">    safevector&lt;FaceData*&gt; _tiles;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>TiledFace : <span class=\"keyword\">public</span> TiledFaceBase {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    TiledFace(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, Res res, Res tileres,</div>\n\
<div class=\"line\">          <span class=\"keywordtype\">int</span> levelid, PtexReader* reader)</div>\n\
<div class=\"line\">        : TiledFaceBase(parent, cache, res, tileres,</div>\n\
<div class=\"line\">                reader-&gt;datatype(), reader-&gt;nchannels()),</div>\n\
<div class=\"line\">          _reader(reader),</div>\n\
<div class=\"line\">          _levelid(levelid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        _fdh.resize(_ntiles),</div>\n\
<div class=\"line\">        _offsets.resize(_ntiles);</div>\n\
<div class=\"line\">        incSize((<span class=\"keyword\">sizeof</span>(FaceDataHeader)+<span class=\"keyword\">sizeof</span>(FilePos))*_ntiles);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getTile(<span class=\"keywordtype\">int</span> tile)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AutoLockCache locker(_cache-&gt;cachelock);</div>\n\
<div class=\"line\">        FaceData*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = _tiles[tile];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!f) readTile(tile, f);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> f-&gt;ref();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readTile(<span class=\"keywordtype\">int</span> tile, FaceData*&amp; data);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>PtexReader;</div>\n\
<div class=\"line\">    PtexReader* _reader;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _levelid;</div>\n\
<div class=\"line\">    safevector&lt;FaceDataHeader&gt; _fdh;</div>\n\
<div class=\"line\">    safevector&lt;FilePos&gt; _offsets;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>TiledReducedFace : <span class=\"keyword\">public</span> TiledFaceBase {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    TiledReducedFace(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, Res res,</div>\n\
<div class=\"line\">             Res tileres, DataType dt, <span class=\"keywordtype\">int</span> nchan,</div>\n\
<div class=\"line\">             TiledFaceBase* parentface, PtexUtils::ReduceFn reducefn)</div>\n\
<div class=\"line\">        : TiledFaceBase(parent, cache, res, tileres, dt, nchan),</div>\n\
<div class=\"line\">          _parentface(parentface),</div>\n\
<div class=\"line\">          _reducefn(reducefn)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        AutoLockCache locker(_cache-&gt;cachelock);</div>\n\
<div class=\"line\">        _parentface-&gt;ref();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ~TiledReducedFace()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        _parentface-&gt;unref();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getTile(<span class=\"keywordtype\">int</span> tile);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    TiledFaceBase* _parentface;</div>\n\
<div class=\"line\">    PtexUtils::ReduceFn* _reducefn;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Level : <span class=\"keyword\">public</span> PtexCachedData {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    safevector&lt;FaceDataHeader&gt; fdh;</div>\n\
<div class=\"line\">    safevector&lt;FilePos&gt; offsets;</div>\n\
<div class=\"line\">    safevector&lt;FaceData*&gt; faces;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Level(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, <span class=\"keywordtype\">int</span> nfaces)</div>\n\
<div class=\"line\">        : PtexCachedData(parent, cache,</div>\n\
<div class=\"line\">                 sizeof(*this) + nfaces * (sizeof(FaceDataHeader) +</div>\n\
<div class=\"line\">                               sizeof(FilePos) +</div>\n\
<div class=\"line\">                               sizeof(FaceData*))),</div>\n\
<div class=\"line\">          fdh(nfaces),</div>\n\
<div class=\"line\">          offsets(nfaces),</div>\n\
<div class=\"line\">          faces(nfaces) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~Level() { orphanList(faces); }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Mutex readlock;</div>\n\
<div class=\"line\">    Mutex reducelock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexReader();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setError(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* error)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    _error = error; _error += <span class=\"stringliteral\">&quot; PtexFile: &quot;</span>; _error += _path;</div>\n\
<div class=\"line\">    _ok = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FilePos tell() { <span class=\"keywordflow\">return</span> _pos; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> seek(FilePos pos)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pos != _pos) {</div>\n\
<div class=\"line\">        _io-&gt;seek(_fp, pos);</div>\n\
<div class=\"line\">        _pos = pos;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef GATHER_STATS</span></div>\n\
<div class=\"line\">        stats.nseeks++;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> readBlock(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>, <span class=\"keywordtype\">bool</span> reportError=<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> readZipBlock(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> zipsize, <span class=\"keywordtype\">int</span> unzipsize);</div>\n\
<div class=\"line\">    Level* getLevel(<span class=\"keywordtype\">int</span> levelid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    Level*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#abc60a79088789bd61297bf5f9ff500d1\">level</a> = _levels[levelid];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!level) readLevel(levelid, level);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> level-&gt;ref();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#abc60a79088789bd61297bf5f9ff500d1\">level</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    uint8_t* getConstData() { <span class=\"keywordflow\">if</span> (!_constdata) readConstData(); <span class=\"keywordflow\">return</span> _constdata; }</div>\n\
<div class=\"line\">    FaceData* getFace(<span class=\"keywordtype\">int</span> levelid, Level* level, <span class=\"keywordtype\">int</span> faceid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    FaceData*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a676ca580c460c0154eb58200433d2a9e\">face</a> = level-&gt;faces[faceid];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!face) readFace(levelid, level, faceid);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> face-&gt;ref();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a676ca580c460c0154eb58200433d2a9e\">face</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Res getRes(<span class=\"keywordtype\">int</span> levelid, <span class=\"keywordtype\">int</span> faceid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (levelid == 0) <span class=\"keywordflow\">return</span> _faceinfo[faceid].res;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// for reduction level, look up res via rfaceid</span></div>\n\
<div class=\"line\">        Res res = _res_r[faceid];</div>\n\
<div class=\"line\">        <span class=\"comment\">// and adjust for number of reductions</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> Res(res.ulog2 - levelid, res.vlog2 - levelid);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> unpackedSize(FaceDataHeader fdh, <span class=\"keywordtype\">int</span> levelid, <span class=\"keywordtype\">int</span> faceid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fdh.encoding() == enc_constant)</div>\n\
<div class=\"line\">        <span class=\"comment\">// level 0 constant faces are not stored</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> levelid == 0 ? 0 : _pixelsize;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> getRes(levelid, faceid).size() * _pixelsize;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readFaceInfo();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readLevelInfo();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readConstData();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readLevel(<span class=\"keywordtype\">int</span> levelid, Level*&amp; level);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readFace(<span class=\"keywordtype\">int</span> levelid, Level* level, <span class=\"keywordtype\">int</span> faceid);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readFaceData(FilePos pos, FaceDataHeader fdh, Res res, <span class=\"keywordtype\">int</span> levelid, FaceData*&amp; face);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readMetaData();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readMetaDataBlock(<a class=\"code\" href=\"#!/url=./cpp_ref/namespace_phonon.html#a85d1594e87e4c4e5da912ca49a87f8d3\">MetaData</a>* metadata, FilePos pos, <span class=\"keywordtype\">int</span> zipsize, <span class=\"keywordtype\">int</span> memsize);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readLargeMetaDataHeaders(<a class=\"code\" href=\"#!/url=./cpp_ref/namespace_phonon.html#a85d1594e87e4c4e5da912ca49a87f8d3\">MetaData</a>* metadata, FilePos pos, <span class=\"keywordtype\">int</span> zipsize, <span class=\"keywordtype\">int</span> memsize);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readEditData();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readEditFaceData();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> readEditMetaData();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> computeOffsets(FilePos pos, <span class=\"keywordtype\">int</span> noffsets, <span class=\"keyword\">const</span> FaceDataHeader* fdh, FilePos* offsets)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    FilePos* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = offsets + noffsets;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (offsets != end) { *offsets++ = pos; pos += fdh-&gt;blocksize(); fdh++; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> blendFaces(FaceData*&amp; face, <span class=\"keywordtype\">int</span> faceid, Res res, <span class=\"keywordtype\">bool</span> blendu);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexInputHandler* _io;        <span class=\"comment\">// IO handler</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> _premultiply;            <span class=\"comment\">// true if reader should premultiply the alpha chan</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> _ownsCache;              <span class=\"comment\">// true if reader owns the cache</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> _ok;                 <span class=\"comment\">// flag set if read error occurred)</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> _error;           <span class=\"comment\">// error string (if !_ok)</span></div>\n\
<div class=\"line\">    PtexInputHandler::Handle _fp;     <span class=\"comment\">// file pointer</span></div>\n\
<div class=\"line\">    FilePos _pos;             <span class=\"comment\">// current seek position</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> _path;            <span class=\"comment\">// current file path</span></div>\n\
<div class=\"line\">    Header _header;           <span class=\"comment\">// the header</span></div>\n\
<div class=\"line\">    ExtHeader _extheader;         <span class=\"comment\">// extended header</span></div>\n\
<div class=\"line\">    FilePos _faceinfopos;         <span class=\"comment\">// file positions of data sections</span></div>\n\
<div class=\"line\">    FilePos _constdatapos;            <span class=\"comment\">// ...</span></div>\n\
<div class=\"line\">    FilePos _levelinfopos;</div>\n\
<div class=\"line\">    FilePos _leveldatapos;</div>\n\
<div class=\"line\">    FilePos _metadatapos;</div>\n\
<div class=\"line\">    FilePos _lmdheaderpos;</div>\n\
<div class=\"line\">    FilePos _lmddatapos;</div>\n\
<div class=\"line\">    FilePos _editdatapos;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _pixelsize;           <span class=\"comment\">// size of a pixel in bytes</span></div>\n\
<div class=\"line\">    uint8_t* _constdata;          <span class=\"comment\">// constant pixel value per face</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespace_phonon.html#a85d1594e87e4c4e5da912ca49a87f8d3\">MetaData</a>* _metadata;          <span class=\"comment\">// meta data (read on demand)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> _hasEdits;           <span class=\"comment\">// has edit blocks</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    safevector&lt;FaceInfo&gt; _faceinfo;   <span class=\"comment\">// per-face header info</span></div>\n\
<div class=\"line\">    safevector&lt;uint32_t&gt; _rfaceids;   <span class=\"comment\">// faceids sorted in reduction order</span></div>\n\
<div class=\"line\">    safevector&lt;Res&gt; _res_r;       <span class=\"comment\">// face res indexed by rfaceid</span></div>\n\
<div class=\"line\">    safevector&lt;LevelInfo&gt; _levelinfo; <span class=\"comment\">// per-level header info</span></div>\n\
<div class=\"line\">    safevector&lt;FilePos&gt; _levelpos;    <span class=\"comment\">// file position of each level&#39;s data</span></div>\n\
<div class=\"line\">    safevector&lt;Level*&gt; _levels;       <span class=\"comment\">// level data (read on demand)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>MetaEdit</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    FilePos pos;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> zipsize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> memsize;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    safevector&lt;MetaEdit&gt; _metaedits;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>FaceEdit</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    FilePos pos;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceid;</div>\n\
<div class=\"line\">    FaceDataHeader fdh;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    safevector&lt;FaceEdit&gt; _faceedits;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>ReductionKey {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> faceid;</div>\n\
<div class=\"line\">    Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>;</div>\n\
<div class=\"line\">    ReductionKey() : faceid(0), res(0,0) {}</div>\n\
<div class=\"line\">    ReductionKey(uint32_t faceid, Res res) : faceid(faceid), res(res) {}</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a637f7084f9654006932237127d7be263\">operator==</a>(<span class=\"keyword\">const</span> ReductionKey&amp; k)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> k.faceid == faceid &amp;&amp; k.res == <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Hasher {</div>\n\
<div class=\"line\">        uint32_t operator() (<span class=\"keyword\">const</span> ReductionKey&amp; key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">        </span>{</div>\n\
<div class=\"line\">        <span class=\"comment\">// constants from Knuth</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> uint32_t M = 1664525, C = 1013904223;</div>\n\
<div class=\"line\">        uint32_t val = (key.res.ulog2 * M + key.res.vlog2 + C) * M + key.faceid;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> val;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> PtexHashMap&lt;ReductionKey, FaceData*, ReductionKey::Hasher&gt; ReductionMap;</div>\n\
<div class=\"line\">    ReductionMap _reductions;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    z_stream_s _zstream;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";