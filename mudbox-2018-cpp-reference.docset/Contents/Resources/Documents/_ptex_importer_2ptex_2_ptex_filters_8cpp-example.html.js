var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/PtexFilters.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptex_filters_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/PtexFilters.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/PtexFilters.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;Ptexture.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexMitchellFilter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexSeparableFilter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexSeparableKernel.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexTriangleFilter.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexPointFilter : <span class=\"keyword\">public</span> PtexFilter, <span class=\"keyword\">public</span> Ptex</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexPointFilter(PtexTexture* tx) : _tx(tx) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() { <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> eval(<span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span> <span class=\"comment\">/*uw1*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*vw1*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*uw2*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*vw2*/</span>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span> <span class=\"comment\">/*width*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*blur*/</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_tx || nchannels &lt;= 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (faceid &lt; 0 || faceid &gt;= _tx-&gt;numFaces()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = _tx-&gt;getFaceInfo(faceid);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resu = f.res.u(), resv = f.res.v();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ui = <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(<span class=\"keywordtype\">int</span>(u*resu), 0, resu-1);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vi = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(<span class=\"keywordtype\">int</span>(v*resv), 0, resv-1);</div>\n\
<div class=\"line\">    _tx-&gt;getPixel(faceid, ui, vi, result, firstchan, nchannels);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    PtexTexture* _tx;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexPointFilterTri : <span class=\"keyword\">public</span> PtexFilter, <span class=\"keyword\">public</span> Ptex</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexPointFilterTri(PtexTexture* tx) : _tx(tx) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() { <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> eval(<span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span> <span class=\"comment\">/*uw1*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*vw1*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*uw2*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*vw2*/</span>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span> <span class=\"comment\">/*width*/</span>, <span class=\"keywordtype\">float</span> <span class=\"comment\">/*blur*/</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_tx || nchannels &lt;= 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (faceid &lt; 0 || faceid &gt;= _tx-&gt;numFaces()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = _tx-&gt;getFaceInfo(faceid);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a> = f.res.u();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resm1 = res - 1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> ut = u * <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>, vt = v * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ui = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(<span class=\"keywordtype\">int</span>(ut), 0, resm1);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vi = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(<span class=\"keywordtype\">int</span>(vt), 0, resm1);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> uf = ut - ui, vf = vt - vi;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uf + vf &lt;= 1.0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// &quot;even&quot; triangles are stored in lower-left half-texture</span></div>\n\
<div class=\"line\">        _tx-&gt;getPixel(faceid, ui, vi, result, firstchan, nchannels);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// &quot;odd&quot; triangles are stored in upper-right half-texture</span></div>\n\
<div class=\"line\">        _tx-&gt;getPixel(faceid, resm1-vi, resm1-ui, result, firstchan, nchannels);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    PtexTexture* _tx;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexWidth4Filter : <span class=\"keyword\">public</span> PtexSeparableFilter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">double</span> KernelFn(<span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexWidth4Filter(PtexTexture* tx, <span class=\"keyword\">const</span> PtexFilter::Options&amp; opts, KernelFn k, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* c = 0) </div>\n\
<div class=\"line\">    : PtexSeparableFilter(tx, opts), _k(k), _c(c) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> buildKernel(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <span class=\"keywordtype\">float</span> uw, <span class=\"keywordtype\">float</span> vw,</div>\n\
<div class=\"line\">                 Res faceRes)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    buildKernelAxis(k.res.ulog2, k.u, k.uw, k.ku, u, uw, faceRes.ulog2);</div>\n\
<div class=\"line\">    buildKernelAxis(k.res.vlog2, k.v, k.vw, k.kv, v, vw, faceRes.vlog2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> blur(<span class=\"keywordtype\">double</span> x)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// 2-unit (x in -1..1) cubic hermite kernel</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// this produces a blur roughly 1.5 times that of the 4-unit b-spline kernel</span></div>\n\
<div class=\"line\">    x = fabs(x);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> x &lt; 1 ? (2*x-3)*x*x+1 : 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> buildKernelAxis(int8_t&amp; k_ureslog2, <span class=\"keywordtype\">int</span>&amp; k_u, <span class=\"keywordtype\">int</span>&amp; k_uw, <span class=\"keywordtype\">double</span>* ku,</div>\n\
<div class=\"line\">             <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> uw, <span class=\"keywordtype\">int</span> f_ureslog2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// build 1 axis (note: &quot;u&quot; labels may repesent either u or v axis)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp filter width to no smaller than a texel</span></div>\n\
<div class=\"line\">    uw = <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(uw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>/(1&lt;&lt;f_ureslog2));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute desired texture res based on filter width</span></div>\n\
<div class=\"line\">    k_ureslog2 = <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(log2(1.0/uw)));</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resu = 1 &lt;&lt; k_ureslog2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> uwlo = 1.0/resu;         <span class=\"comment\">// smallest filter width for this res</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute lerp weights (amount to blend towards next-lower res)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> lerp2 = _options.lerp ? (uw-uwlo)/uwlo : 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> lerp1 = 1-lerp2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// adjust for large filter widths</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uw &gt;= .25) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (uw &lt; .5) {</div>\n\
<div class=\"line\">        k_ureslog2 = 2;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> upix = u * 4 - 0.5;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a> = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(upix - 2)), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(upix + 2));</div>\n\
<div class=\"line\">        u1 = u1 &amp; ~1;       <span class=\"comment\">// round down to even pair</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> = (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> + 1) &amp; ~1; <span class=\"comment\">// round up to even pair</span></div>\n\
<div class=\"line\">        k_u = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a>;</div>\n\
<div class=\"line\">        k_uw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a>-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x1 = u1-upix;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; k_uw; i+=2) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> xa = x1 + i, xb = xa + 1, xc = (xa+xb)*0.25;</div>\n\
<div class=\"line\">            <span class=\"comment\">// spread the filter gradually to approach the next-lower-res width</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// at uw = .5, s = 1.0; at uw = 1, s = 0.8</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a> = 1.0/(uw + .75);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> ka = _k(xa, _c), kb = _k(xb, _c), kc = blur(xc*s);</div>\n\
<div class=\"line\">            ku[i] = ka * lerp1 + kc * lerp2;</div>\n\
<div class=\"line\">            ku[i+1] = kb * lerp1 + kc * lerp2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (uw &lt; 1) {</div>\n\
<div class=\"line\">        k_ureslog2 = 1;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> upix = u * 2 - 0.5;</div>\n\
<div class=\"line\">        k_u = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(floor(u - .5))*2;</div>\n\
<div class=\"line\">        k_uw = 4;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x1 = k_u-upix;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; k_uw; i+=2) {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> xa = x1 + i, xb = xa + 1, xc = (xa+xb)*0.5;</div>\n\
<div class=\"line\">            <span class=\"comment\">// spread the filter gradually to approach the next-lower-res width</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// at uw = .5, s = .8; at uw = 1, s = 0.5</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a> = 1.0/(uw*1.5 + .5);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">double</span> ka = blur(xa*s), kb = blur(xb*s), kc = blur(xc*s);</div>\n\
<div class=\"line\">            ku[i] = ka * lerp1 + kc * lerp2;</div>\n\
<div class=\"line\">            ku[i+1] = kb * lerp1 + kc * lerp2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// use res 0 (1 texel per face) w/ no lerping</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// (future: use face-blended values for filter &gt; 2)</span></div>\n\
<div class=\"line\">        k_ureslog2 = 0;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> upix = u - .5;</div>\n\
<div class=\"line\">        k_uw = 2;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> ui = floor(upix);</div>\n\
<div class=\"line\">        k_u = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ui);</div>\n\
<div class=\"line\">        ku[0] = blur(upix-ui);</div>\n\
<div class=\"line\">        ku[1] = 1-ku[0];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// convert from normalized coords to pixel coords</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> upix = u * resu - 0.5;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> uwpix = uw * resu;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// find integer pixel extent: [u,v] +/- [2*uw,2*vw]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (kernel width is 4 times filter width)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> dupix = 2*uwpix;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a> = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(upix - dupix)), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(upix + dupix));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (lerp2) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// lerp kernel weights towards next-lower res</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// extend kernel width to cover even pairs</span></div>\n\
<div class=\"line\">        u1 = u1 &amp; ~1;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> = (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> + 1) &amp; ~1;</div>\n\
<div class=\"line\">        k_u = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a>;</div>\n\
<div class=\"line\">        k_uw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a>-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// compute kernel weights</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> step = 1.0/uwpix, x1 = (u1-upix)*step;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; k_uw; i+=2) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> xa = x1 + i*step, xb = xa + step, xc = (xa+xb)*0.5;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> ka = _k(xa, _c), kb = _k(xb, _c), kc = _k(xc, _c);</div>\n\
<div class=\"line\">        ku[i] = ka * lerp1 + kc * lerp2;</div>\n\
<div class=\"line\">        ku[i+1] = kb * lerp1 + kc * lerp2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        k_u = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a>;</div>\n\
<div class=\"line\">        k_uw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a>-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// compute kernel weights</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> x1 = (u1-upix)/uwpix, step = 1.0/uwpix;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; k_uw; i++) ku[i] = _k(x1 + i*step, _c);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    KernelFn* _k;       <span class=\"comment\">// kernel function</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* _c;       <span class=\"comment\">// kernel coefficients (if any)</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexBicubicFilter : <span class=\"keyword\">public</span> PtexWidth4Filter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexBicubicFilter(PtexTexture* tx, <span class=\"keyword\">const</span> PtexFilter::Options&amp; opts, <span class=\"keywordtype\">float</span> sharpness)</div>\n\
<div class=\"line\">    : PtexWidth4Filter(tx, opts, kernelFn, _coeffs)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// compute Cubic filter coefficients:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// abs(x) &lt; 1:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   1/6 * ((12 - 9*B - 6*C)*x^3 + (-18 + 12*B + 6*C)*x^2 + (6 - 2*B))</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   == c[0]*x^3 + c[1]*x^2 + c[2]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// abs(x) &lt; 2:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   1/6 * ((-B - 6*C)*x^3 + (6*B + 30*C)*x^2 + (-12*B - 48*C)*x + (8*B + 24*C))</span></div>\n\
<div class=\"line\">    <span class=\"comment\">//   == c[3]*x^3 + c[4]*x^2 + c[5]*x + c[6]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// else: 0</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> B = 1 - sharpness; <span class=\"comment\">// choose C = (1-B)/2</span></div>\n\
<div class=\"line\">    _coeffs[0] = 1.5 - B;</div>\n\
<div class=\"line\">    _coeffs[1] = 1.5 * B - 2.5;</div>\n\
<div class=\"line\">    _coeffs[2] = 1 - (1./3) * B;</div>\n\
<div class=\"line\">    _coeffs[3] = (1./3) * B - 0.5;</div>\n\
<div class=\"line\">    _coeffs[4] = 2.5 - 1.5 * B;</div>\n\
<div class=\"line\">    _coeffs[5] = 2 * B - 4;</div>\n\
<div class=\"line\">    _coeffs[6] = 2 - (2./3) * B;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">double</span> kernelFn(<span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    x = fabs(x);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (x &lt; 1)      <span class=\"keywordflow\">return</span> (c[0]*x + c[1])*x*x + c[2];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (x &lt; 2) <span class=\"keywordflow\">return</span> ((c[3]*x + c[4])*x + c[5])*x + c[6];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> _coeffs[7]; <span class=\"comment\">// filter coefficients for current sharpness</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexGaussianFilter : <span class=\"keyword\">public</span> PtexWidth4Filter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexGaussianFilter(PtexTexture* tx, <span class=\"keyword\">const</span> PtexFilter::Options&amp; opts)</div>\n\
<div class=\"line\">    : PtexWidth4Filter(tx, opts, kernelFn) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">double</span> kernelFn(<span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>*)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> exp(-2*x*x);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexBoxFilter : <span class=\"keyword\">public</span> PtexSeparableFilter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexBoxFilter(PtexTexture* tx, <span class=\"keyword\">const</span> PtexFilter::Options&amp; opts)</div>\n\
<div class=\"line\">    : PtexSeparableFilter(tx, opts) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> buildKernel(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <span class=\"keywordtype\">float</span> uw, <span class=\"keywordtype\">float</span> vw,</div>\n\
<div class=\"line\">                 Res faceRes)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp filter width to no larger than 1.0</span></div>\n\
<div class=\"line\">    uw = PtexUtils::min(uw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>);</div>\n\
<div class=\"line\">    vw = PtexUtils::min(vw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp filter width to no smaller than a texel</span></div>\n\
<div class=\"line\">    uw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(uw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>/(faceRes.u()));</div>\n\
<div class=\"line\">    vw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(vw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>/(faceRes.v()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute desired texture res based on filter width</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ureslog2 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(log2(1.0/uw))),</div>\n\
<div class=\"line\">        vreslog2 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ceil(log2(1.0/vw)));</div>\n\
<div class=\"line\">    Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>(ureslog2, vreslog2);</div>\n\
<div class=\"line\">    k.res = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// convert from normalized coords to pixel coords</span></div>\n\
<div class=\"line\">    u = u * k.res.u();</div>\n\
<div class=\"line\">    v = v * k.res.v();</div>\n\
<div class=\"line\">    uw *= k.res.u();</div>\n\
<div class=\"line\">    vw *= k.res.v();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// find integer pixel extent: [u,v] +/- [uw/2,vw/2]</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (box is 1 unit wide for a 1 unit filter period)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab296853c9d55bfdc62cda6c50d1b4781\">u1</a> = u - 0.5*uw, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1c6bf6fa786a04b729b30e56d68474ef\">u2</a> = u + 0.5*uw;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a0779c3b73f9aa3a0ac5b0139b5d291d9\">v1</a> = v - 0.5*vw, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9a09a1837922b2b806f4589096a52049\">v2</a> = v + 0.5*vw;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> u1floor = floor(u1), u2ceil = ceil(u2);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> v1floor = floor(v1), v2ceil = ceil(v2);</div>\n\
<div class=\"line\">    k.u = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(u1floor);</div>\n\
<div class=\"line\">    k.v = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(v1floor);</div>\n\
<div class=\"line\">    k.uw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(u2ceil)-k.u;</div>\n\
<div class=\"line\">    k.vw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(v2ceil)-k.v;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute kernel weights along u and v directions</span></div>\n\
<div class=\"line\">    computeWeights(k.ku, k.uw, 1-(u1-u1floor), 1-(u2ceil-u2));</div>\n\
<div class=\"line\">    computeWeights(k.kv, k.vw, 1-(v1-v1floor), 1-(v2ceil-v2));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> computeWeights(<span class=\"keywordtype\">double</span>* kernel, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>, <span class=\"keywordtype\">double</span> f1, <span class=\"keywordtype\">double</span> f2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    assert(size &gt;= 1 &amp;&amp; size &lt;= 3);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (size == 1) {</div>\n\
<div class=\"line\">        kernel[0] = f1 + f2 - 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        kernel[0] = f1;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 1; i &lt; size-1; i++) kernel[i] = 1.0;</div>\n\
<div class=\"line\">        kernel[size-1] = f2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexBilinearFilter : <span class=\"keyword\">public</span> PtexSeparableFilter</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexBilinearFilter(PtexTexture* tx, <span class=\"keyword\">const</span> PtexFilter::Options&amp; opts)</div>\n\
<div class=\"line\">    : PtexSeparableFilter(tx, opts) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> buildKernel(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <span class=\"keywordtype\">float</span> uw, <span class=\"keywordtype\">float</span> vw,</div>\n\
<div class=\"line\">                 Res faceRes)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp filter width to no larger than 1.0</span></div>\n\
<div class=\"line\">    uw = PtexUtils::min(uw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>);</div>\n\
<div class=\"line\">    vw = PtexUtils::min(vw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp filter width to no smaller than a texel</span></div>\n\
<div class=\"line\">    uw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(uw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>/(faceRes.u()));</div>\n\
<div class=\"line\">    vw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(vw, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>/(faceRes.v()));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// choose resolution closest to filter res</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// there are three choices of &quot;closest&quot; that come to mind:</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 1) closest in terms of filter width, i.e. period of signal</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 2) closest in terms of texel resolution, (1 / filter width), i.e. freq of signal</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// 3) closest in terms of resolution level (log2(1/filter width))</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Choice (1) probably makes the most sense.  In log2 terms, that means you should</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// use the next higher level when the fractional part of the log2 res is &gt; log2(1/.75),</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and you should add 1-log2(1/.75) to round up.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> roundWidth = 0.5849625007211563; <span class=\"comment\">// 1-log2(1/.75)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ureslog2 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(log2(1.0/uw) + roundWidth);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> vreslog2 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(log2(1.0/vw) + roundWidth);</div>\n\
<div class=\"line\">    Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>(ureslog2, vreslog2);</div>\n\
<div class=\"line\">    k.res = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// convert from normalized coords to pixel coords</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> upix = u * k.res.u() - 0.5;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> vpix = v * k.res.v() - 0.5;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> ufloor = floor(upix);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> vfloor = floor(vpix);</div>\n\
<div class=\"line\">    k.u = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(ufloor);</div>\n\
<div class=\"line\">    k.v = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(vfloor);</div>\n\
<div class=\"line\">    k.uw = 2;</div>\n\
<div class=\"line\">    k.vw = 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute kernel weights</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> ufrac = upix-ufloor, vfrac = vpix-vfloor;</div>\n\
<div class=\"line\">    k.ku[0] = 1 - ufrac;</div>\n\
<div class=\"line\">    k.ku[1] = ufrac;</div>\n\
<div class=\"line\">    k.kv[0] = 1 - vfrac;</div>\n\
<div class=\"line\">    k.kv[1] = vfrac;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">} <span class=\"comment\">// end local namespace</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexFilter* PtexFilter::getFilter(PtexTexture* tex, <span class=\"keyword\">const</span> PtexFilter::Options&amp; opts)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (tex-&gt;meshType()) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> Ptex::mt_quad:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (opts.filter) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// This is the original (deprecated) Mitchell filter.</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// It lacks significant features (lerping, large blur, subfaces) and</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// is kept for now just for regression testing.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> -1:        <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexMitchellFilter(tex, opts.sharpness);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_point:       <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexPointFilter(tex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_bilinear:    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexBilinearFilter(tex, opts);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_box:         <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexBoxFilter(tex, opts);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_gaussian:    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexGaussianFilter(tex, opts);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_bicubic:     <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexBicubicFilter(tex, opts, opts.sharpness);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_bspline:     <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexBicubicFilter(tex, opts, 0.0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_catmullrom:  <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexBicubicFilter(tex, opts, 1.0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_mitchell:    <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexBicubicFilter(tex, opts, 2.0/3.0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> Ptex::mt_triangle:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (opts.filter) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> f_point:       <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexPointFilterTri(tex);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:            <span class=\"keywordflow\">return</span> <span class=\"keyword\">new</span> PtexTriangleFilter(tex, opts);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";