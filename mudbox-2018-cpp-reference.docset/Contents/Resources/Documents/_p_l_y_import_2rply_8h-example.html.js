var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PLYImport/rply.h</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_p_l_y_import_2rply_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PLYImport/rply.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PLYImport/rply.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2008 Autodesk, Inc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CREATED: October 2008</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef PLY_H</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PLY_H</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * RPly library, read/write PLY files</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Diego Nehab, Princeton University</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * http://www.cs.princeton.edu/~diego/professional/rply</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * This library is distributed under the MIT License. See notice</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * at the end of this file.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __cplusplus</span></div>\n\
<div class=\"line\"><span class=\"keyword\">extern</span> <span class=\"stringliteral\">&quot;C&quot;</span> {</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RPLY_VERSION   &quot;RPly 1.01&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RPLY_COPYRIGHT &quot;Copyright (C) 2003-2005 Diego Nehab&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define RPLY_AUTHORS   &quot;Diego Nehab&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Types</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* structures are opaque */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_ *p_ply;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_element_ *p_ply_element;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_property_ *p_ply_property;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_argument_ *p_ply_argument;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ply format mode type */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> e_ply_storage_mode_ {</div>\n\
<div class=\"line\">    PLY_BIG_ENDIAN,</div>\n\
<div class=\"line\">    PLY_LITTLE_ENDIAN,</div>\n\
<div class=\"line\">    PLY_ASCII,   </div>\n\
<div class=\"line\">    PLY_DEFAULT      <span class=\"comment\">/* has to be the last in enum */</span></div>\n\
<div class=\"line\">} e_ply_storage_mode; <span class=\"comment\">/* order matches ply_storage_mode_list */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ply data type */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> e_ply_type {</div>\n\
<div class=\"line\">    PLY_INT8, PLY_UINT8, PLY_INT16, PLY_UINT16, </div>\n\
<div class=\"line\">    PLY_INT32, PLY_UIN32, PLY_FLOAT32, PLY_FLOAT64,</div>\n\
<div class=\"line\">    PLY_CHAR, PLY_UCHAR, PLY_SHORT, PLY_USHORT,</div>\n\
<div class=\"line\">    PLY_INT, PLY_UINT, PLY_FLOAT, PLY_DOUBLE,</div>\n\
<div class=\"line\">    PLY_LIST    <span class=\"comment\">/* has to be the last in enum */</span></div>\n\
<div class=\"line\">} e_ply_type;   <span class=\"comment\">/* order matches ply_type_list */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Property reading callback prototype</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * message: error message</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3db05964a3cc4410f35b7ea2b7eb850d\">void</a> (*p_ply_error_cb)(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *message);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Opens a ply file for reading (fails if file is not a ply file)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * error_cb: error callback function</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: file name</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successful, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply ply_open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>, p_ply_error_cb error_cb);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Reads and parses the header of a ply file returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_read_header(p_ply ply);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Property reading callback prototype</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * argument: parameters for property being processed when callback is called</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if should continue processing file, 0 if should abort.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a> (*p_ply_read_cb)(p_ply_argument argument);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Sets up callbacks for property reading after header was parsed</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * element_name: element where property is</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * property_name: property to associate element with</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * read_cb: function to be called for each property value</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * pdata/idata: user data that will be passed to callback</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 0 if no element or no property in element, returns the</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * number of element instances otherwise. </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">long</span> ply_set_read_cb(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *element_name, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *property_name, p_ply_read_cb read_cb, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> *pdata, <span class=\"keywordtype\">long</span> idata);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns information about the element originating a callback</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * argument: handle to argument </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * element: receives a the element handle (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * instance_index: receives the index of the current element instance </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *     (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_argument_element(p_ply_argument argument, </div>\n\
<div class=\"line\">        p_ply_element *element, <span class=\"keywordtype\">long</span> *instance_index);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns information about the property originating a callback</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * argument: handle to argument </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * property: receives the property handle (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * length: receives the number of values in this property (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * value_index: receives the index of current property value (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_argument_property(p_ply_argument argument, </div>\n\
<div class=\"line\">        p_ply_property *property, <span class=\"keywordtype\">long</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3c8469415bbc83dd1341af15c67f1cef\">length</a>, <span class=\"keywordtype\">long</span> *value_index);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns user data associated with callback </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * pdata: receives a copy of user custom data pointer (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * idata: receives a copy of user custom data integer (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_argument_user_data(p_ply_argument argument, <span class=\"keywordtype\">void</span> **pdata, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">long</span> *idata);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns the value associated with a callback</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * argument: handle to argument </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns the current data item</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> ply_get_argument_value(p_ply_argument argument); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Reads all elements and properties calling the callbacks defined with</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * calls to ply_set_read_cb</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_read(p_ply ply);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Iterates over all elements by returning the next element.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Call with NULL to return handle to first element.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * last: handle of last element returned (NULL for first element)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns element if successfull or NULL if no more elements</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply_element ply_get_next_element(p_ply ply, p_ply_element last);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Iterates over all comments by returning the next comment.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Call with NULL to return pointer to first comment.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * last: pointer to last comment returned (NULL for first comment)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns comment if successfull or NULL if no more comments</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *ply_get_next_comment(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *last);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Iterates over all obj_infos by returning the next obj_info.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Call with NULL to return pointer to first obj_info.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_open</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * last: pointer to last obj_info returned (NULL for first obj_info)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns obj_info if successfull or NULL if no more obj_infos</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *ply_get_next_obj_info(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *last);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns information about an element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * element: element of interest</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: receives a pointer to internal copy of element name (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ninstances: receives the number of instances of this element (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull or 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_element_info(p_ply_element element, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>** name,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">long</span> *ninstances);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Iterates over all properties by returning the next property.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Call with NULL to return handle to first property.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * element: handle of element with the properties of interest</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * last: handle of last property returned (NULL for first property)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns element if successfull or NULL if no more properties</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply_property ply_get_next_property(p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property last);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns information about a property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * property: handle to property of interest</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: receives a pointer to internal copy of property name (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * type: receives the property type (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * length_type: for list properties, receives the scalar type of</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *     the length field (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * value_type: for list properties, receives the scalar type of the value </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *     fields  (if non-null)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull or 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_property_info(p_ply_property property, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>** name,</div>\n\
<div class=\"line\">        e_ply_type *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>, e_ply_type *length_type, e_ply_type *value_type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Creates new ply file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: file name</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * storage_mode: file format mode</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns handle to ply file if successfull, NULL otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply ply_create(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, e_ply_storage_mode storage_mode, </div>\n\
<div class=\"line\">        p_ply_error_cb error_cb);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Adds a new element to the ply file created by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: name of new element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ninstances: number of element of this time in file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_element(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, <span class=\"keywordtype\">long</span> ninstances);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Adds a new property to the last element added by ply_add_element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: name of new property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * type: property type</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * length_type: scalar type of length field of a list property </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * value_type: scalar type of value fields of a list property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_property(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, e_ply_type type,</div>\n\
<div class=\"line\">        e_ply_type length_type, e_ply_type value_type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Adds a new list property to the last element added by ply_add_element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: name of new property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * length_type: scalar type of length field of a list property </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * value_type: scalar type of value fields of a list property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_list_property(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, </div>\n\
<div class=\"line\">        e_ply_type length_type, e_ply_type value_type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Adds a new property to the last element added by ply_add_element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: name of new property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * type: property type</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_scalar_property(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, e_ply_type type);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Adds a new comment item </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * comment: pointer to string with comment text</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_comment(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *comment);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Adds a new obj_info item </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * comment: pointer to string with obj_info data</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_obj_info(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *obj_info);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Writes the ply file header after all element and properties have been</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * defined by calls to ply_add_element and ply_add_property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_write_header(p_ply ply);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Writes one property value, in the order they should be written to the</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * file. For each element type, write all elements of that type in order.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * For each element, write all its properties in order. For scalar</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * properties, just write the value. For list properties, write the length </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * and then each of the values.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle returned by ply_create</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_write(p_ply ply, <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Closes a ply file handle. Releases all memory used by handle</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ply: handle to be closed. </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if successfull, 0 otherwise</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_close(p_ply ply);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef __cplusplus</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif </span><span class=\"comment\">/* RPLY_H */</span><span class=\"preprocessor\"></span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Copyright (C) 2003-2005 Diego Nehab. All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * a copy of this software and associated documentation files (the</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * &quot;Software&quot;), to deal in the Software without restriction, including</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * without limitation the rights to use, copy, modify, merge, publish,</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * distribute, sublicense, and/or sell copies of the Software, and to</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * permit persons to whom the Software is furnished to do so, subject to</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * the following conditions:</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * The above copyright notice and this permission notice shall be</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * included in all copies or substantial portions of the Software.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";