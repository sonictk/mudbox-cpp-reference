var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexExtractor/ptex/PtexSeparableFilter.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_extractor_2ptex_2_ptex_separable_filter_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexExtractor/ptex/PtexSeparableFilter.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexExtractor/ptex/PtexSeparableFilter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/math_8h.html\">math.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexSeparableFilter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexSeparableKernel.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexUtils.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//#define NOEDGEBLEND // uncomment to disable filtering across edges (for debugging)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexSeparableFilter::eval(<span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstChan, <span class=\"keywordtype\">int</span> nChannels,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, </div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">float</span> uw1, <span class=\"keywordtype\">float</span> vw1, <span class=\"keywordtype\">float</span> uw2, <span class=\"keywordtype\">float</span> vw2,</div>\n\
<div class=\"line\">                   <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ac112eef468530a44b7a653ddac190a22\">width</a>, <span class=\"keywordtype\">float</span> blur)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// init</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_tx || nChannels &lt;= 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (faceid &lt; 0 || faceid &gt;= _tx-&gt;numFaces()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    _ntxchan = _tx-&gt;numChannels();</div>\n\
<div class=\"line\">    _dt = _tx-&gt;dataType();</div>\n\
<div class=\"line\">    _firstChanOffset = firstChan*DataSize(_dt);</div>\n\
<div class=\"line\">    _nchan = PtexUtils::min(nChannels, _ntxchan-firstChan);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get face info</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = _tx-&gt;getFaceInfo(faceid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if neighborhood is constant, just return constant value of face</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (f.isNeighborhoodConstant()) {</div>\n\
<div class=\"line\">    PtexPtr&lt;PtexFaceData&gt; <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a> ( _tx-&gt;getData(faceid, 0) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* d = (<span class=\"keywordtype\">char</span>*) <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>-&gt;getData() + _firstChanOffset;</div>\n\
<div class=\"line\">        Ptex::ConvertToFloat(result, d, _dt, _nchan);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// find filter width as bounding box of vectors w1 and w2</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> uw = fabs(uw1) + fabs(uw2), vw = fabs(vw1) + fabs(vw2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// handle border modes</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (_uMode) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> m_clamp: u = <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(u, 0.0f, 1.0f); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> m_periodic: u = u-floor(u); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> m_black: <span class=\"keywordflow\">break</span>; <span class=\"comment\">// do nothing</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (_vMode) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> m_clamp: v = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(v, 0.0f, 1.0f); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> m_periodic: v = v-floor(v);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> m_black: <span class=\"keywordflow\">break</span>; <span class=\"comment\">// do nothing</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build kernel</span></div>\n\
<div class=\"line\">    PtexSeparableKernel k;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (f.isSubface()) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// for a subface, build the kernel as if it were on a main face and then downres</span></div>\n\
<div class=\"line\">    uw = uw * width + blur * 2;</div>\n\
<div class=\"line\">    vw = vw * width + blur * 2;</div>\n\
<div class=\"line\">    buildKernel(k, u*.5, v*.5, uw*.5, vw*.5, f.res);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (k.res.ulog2 == 0) k.upresU();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (k.res.vlog2 == 0) k.upresV();</div>\n\
<div class=\"line\">    k.res.ulog2--; k.res.vlog2--;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    uw = uw * width + blur;</div>\n\
<div class=\"line\">    vw = vw * width + blur;</div>\n\
<div class=\"line\">    buildKernel(k, u, v, uw, vw, f.res);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    k.stripZeros();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check kernel (debug only)</span></div>\n\
<div class=\"line\">    assert(k.uw &gt; 0 &amp;&amp; k.vw &gt; 0);</div>\n\
<div class=\"line\">    assert(k.uw &lt;= PtexSeparableKernel::kmax &amp;&amp; k.vw &lt;= PtexSeparableKernel::kmax);</div>\n\
<div class=\"line\">    _weight = k.weight();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// allocate temporary double-precision result</span></div>\n\
<div class=\"line\">    _result = (<span class=\"keywordtype\">double</span>*) alloca(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>)*_nchan);</div>\n\
<div class=\"line\">    memset(_result, 0, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>)*_nchan);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// apply to faces</span></div>\n\
<div class=\"line\">    splitAndApply(k, faceid, f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// normalize (both for data type and cumulative kernel weight applied)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and output result</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a> = 1.0 / (_weight * OneValue(_dt));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; _nchan; i++) result[i] = <span class=\"keywordtype\">float</span>(_result[i] * scale);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear temp result</span></div>\n\
<div class=\"line\">    _result = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexSeparableFilter::splitAndApply(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// do we need to split? (i.e. does kernel span an edge?)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> splitR = (k.u+k.uw &gt; k.res.u()), splitL = (k.u &lt; 0);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> splitT = (k.v+k.vw &gt; k.res.v()), splitB = (k.v &lt; 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef NOEDGEBLEND</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// for debugging only</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitR) k.mergeR(_uMode);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitL) k.mergeL(_uMode);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitT) k.mergeT(_vMode);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitB) k.mergeB(_vMode);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitR || splitL || splitT || splitB) { </div>\n\
<div class=\"line\">    PtexSeparableKernel ka, kc;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitR) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (f.adjface(e_right) &gt;= 0) {</div>\n\
<div class=\"line\">        k.splitR(ka);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (splitT) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (f.adjface(e_top) &gt;= 0) {</div>\n\
<div class=\"line\">            ka.splitT(kc);</div>\n\
<div class=\"line\">            applyToCorner(kc, faceid, f, e_top);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> ka.mergeT(_vMode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (splitB) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (f.adjface(e_bottom) &gt;= 0) {</div>\n\
<div class=\"line\">            ka.splitB(kc);</div>\n\
<div class=\"line\">            applyToCorner(kc, faceid, f, e_right);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> ka.mergeB(_vMode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        applyAcrossEdge(ka, faceid, f, e_right);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> k.mergeR(_uMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitL) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (f.adjface(e_left) &gt;= 0) {</div>\n\
<div class=\"line\">        k.splitL(ka);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (splitT) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (f.adjface(e_top) &gt;= 0) {</div>\n\
<div class=\"line\">            ka.splitT(kc);</div>\n\
<div class=\"line\">            applyToCorner(kc, faceid, f, e_left);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> ka.mergeT(_vMode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (splitB) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (f.adjface(e_bottom) &gt;= 0) {</div>\n\
<div class=\"line\">            ka.splitB(kc);</div>\n\
<div class=\"line\">            applyToCorner(kc, faceid, f, e_bottom);</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> ka.mergeB(_vMode);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        applyAcrossEdge(ka, faceid, f, e_left);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> k.mergeL(_uMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitT) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (f.adjface(e_top) &gt;= 0) {</div>\n\
<div class=\"line\">        k.splitT(ka);</div>\n\
<div class=\"line\">        applyAcrossEdge(ka, faceid, f, e_top);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> k.mergeT(_vMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (splitB) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (f.adjface(e_bottom) &gt;= 0) {</div>\n\
<div class=\"line\">        k.splitB(ka);</div>\n\
<div class=\"line\">        applyAcrossEdge(ka, faceid, f, e_bottom);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> k.mergeB(_vMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// do local face</span></div>\n\
<div class=\"line\">    apply(k, faceid, f); </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexSeparableFilter::applyAcrossEdge(PtexSeparableKernel&amp; k, </div>\n\
<div class=\"line\">                      <span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f, <span class=\"keywordtype\">int</span> eid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> afid = f.adjface(eid), aeid = f.adjedge(eid);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Ptex::FaceInfo* af = &amp;_tx-&gt;getFaceInfo(afid);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rot = eid - aeid + 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// adjust uv coord and res for face/subface boundary</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fIsSubface = f.isSubface(), afIsSubface = af-&gt;isSubface();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fIsSubface != afIsSubface) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (afIsSubface) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// main face to subface transition</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// adjust res and offset uv coord for primary subface</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> primary = k.adjustMainToSubface(eid);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!primary) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// advance ajacent face and edge id to secondary subface</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> neid = (aeid + 3) % 4;</div>\n\
<div class=\"line\">        afid = af-&gt;adjface(neid);</div>\n\
<div class=\"line\">        aeid = af-&gt;adjedge(neid);</div>\n\
<div class=\"line\">        af = &amp;_tx-&gt;getFaceInfo(afid);</div>\n\
<div class=\"line\">        rot += neid - aeid + 2;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// subface to main face transition</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// Note: the transform depends on which subface the kernel is</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// coming from.  The &quot;primary&quot; subface is the one the main</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// face is pointing at.  The secondary subface adjustment</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// happens to be the same as for the primary subface for the</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// next edge, so the cases can be combined.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> primary = (af-&gt;adjface(aeid) == faceid);</div>\n\
<div class=\"line\">        k.adjustSubfaceToMain(eid - primary);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// rotate and apply (resplit if going to a subface)</span></div>\n\
<div class=\"line\">    k.rotate(rot);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (afIsSubface) splitAndApply(k, afid, *af);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> apply(k, afid, *af);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexSeparableFilter::applyToCorner(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">int</span> faceid, </div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f, <span class=\"keywordtype\">int</span> eid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// traverse clockwise around corner vertex and gather corner faces</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> afid = faceid, aeid = eid;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FaceInfo* af = &amp;<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> prevIsSubface = af-&gt;isSubface();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> MaxValence = 10;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> cfaceId[MaxValence];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> cedgeId[MaxValence];</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FaceInfo* cface[MaxValence];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> numCorners = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; MaxValence; i++) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// advance to next face</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> prevFace = afid;</div>\n\
<div class=\"line\">    afid = af-&gt;adjface(aeid);</div>\n\
<div class=\"line\">    aeid = (af-&gt;adjedge(aeid) + 1) % 4;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// we hit a boundary or reached starting face</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// note: we need to check edge id too because we might have</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// a periodic texture (w/ toroidal topology) where all 4 corners</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// are from the same face</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (afid &lt; 0 || (afid == faceid &amp;&amp; aeid == eid)) {</div>\n\
<div class=\"line\">        numCorners = i - 2;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// record face info</span></div>\n\
<div class=\"line\">    af = &amp;_tx-&gt;getFaceInfo(afid);</div>\n\
<div class=\"line\">    cfaceId[i] = afid;</div>\n\
<div class=\"line\">    cedgeId[i] = aeid;</div>\n\
<div class=\"line\">    cface[i] = af;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check to see if corner is a subface &quot;tee&quot;</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isSubface = af-&gt;isSubface();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (prevIsSubface &amp;&amp; !isSubface &amp;&amp; af-&gt;adjface((aeid+3)%4) == prevFace) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// adjust the eid depending on whether we started from</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// the primary or secondary subface.</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> primary = (i==1);</div>\n\
<div class=\"line\">        k.adjustSubfaceToMain(eid + primary * 2);</div>\n\
<div class=\"line\">        k.rotate(eid - aeid + 3 - primary);</div>\n\
<div class=\"line\">        splitAndApply(k, afid, *af);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    prevIsSubface = isSubface;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (numCorners == 1) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// regular case (valence 4)</span></div>\n\
<div class=\"line\">    applyToCornerFace(k, f, eid, cfaceId[1], *cface[1], cedgeId[1]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (numCorners &gt; 1) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// valence 5+, make kernel symmetric and apply equally to each face</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// first, rotate to standard orientation, u=v=0</span></div>\n\
<div class=\"line\">    k.rotate(eid + 2);</div>\n\
<div class=\"line\">    k.makeSymmetric();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 1; i &lt;= numCorners; i++) {</div>\n\
<div class=\"line\">        PtexSeparableKernel kc = k;</div>\n\
<div class=\"line\">        applyToCornerFace(kc, f, 2, cfaceId[i], *cface[i], cedgeId[i]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// adjust weight for additional corners (one was already counted)</span></div>\n\
<div class=\"line\">    _weight += k.weight() * (numCorners-1);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// valence 2 or 3, ignore corner face (just adjust weight)</span></div>\n\
<div class=\"line\">    _weight -= k.weight();</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexSeparableFilter::applyToCornerFace(PtexSeparableKernel&amp; k, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f, <span class=\"keywordtype\">int</span> eid,</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">int</span> cfid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; cf, <span class=\"keywordtype\">int</span> ceid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// adjust uv coord and res for face/subface boundary</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> fIsSubface = f.isSubface(), cfIsSubface = cf.isSubface();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fIsSubface != cfIsSubface) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cfIsSubface) k.adjustMainToSubface(eid + 3);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> k.adjustSubfaceToMain(eid + 3);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// rotate and apply (resplit if going to a subface)</span></div>\n\
<div class=\"line\">    k.rotate(eid - ceid + 2);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (cfIsSubface) splitAndApply(k, cfid, cf);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> apply(k, cfid, cf);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexSeparableFilter::apply(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    assert(k.u &gt;= 0 &amp;&amp; k.u + k.uw &lt;= k.res.u());</div>\n\
<div class=\"line\">    assert(k.v &gt;= 0 &amp;&amp; k.v + k.vw &lt;= k.res.v());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (k.uw &lt;= 0 || k.vw &lt;= 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// downres kernel if needed</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (k.res.u() &gt; f.res.u()) k.downresU();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (k.res.v() &gt; f.res.v()) k.downresV();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get face data, and apply</span></div>\n\
<div class=\"line\">    PtexPtr&lt;PtexFaceData&gt; <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a> ( _tx-&gt;getData(faceid, k.res) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;isConstant()) {</div>\n\
<div class=\"line\">    k.applyConst(_result, (<span class=\"keywordtype\">char</span>*)<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;getData()+_firstChanOffset, _dt, _nchan);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;isTiled()) {</div>\n\
<div class=\"line\">    Ptex::Res tileres = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;tileRes();</div>\n\
<div class=\"line\">    PtexSeparableKernel kt;</div>\n\
<div class=\"line\">    kt.res = tileres;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileresu = tileres.u();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileresv = tileres.v();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesu = k.res.u() / tileresu;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> = k.v, vw = k.vw; vw &gt; 0; vw -= kt.vw, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> += kt.vw) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> tilev = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> / tileresv;</div>\n\
<div class=\"line\">        kt.v = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> % tileresv;</div>\n\
<div class=\"line\">        kt.vw = PtexUtils::min(vw, tileresv - kt.v);</div>\n\
<div class=\"line\">        kt.kv = k.kv + <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> - k.v;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> u = k.u, uw = k.uw; uw &gt; 0; uw -= kt.uw, u += kt.uw) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> tileu = u / tileresu;</div>\n\
<div class=\"line\">        kt.u = u % tileresu;</div>\n\
<div class=\"line\">        kt.uw = PtexUtils::min(uw, tileresu - kt.u);</div>\n\
<div class=\"line\">        kt.ku = k.ku + u - k.u;</div>\n\
<div class=\"line\">        PtexPtr&lt;PtexFaceData&gt; th ( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;getTile(tilev * ntilesu + tileu) );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (th) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (th-&gt;isConstant())</div>\n\
<div class=\"line\">            kt.applyConst(_result, (<span class=\"keywordtype\">char</span>*)th-&gt;getData()+_firstChanOffset, _dt, _nchan);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            kt.apply(_result, (<span class=\"keywordtype\">char</span>*)th-&gt;getData()+_firstChanOffset, _dt, _nchan, _ntxchan);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    k.apply(_result, (<span class=\"keywordtype\">char</span>*)<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;getData()+_firstChanOffset, _dt, _nchan, _ntxchan);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";