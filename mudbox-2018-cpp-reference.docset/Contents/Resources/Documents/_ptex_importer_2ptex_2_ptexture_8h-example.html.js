var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/Ptexture.h</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptexture_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/Ptexture.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/Ptexture.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef Ptexture_h</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define Ptexture_h</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(_WIN32) || defined(_WINDOWS) || defined(_MSC_VER)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  ifndef PTEX_STATIC</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    ifdef PTEX_EXPORTS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#       define PTEXAPI __declspec(dllexport)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#       define PTEXAPI __declspec(dllimport)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    define PTEXAPI</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  define PTEXAPI</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  ifndef DOXYGEN</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#    define PTEX_USE_STDSTRING</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#  endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexInt.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ostream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexAPIVersion 2</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexFileMajorVersion 1</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexFileMinorVersion 3</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">struct </span>Ptex {</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> MeshType {</div>\n\
<div class=\"line\">    mt_triangle,        </div>\n\
<div class=\"line\">    mt_quad         </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> DataType {</div>\n\
<div class=\"line\">    dt_uint8,       </div>\n\
<div class=\"line\">    dt_uint16,      </div>\n\
<div class=\"line\">    dt_half,        </div>\n\
<div class=\"line\">    dt_float        </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> BorderMode {</div>\n\
<div class=\"line\">    m_clamp,        </div>\n\
<div class=\"line\">    m_black,        </div>\n\
<div class=\"line\">    m_periodic      </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> EdgeId {</div>\n\
<div class=\"line\">    e_bottom,       </div>\n\
<div class=\"line\">    e_right,        </div>\n\
<div class=\"line\">    e_top,          </div>\n\
<div class=\"line\">    e_left          </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> MetaDataType {</div>\n\
<div class=\"line\">    mdt_string,     </div>\n\
<div class=\"line\">    mdt_int8,       </div>\n\
<div class=\"line\">    mdt_int16,      </div>\n\
<div class=\"line\">    mdt_int32,      </div>\n\
<div class=\"line\">    mdt_float,      </div>\n\
<div class=\"line\">    mdt_double      </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* MeshTypeName(MeshType mt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* DataTypeName(DataType dt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* BorderModeName(BorderMode m);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* EdgeIdName(EdgeId eid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* MetaDataTypeName(MetaDataType mdt);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> DataSize(DataType dt) {</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> sizes[] = { 1,2,2,4 };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> sizes[dt]; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">double</span> OneValue(DataType dt) {</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> one[] = { 255.0, 65535.0, 1.0, 1.0 };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> one[dt]; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">double</span> OneValueInv(DataType dt) {</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> one[] = { 1.0/255.0, 1.0/65535.0, 1.0, 1.0 };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> one[dt]; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ConvertToFloat(<span class=\"keywordtype\">float</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a>,</div>\n\
<div class=\"line\">                       Ptex::DataType dt, <span class=\"keywordtype\">int</span> numChannels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ConvertFromFloat(<span class=\"keywordtype\">void</span>* dst, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* src,</div>\n\
<div class=\"line\">                     Ptex::DataType dt, <span class=\"keywordtype\">int</span> numChannels);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Res {</div>\n\
<div class=\"line\">    int8_t ulog2;       </div>\n\
<div class=\"line\">    int8_t vlog2;       </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Res() : ulog2(0), vlog2(0) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Res(int8_t ulog2, int8_t vlog2) : ulog2(ulog2), vlog2(vlog2) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Res(uint16_t <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>) { val() = <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> u()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> 1&lt;&lt;(unsigned)ulog2; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> 1&lt;&lt;(unsigned)vlog2; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    uint16_t&amp; val() { <span class=\"keywordflow\">return</span> *(uint16_t*)<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> uint16_t&amp; val()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> *(uint16_t*)<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> u() * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a637f7084f9654006932237127d7be263\">operator==</a>(<span class=\"keyword\">const</span> Res&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> val() == r.val(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qbytearray_8h.html#ae6561cb91aa056d85ac61b6cf59ef070\">operator!=</a>(<span class=\"keyword\">const</span> Res&amp; r)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> val() != r.val(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qbytearray_8h.html#afeb244830566407f4b80a5e698b8b926\">operator&gt;=</a>(<span class=\"keyword\">const</span> Res&amp; r)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> ulog2 &gt;= r.ulog2 &amp;&amp; vlog2 &gt;= r.vlog2; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Res swappeduv()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> Res(vlog2, ulog2); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> swapuv() { *<span class=\"keyword\">this</span> = swappeduv(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">clamp</a>(<span class=\"keyword\">const</span> Res&amp; r) { </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ulog2 &gt; r.ulog2) ulog2 = r.ulog2;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (vlog2 &gt; r.vlog2) vlog2 = r.vlog2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesu(Res tileres)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> 1&lt;&lt;(ulog2-tileres.ulog2); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesv(Res tileres)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> 1&lt;&lt;(vlog2-tileres.vlog2); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntiles(Res tileres)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> ntilesu(tileres) * ntilesv(tileres); }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>FaceInfo {</div>\n\
<div class=\"line\">    Res <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>;        </div>\n\
<div class=\"line\">    uint8_t adjedges;       </div>\n\
<div class=\"line\">    uint8_t flags;      </div>\n\
<div class=\"line\">    int32_t adjfaces[4];    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FaceInfo() : <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>(), adjedges(0), flags(0) </div>\n\
<div class=\"line\">    { </div>\n\
<div class=\"line\">        adjfaces[0] = adjfaces[1] = adjfaces[2] = adjfaces[3] = -1; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FaceInfo(Res res) : <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>(res), adjedges(0), flags(0) </div>\n\
<div class=\"line\">    { </div>\n\
<div class=\"line\">        adjfaces[0] = adjfaces[1] = adjfaces[2] = adjfaces[3] = -1; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    FaceInfo(Res res, <span class=\"keywordtype\">int</span> adjfaces[4], <span class=\"keywordtype\">int</span> adjedges[4], <span class=\"keywordtype\">bool</span> isSubface=<span class=\"keyword\">false</span>)</div>\n\
<div class=\"line\">        : <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>(res), flags(isSubface ? flag_subface : 0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        setadjfaces(adjfaces[0], adjfaces[1], adjfaces[2], adjfaces[3]);</div>\n\
<div class=\"line\">        setadjedges(adjedges[0], adjedges[1], adjedges[2], adjedges[3]);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    EdgeId adjedge(<span class=\"keywordtype\">int</span> eid)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> EdgeId((adjedges &gt;&gt; (2*eid)) &amp; 3); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> adjface(<span class=\"keywordtype\">int</span> eid)<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> adjfaces[eid]; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isConstant()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (flags &amp; flag_constant) != 0; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isNeighborhoodConstant()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (flags &amp; flag_nbconstant) != 0; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> hasEdits()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (flags &amp; flag_hasedits) != 0; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> isSubface()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> (flags &amp; flag_subface) != 0; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setadjfaces(<span class=\"keywordtype\">int</span> f0, <span class=\"keywordtype\">int</span> f1, <span class=\"keywordtype\">int</span> f2, <span class=\"keywordtype\">int</span> f3)</div>\n\
<div class=\"line\">    { adjfaces[0] = f0, adjfaces[1] = f1, adjfaces[2] = f2; adjfaces[3] = f3; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setadjedges(<span class=\"keywordtype\">int</span> e0, <span class=\"keywordtype\">int</span> e1, <span class=\"keywordtype\">int</span> e2, <span class=\"keywordtype\">int</span> e3)</div>\n\
<div class=\"line\">    { adjedges = (e0&amp;3) | ((e1&amp;3)&lt;&lt;2) | ((e2&amp;3)&lt;&lt;4) | ((e3&amp;3)&lt;&lt;6); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> { flag_constant = 1, flag_hasedits = 2, flag_nbconstant = 4, flag_subface = 8 };</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef PTEX_USE_STDSTRING</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae9ea2d206f76ea82db7a2ea002fdef2f\">std::string</a> String;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>String</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">     <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    String() : _str(0) {}</div>\n\
<div class=\"line\">    String(<span class=\"keyword\">const</span> String&amp; str) : _str(0) { *<span class=\"keyword\">this</span> = str; }</div>\n\
<div class=\"line\">    PTEXAPI ~String();</div>\n\
<div class=\"line\">    PTEXAPI String&amp; operator=(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* str);</div>\n\
<div class=\"line\">    String&amp; operator=(<span class=\"keyword\">const</span> String&amp; str) { *<span class=\"keyword\">this</span> = str._str; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* c_str()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _str ? _str : <span class=\"stringliteral\">&quot;&quot;</span>; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> empty()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _str == 0; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">     <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* _str;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef DOXYGEN</span></div>\n\
<div class=\"line\">;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef PTEX_USE_STDSTRING</span></div>\n\
<div class=\"line\">std::ostream&amp; <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_s_s_e_8h.html#a48d936d9a8d7c3911d7a6978264d36ba\">operator &lt;&lt; </a>(std::ostream&amp; stream, <span class=\"keyword\">const</span> Ptex::String&amp; str);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexMetaData {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexMetaData() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> numKeys() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getKey(<span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*&amp; key, Ptex::MetaDataType&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int8_t*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span>&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int16_t*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span>&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int32_t*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span>&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span>&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getValue(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>*&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span>&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexFaceData {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexFaceData() {} </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isConstant() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <span class=\"keywordtype\">void</span>* result) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span>* getData() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> isTiled() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::Res tileRes() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getTile(<span class=\"keywordtype\">int</span> tile) = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexTexture {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexTexture() {} </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> PtexTexture* open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, Ptex::String&amp; error, <span class=\"keywordtype\">bool</span> premultiply=0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::MeshType meshType() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::DataType dataType() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::BorderMode uBorderMode() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Ptex::BorderMode vBorderMode() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> alphaChannel() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> numChannels() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">int</span> numFaces() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> hasEdits() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> hasMipMaps() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexMetaData* getMetaData() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; getFaceInfo(<span class=\"keywordtype\">int</span> faceid) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getData(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getData(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>, Ptex::Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getData(<span class=\"keywordtype\">int</span> faceid) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexFaceData* getData(<span class=\"keywordtype\">int</span> faceid, Ptex::Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> getPixel(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">int</span> u, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels,</div>\n\
<div class=\"line\">              Ptex::Res <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>) = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexInputHandler {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexInputHandler() {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">void</span>* Handle;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> Handle open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> seek(Handle handle, <a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a887307629fdf8e2a5f2970881019075b\">int64_t</a> pos) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">size_t</span> <a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab4ee307df41386f0f6663773cef12b6c\">read</a>(<span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a>, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>, Handle handle) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> close(Handle handle) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* lastError() = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexCache {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexCache() {} </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> PtexCache* create(<span class=\"keywordtype\">int</span> maxFiles=0,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">int</span> maxMem=0,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">bool</span> premultiply=<span class=\"keyword\">false</span>,</div>\n\
<div class=\"line\">                     PtexInputHandler* handler=0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> setSearchPath(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* getSearchPath() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> PtexTexture* <span class=\"keyword\">get</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, Ptex::String&amp; error) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> purge(PtexTexture* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ab21590c4736d1459a5a0674a42b5a655\">texture</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> purge(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> purgeAll() = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexWriter {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexWriter() {} </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PTEXAPI</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PtexWriter* open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path,</div>\n\
<div class=\"line\">                Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces,</div>\n\
<div class=\"line\">                Ptex::String&amp; error, <span class=\"keywordtype\">bool</span> genmipmaps=<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> PtexWriter* edit(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, <span class=\"keywordtype\">bool</span> incremental,</div>\n\
<div class=\"line\">                Ptex::MeshType mt, Ptex::DataType dt,</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">int</span> nfaces,</div>\n\
<div class=\"line\">                Ptex::String&amp; error, <span class=\"keywordtype\">bool</span> genmipmaps=<span class=\"keyword\">true</span>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PTEXAPI</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">bool</span> applyEdits(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* path, Ptex::String&amp; error);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() = 0;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> setBorderModes(Ptex::BorderMode uBorderMode, Ptex::BorderMode vBorderMode) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keywordtype\">string</span>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int8_t* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int16_t* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> int32_t* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> writeMeta(PtexMetaData* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> writeFace(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; info, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>=0) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> writeConstantFace(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; info, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> close(Ptex::String&amp; error) = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if NEW_API</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> writeFaceReduction(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::Res&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>=0) = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">bool</span> writeConstantFaceReduction(<span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::Res&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>) = 0;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexFilter {</div>\n\
<div class=\"line\"> <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexFilter() {}; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">enum</span> FilterType {</div>\n\
<div class=\"line\">    f_point,        </div>\n\
<div class=\"line\">    f_bilinear,     </div>\n\
<div class=\"line\">    f_box,          </div>\n\
<div class=\"line\">    f_gaussian,     </div>\n\
<div class=\"line\">    f_bicubic,      </div>\n\
<div class=\"line\">    f_bspline,      </div>\n\
<div class=\"line\">    f_catmullrom,       </div>\n\
<div class=\"line\">    f_mitchell      </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Options {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> __structSize;   </div>\n\
<div class=\"line\">    FilterType <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8bed50656d87c3eeed9d8f5e539c6b3e\">filter</a>;  </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> lerp;      </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> sharpness;    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Options(FilterType filter=f_box, <span class=\"keywordtype\">bool</span> lerp=0, <span class=\"keywordtype\">float</span> sharpness=0) :</div>\n\
<div class=\"line\">        __structSize(sizeof(Options)),</div>\n\
<div class=\"line\">        filter(filter), lerp(lerp), sharpness(sharpness) {}</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">/* Construct a filter for the given texture.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\">    PTEXAPI <span class=\"keyword\">static</span> PtexFilter* getFilter(PtexTexture* tx, <span class=\"keyword\">const</span> Options&amp; opts);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> eval(<span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstchan, <span class=\"keywordtype\">int</span> nchannels,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <span class=\"keywordtype\">float</span> uw1, <span class=\"keywordtype\">float</span> vw1, <span class=\"keywordtype\">float</span> uw2, <span class=\"keywordtype\">float</span> vw2,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ac112eef468530a44b7a653ddac190a22\">width</a>=1, <span class=\"keywordtype\">float</span> blur=0) = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">class</span> T&gt; <span class=\"keyword\">class </span>PtexPtr {</div>\n\
<div class=\"line\">    T* _ptr;</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexPtr(T* ptr=0) : _ptr(ptr) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~PtexPtr() { <span class=\"keywordflow\">if</span> (_ptr) _ptr-&gt;release(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">operator</span> T* () { <span class=\"keywordflow\">return</span> _ptr; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    T* operator-&gt; () { <span class=\"keywordflow\">return</span> _ptr; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    T* <span class=\"keyword\">get</span>() { <span class=\"keywordflow\">return</span> _ptr; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    PtexPtr(<span class=\"keyword\">const</span> PtexPtr&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> operator= (PtexPtr&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a>);</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";