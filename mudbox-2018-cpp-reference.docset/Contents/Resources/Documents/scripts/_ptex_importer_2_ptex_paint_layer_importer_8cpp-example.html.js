var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/PtexPaintLayerImporter.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2_ptex_paint_layer_importer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/PtexPaintLayerImporter.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/PtexPaintLayerImporter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2011, 2012 Autodesk, Inc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION: PTEX texture importer</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CREATED: January 2011</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(__APPLE__)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;OpenGL/OpenGL.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;OpenGL/Glu.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(JAMBUILD)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html\">GLee.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/_mud_box_g_l_8h.html\">Mudbox/MudBoxGL.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html\">GL/GLee.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;gl/glu.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html\">Mudbox/mudbox.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/math_8h.html\">math.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtOpenGL/QGLWidget&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtOpenGL/QGLFormat&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtOpenGL/QGLContext&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPaintLayerImporter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtGui/QMessageBox&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html\">Cg/cgGL.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/qgl_8h.html\">QtOpenGL/qgl.h</a>&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(JAMBUILD)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;MudboxIntern/CgFile.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;CgFile.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/node_8h.html#a1d51ad935ab5d26fe95dff62601b602c\">IMPLEMENT_CLASS</a>( PtexPaintLayerImporter, PaintLayerImporter, <span class=\"stringliteral\">&quot;pteximporter&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define MIN_TRI_UV_SIZE 64</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Simple float 2D coordinate ...</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>fCoord {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>: <span class=\"keywordtype\">float</span> <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>, <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>;</div>\n\
<div class=\"line\">    fCoord(<span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ac8729153468b5dcf13f971b21d84d4e5\">a</a>, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a>) : x(a), y(b) {}</div>\n\
<div class=\"line\">    fCoord() : x(0), y(0) {}</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// This now works for quads and quads composed of 2 triangles.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> isUVRightHanded(<span class=\"keyword\">const</span> Mesh &amp; mesh, <span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a676ca580c460c0154eb58200433d2a9e\">face</a>) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((mesh.Type() == Topology::typeQuadric)) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        TC o = mesh.QuadVertexTC(face, 0);</div>\n\
<div class=\"line\">        TC <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ac8729153468b5dcf13f971b21d84d4e5\">a</a> = mesh.QuadVertexTC(face, 1) - o;</div>\n\
<div class=\"line\">        TC <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a> = mesh.QuadVertexTC(face, 3) - o;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span> zOfCrossProduct = a.u*b.v - b.u*a.v;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> zOfCrossProduct &gt; 0.0f;</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (face &gt;= (mesh.FaceCount() - 1))          <span class=\"comment\">// boundary condition</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        TC o = mesh.TriangleVertexTC(face,   0);     <span class=\"comment\">//  1 +---+ 2 (1 in face + 1)</span></div>\n\
<div class=\"line\">        TC a = mesh.TriangleVertexTC(face,   1) - o; <span class=\"comment\">//    |  /|</span></div>\n\
<div class=\"line\">        TC b = mesh.TriangleVertexTC(face+1, 2) - o; <span class=\"comment\">//    | / |</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">float</span>  zOfCrossProduct = a.u*b.v - b.u*a.v;  <span class=\"comment\">//    |/  |     </span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> zOfCrossProduct &gt; 0.0f;               <span class=\"comment\">//  0 +---+ 3 (2 in face + 1)</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexPaintLayerImporter::Prepare( <span class=\"keyword\">const</span> <a name=\"_a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> &amp;sFileName, Mesh *pMesh, </div>\n\
<div class=\"line\">                                      <span class=\"keywordtype\">bool</span> bAsMask, <span class=\"keywordtype\">bool</span> bSilentMode )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !m_Importer ) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_Importer = CreateInstance&lt;PtexImporter&gt;();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !m_Importer ) </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        m_Importer-&gt;CreateMeshFromPtex(sFileName, <span class=\"keyword\">false</span>, bSilentMode);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    pMesh = pMesh-&gt;Geometry()-&gt;LowestLevel();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_Importer-&gt;m_FaceMap) </div>\n\
<div class=\"line\">        m_Importer-&gt;BuildMapsFromBaseMesh(pMesh);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Ptex::String  <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a>;</div>\n\
<div class=\"line\">    <a name=\"_a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_byte_array.html\">QByteArray</a>    a  = <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_file.html#a548ef3f34e5265ca50980914ccabbfde\">QFile::encodeName</a>( sFileName );</div>\n\
<div class=\"line\">    PtexTexture  *pT = PtexTexture::open( a.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_byte_array.html#acd2173722996016205933aa3053f895f\">constData</a>(), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!pT) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">            <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;Unable to open PTEX file. Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                   <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;Unable to open PTEX file. Mudbox cannot import it.\\n&quot;</span> ));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pT-&gt;meshType() != Ptex::mt_quad) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file is not quadrangular. &quot;</span></div>\n\
<div class=\"line\">                                                      <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                   <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;This PTEX file is not quadrangular. Mudbox cannot import it.\\n&quot;</span> ));</div>\n\
<div class=\"line\">        pT-&gt;release();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Step1: Check if the file is compatible with our mesh</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// first my making sure the face counts are consistent</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( pT-&gt;numFaces() != m_Importer-&gt;m_iSubFaceCount )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file has different number of faces than your mesh. &quot;</span></div>\n\
<div class=\"line\">                                                      <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                   <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Your mesh: %1 faces, file: %2 faces.\\n&quot;</span> )</div>\n\
<div class=\"line\">                                .arg( pMesh-&gt;FaceCount() ).arg( pT-&gt;numFaces() ) );</div>\n\
<div class=\"line\">        pT-&gt;release();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( pMesh-&gt;FaceCount() != m_Importer-&gt;m_iTotalTesselatedFaceCount ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file has different number of faces than your mesh. &quot;</span></div>\n\
<div class=\"line\">                                                      <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                   <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Your mesh: %1 faces, file: %2 faces.\\n&quot;</span> )</div>\n\
<div class=\"line\">                                .arg( pMesh-&gt;FaceCount() ).arg( m_Importer-&gt;m_iTotalTesselatedFaceCount ) );</div>\n\
<div class=\"line\">        pT-&gt;release();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if its a quad mesh, ensure that the topology and adjacency is the same</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ((pMesh-&gt;Type() == Topology::typeQuadric)) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_Importer &amp;&amp; !m_Importer-&gt;m_allQuads ) <span class=\"comment\">// make sure the ptex is all quads too</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file is not compatible with your mesh. &quot;</span></div>\n\
<div class=\"line\">                                                          <span class=\"stringliteral\">&quot;Mudbox cannot import it. (1)&quot;</span>),  </div>\n\
<div class=\"line\">                                                       <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Ptex is mixed quads and tris/n-gons, your mesh is all quads.\\n&quot;</span> ));</div>\n\
<div class=\"line\">            pT-&gt;release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> &lt; pMesh-&gt;FaceCount(); <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Ptex::FaceInfo &amp;i = pT-&gt;getFaceInfo( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> &lt; 4; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordtype\">int</span> a = i.adjface( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> ), b = i.adjedge( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> ), d = pMesh-&gt;QuadAdjacency( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( (i.adjface( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> ) == -1 &amp;&amp; pMesh-&gt;QuadAdjacency( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> ) != 0xffffffff) ||</div>\n\
<div class=\"line\">                     (i.adjface( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> ) != -1 &amp;&amp; pMesh-&gt;QuadAdjacency( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> ) != i.adjface( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> )*4+i.adjedge( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> )) )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file is not compatible with your mesh. &quot;</span></div>\n\
<div class=\"line\">                                                                  <span class=\"stringliteral\">&quot;Mudbox cannot import it. (2)&quot;</span>),  </div>\n\
<div class=\"line\">                                                               <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Ptex adjacency does not match mudbox mesh adjacency.\\n&quot;</span> ));</div>\n\
<div class=\"line\">                    pT-&gt;release();</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">    {   <span class=\"comment\">// mesh is triangular, check that the ptex is not all quads...</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_Importer-&gt;m_allQuads )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file is not compatible with your mesh. &quot;</span></div>\n\
<div class=\"line\">                                                          <span class=\"stringliteral\">&quot;Mudbox cannot import it. (3)&quot;</span>),  </div>\n\
<div class=\"line\">                                                       <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Ptex is all quads, mudbox mesh is mixed quads and tris/n-gons.\\n&quot;</span> ));</div>\n\
<div class=\"line\">            pT-&gt;release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">// could check for consistent adjacency here....</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Step 2: Auto generate UV.</span></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a> *pG = pMesh-&gt;<a name=\"a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_tree_node.html#a4af55b252dcecf719f083e2ecc16d332\">ChildByClass</a>&lt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a>&gt;( false );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( pG )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// the sizes of the quads in uv space no longer have to perfectly match, </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// as this importer will resize them if needed.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iMaxSize = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( iMaxSize*2 &lt; pG-&gt;<a name=\"a12\"></a>UVTileSize() )</div>\n\
<div class=\"line\">            iMaxSize *= 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> &lt; pT-&gt;numFaces(); <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>++ )</div>\n\
<div class=\"line\">        {   <span class=\"comment\">// ths loops through the ptex faces &amp; subfaces....</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Ptex::FaceInfo &amp;i = pT-&gt;getFaceInfo( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( (1u &lt;&lt; i.res.ulog2) &gt; iMaxSize || (1u &lt;&lt; i.res.vlog2) &gt; iMaxSize )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX contains faces with too big resolution. &quot;</span></div>\n\
<div class=\"line\">                                                              <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                           <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Ptex contains faces bigger than the tile size.\\n&quot;</span> ));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                pT-&gt;release();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">    {   <span class=\"comment\">// No UV generator, set up for ptex and make new uvs...</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">bool</span> bConvertToPtex = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( pMesh-&gt;UVlessPaintingStatus() == 0 )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( (<a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Scene()-&gt;ActivePaintLayer() || <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Scene()-&gt;ActivePaintLayerGroup() ) &amp;&amp; !bAsMask )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097\">QMessageBox::StandardButton</a> b = <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#a6310f21d1fe60334a50e0f464c726952\">QMessageBox::question</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;MainWindow(),  </div>\n\
<div class=\"line\">                                                                           tr(<span class=\"stringliteral\">&quot;PTEX paint layer import&quot;</span>), </div>\n\
<div class=\"line\">                                                                           tr(<span class=\"stringliteral\">&quot;The mesh %1 has UV paint layers. &quot;</span></div>\n\
<div class=\"line\">                                                                              <span class=\"stringliteral\">&quot;Do you want to convert them to PTEX Layers?&quot;</span>).</div>\n\
<div class=\"line\">                                                                           arg(pMesh-&gt;Geometry()-&gt;Name()), </div>\n\
<div class=\"line\">                                                                           <a name=\"a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097a94740273f4260406fffc4a312e1b6c01\">QMessageBox::Cancel</a>|<a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097a695ed835e2b72585493b31c1043fdf25\">QMessageBox::Yes</a>|<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097a996e257033c09daf66076efc1ebd3b1c\">QMessageBox::No</a> );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( b == <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097a94740273f4260406fffc4a312e1b6c01\">QMessageBox::Cancel</a> ) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import cancelled. (1)\\n&quot;</span> ));</div>\n\
<div class=\"line\">                        pT-&gt;release();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    bConvertToPtex = b == <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097a695ed835e2b72585493b31c1043fdf25\">QMessageBox::Yes</a>;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                    bConvertToPtex = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( bAsMask )</div>\n\
<div class=\"line\">                    bConvertToPtex = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <a name=\"_a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html\">QMessageBox</a> msgBox(<a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;MainWindow());</div>\n\
<div class=\"line\">                    msgBox.setWindowTitle( tr(<span class=\"stringliteral\">&quot;PTEX paint layer import&quot;</span>) );</div>\n\
<div class=\"line\">                    msgBox.setText(<a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( tr(<span class=\"stringliteral\">&quot;To import a PTEX paint layer, the model %1 must first be set up for PTEX.&quot;</span>) ).</div>\n\
<div class=\"line\">                                            arg(pMesh-&gt;Geometry()-&gt;Name()));</div>\n\
<div class=\"line\">                    <a name=\"_a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_push_button.html\">QPushButton</a>* YesBtn    = msgBox.addButton(tr(<span class=\"stringliteral\">&quot;Setup for PTEX&quot;</span>), <a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#a48a4152bf34ee2460388820bf148312caf18c5fb7a2d1286392462789b271a48d\">QMessageBox::AcceptRole</a>);</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_push_button.html\">QPushButton</a>* CancelBtn = msgBox.addButton(<a class=\"code\" href=\"#!/url=./cpp_ref/class_q_message_box.html#afb69631f47ecdf274da8f47337547097a94740273f4260406fffc4a312e1b6c01\">QMessageBox::Cancel</a>);</div>\n\
<div class=\"line\">                    msgBox.exec();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( msgBox.clickedButton() == CancelBtn ) {</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import cancelled. (2)\\n&quot;</span> ));</div>\n\
<div class=\"line\">                        pT-&gt;release();</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pG = pMesh-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_tree_node.html#a4af55b252dcecf719f083e2ecc16d332\">ChildByClass</a>&lt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a>&gt;( true );</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iMaxSize = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> ( (iMaxSize * 2) &lt; pG-&gt;UVTileSize() )</div>\n\
<div class=\"line\">            iMaxSize *= 2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> &lt; pT-&gt;numFaces(); <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>++ )</div>\n\
<div class=\"line\">        {   <span class=\"comment\">// ths loops through the ptex faces &amp; subfaces....</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Ptex::FaceInfo &amp;i = pT-&gt;getFaceInfo( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( (1u &lt;&lt; i.res.ulog2) &gt; iMaxSize || (1u &lt;&lt; i.res.vlog2) &gt; iMaxSize )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( !bSilentMode )</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX contains faces with too big resolution. &quot;</span></div>\n\
<div class=\"line\">                                                              <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                           <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import failed: Ptex contains faces bigger than the tile size.\\n&quot;</span> ));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                pT-&gt;release();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mf = 0; mf &lt; pMesh-&gt;FaceCount(); mf++ )</div>\n\
<div class=\"line\">        {   <span class=\"comment\">// loop through the mudbox faces...</span></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span>    <span class=\"keywordtype\">int</span> pf    = m_Importer-&gt;m_ReverseFaceMap[mf];  <span class=\"comment\">// lookup the ptex poly id from the mudbox face ID</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ppf   = m_Importer-&gt;m_FaceMap[pf].m_PTexSubfaceID; <span class=\"comment\">// xlate from ptex polyID to PTex subFaceID</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keyword\">const</span> Ptex::FaceInfo &amp;i = pT-&gt;getFaceInfo( ppf );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> maxU  = i.res.ulog2;    </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">int</span> maxV  = i.res.vlog2;    </div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> boost = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( m_Importer-&gt;m_FaceMap[pf].m_NumEdges != 4) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// if it&#39;s an ngon or triangle, look at the max uv size of each </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// subface for that n-gon, *and* all the neighbors of those subfaces.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; m_Importer-&gt;m_FaceMap[pf].m_NumEdges; ++j) </div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> Ptex::FaceInfo &amp;ii = pT-&gt;getFaceInfo( ppf );</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (ii.res.ulog2 &gt; maxU) maxU = ii.res.ulog2;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> (ii.res.vlog2 &gt; maxV) maxV = ii.res.vlog2;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> k = 0; k &lt; 4; ++k)   <span class=\"comment\">// look through the neighbors </span></div>\n\
<div class=\"line\">                    {                             <span class=\"comment\">// and take this into account.  </span></div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> Ptex::FaceInfo &amp;jj = pT-&gt;getFaceInfo( ii.adjface(k) );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (jj.res.ulog2 &gt; maxU) maxU = jj.res.ulog2;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (jj.res.vlog2 &gt; maxV) maxV = jj.res.vlog2;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\">                    ppf++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// Since in ptex each triangle and n-gon is subdivided into n smaller</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// subfaces, lets make sure the n-gon is big enough in the mudbox </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// internal uv space so that any losses due to resampling are minimized</span></div>\n\
<div class=\"line\">                <span class=\"comment\">// by ensureing that we magnify, and not minify texture subfaces on import.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( m_Importer-&gt;m_FaceMap[pf].m_NumEdges != 4) </div>\n\
<div class=\"line\">                    boost = 1;  </div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nu = 1u &lt;&lt; (maxU + boost);</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> nv = 1u &lt;&lt; (maxV + boost);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (nu &gt; iMaxSize) nu = iMaxSize;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (nv &gt; iMaxSize) nv = iMaxSize;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// back that up with enforcing some minimum uv sizes for triangles and n-gons</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( m_Importer-&gt;m_FaceMap[pf].m_NumEdges == 3) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (nu &lt; MIN_TRI_UV_SIZE) nu = MIN_TRI_UV_SIZE;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (nv &lt; MIN_TRI_UV_SIZE) nv = MIN_TRI_UV_SIZE;</div>\n\
<div class=\"line\">            } </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> ( m_Importer-&gt;m_FaceMap[pf].m_NumEdges &gt; 4) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (nu &lt; (MIN_TRI_UV_SIZE * 2)) nu = MIN_TRI_UV_SIZE * 2;</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (nv &lt; (MIN_TRI_UV_SIZE * 2)) nv = MIN_TRI_UV_SIZE * 2;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            pG-&gt;<a name=\"a20\"></a>SetFaceSize( mf, nu, nv );</div>\n\
<div class=\"line\">        } <span class=\"comment\">// endfor mesh faces</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        pT-&gt;release();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// this next three lines causes the UVs to be generated.</span></div>\n\
<div class=\"line\">        <a name=\"_a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html\">QVector&lt;Mesh*&gt;</a> aMeshes;</div>\n\
<div class=\"line\">        aMeshes.<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html#ab32da790af34509a87008eacf308e3f6\">push_back</a>( pMesh );</div>\n\
<div class=\"line\">        <a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_ptex_painting.html#a5d950a06bd5b73df113134f43d0c1b58\">PtexPainting::Setup</a>( aMeshes, bConvertToPtex );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexPaintLayerImporter::Import( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>  &amp;sFileName, </div>\n\
<div class=\"line\">                                     <span class=\"keywordtype\">int</span>             iFileTypeIndex,                      </div>\n\
<div class=\"line\">                                     Mesh           *pMesh, </div>\n\
<div class=\"line\">                                     TexturePool    *pTargetPool )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    pMesh = pMesh-&gt;Geometry()-&gt;LowestLevel();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a> *pG = pMesh-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_tree_node.html#a4af55b252dcecf719f083e2ecc16d332\">ChildByClass</a>&lt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a>&gt;( false );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !pG )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        pG = pMesh-&gt;<a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_tree_node.html#a4af55b252dcecf719f083e2ecc16d332\">ChildByClass</a>&lt;<a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a>&gt;( true ); </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a4574db3fa92e5236e049b3e67bc51cd9\">MB_ONBUG</a>( pG == 0 ) </div>\n\
<div class=\"line\">        return false;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// It looks like someone is calling &quot;Prepare&quot; on a different instance than </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// what they call Import on -- this used to work, but now we have state </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// we carry forward. If this is happening, we need to rebuild this state.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that is carried in the m_Importer - specificaly the face maps</span></div>\n\
<div class=\"line\">    if ( !m_Importer ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_Importer = CreateInstance&lt;PtexImporter&gt;();</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( !m_Importer ) </div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        m_Importer-&gt;BuildMapsFromBaseMesh(pMesh);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!m_Importer-&gt;m_FaceMap) {</div>\n\
<div class=\"line\">        m_Importer-&gt;BuildMapsFromBaseMesh(pMesh);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// one last sanity check for the importer and the face maps. </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// if they aren&#39;t there, we can&#39;t proceed without crashing</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !m_Importer                            || </div>\n\
<div class=\"line\">         (m_Importer &amp;&amp; !m_Importer-&gt;m_FaceMap) || </div>\n\
<div class=\"line\">         (m_Importer &amp;&amp; !m_Importer-&gt;m_ReverseFaceMap) ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a24f4fe4a32c8501c3cae26db72954a30\">MB_ASSERT</a>( iFileTypeIndex == 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    pMesh = pMesh-&gt;Geometry()-&gt;LowestLevel();  <span class=\"comment\">// redundant?</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !pMesh-&gt;HasExpandedTCs() )</div>\n\
<div class=\"line\">        pMesh-&gt;CreateExpandedTCs();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Copy the color data to the textures.</span></div>\n\
<div class=\"line\">    Material *pMat = pMesh-&gt;Geometry()-&gt;Material();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( pTargetPool == 0 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> j = 0; j &lt; pMat-&gt;TextureCount(); j++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            TexturePool *pTP = pMat-&gt;Texture( j );</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( pTP-&gt;Name() == <a name=\"a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;Diffuse&quot;</span>) )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                LayerContainer *pC = <span class=\"keyword\">dynamic_cast&lt;</span>LayerContainer *<span class=\"keyword\">&gt;</span>( pTP );</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( pC )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    Layer *pL = pC-&gt;CreateLayer();</div>\n\
<div class=\"line\">                    pTargetPool = <span class=\"keyword\">dynamic_cast&lt;</span>TexturePool *<span class=\"keyword\">&gt;</span>( pL );</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">                pTP-&gt;SetRenderMode( TexturePool::renderModeTexture );</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <a name=\"a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a99d9d5b4fd434c7a38c2add8217e4c14\">MB_SAFELY</a>( pTargetPool &amp;&amp; pG )</div>\n\
<div class=\"line\">    {                           </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressStart( tr(<span class=\"stringliteral\">&quot;Reading Ptex Texture...&quot;</span>), </div>\n\
<div class=\"line\">                                              m_Importer-&gt;m_iSubFaceCount );  </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_file_info.html\">QFileInfo</a> i( sFileName );</div>\n\
<div class=\"line\">        pTargetPool-&gt;Node::SetName( i.baseName() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_byte_array.html\">QByteArray</a> a = <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_file.html#a548ef3f34e5265ca50980914ccabbfde\">QFile::encodeName</a>( sFileName );</div>\n\
<div class=\"line\">        Ptex::String <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        PtexTexture *pT = PtexTexture::open( a.<a class=\"code\" href=\"#!/url=./cpp_ref/class_q_byte_array.html#acd2173722996016205933aa3053f895f\">constData</a>(), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!pT) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;Unable to open PTEX file. &quot;</span></div>\n\
<div class=\"line\">                                                      <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                   <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;Unable to open PTEX file. Mudbox cannot import it.\\n&quot;</span> ));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( m_Importer )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_Importer-&gt;m_FaceMap != 0) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] m_Importer-&gt;m_FaceMap;</div>\n\
<div class=\"line\">                    m_Importer-&gt;m_FaceMap = 0;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (m_Importer-&gt;m_ReverseFaceMap != 0) {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">delete</span> [] m_Importer-&gt;m_ReverseFaceMap;</div>\n\
<div class=\"line\">                    m_Importer-&gt;m_ReverseFaceMap = 0;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (pT-&gt;meshType() != Ptex::mt_quad) {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This PTEX file is not quadrangular. &quot;</span></div>\n\
<div class=\"line\">                                                      <span class=\"stringliteral\">&quot;Mudbox cannot import it.&quot;</span>),  </div>\n\
<div class=\"line\">                                                   <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;This PTEX file is not quadrangular. Mudbox cannot import it.\\n&quot;</span> ));</div>\n\
<div class=\"line\">            pT-&gt;release();</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        LoadPtexTexture( pT, pTargetPool, pMesh, pG );</div>\n\
<div class=\"line\">        pT-&gt;release();</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Step 4: Fill the UV bleeding area.</span></div>\n\
<div class=\"line\">        <a name=\"a29\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_edge_bleeding.html#a39da41279af6dbb514a1be08a766235b\">EdgeBleeding::FillBleedingAreas</a>( pMesh, pTargetPool, <span class=\"keyword\">true</span> );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_Importer )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_Importer-&gt;m_FaceMap != 0) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] m_Importer-&gt;m_FaceMap;</div>\n\
<div class=\"line\">            m_Importer-&gt;m_FaceMap = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (m_Importer-&gt;m_ReverseFaceMap != 0) {</div>\n\
<div class=\"line\">            <span class=\"keyword\">delete</span> [] m_Importer-&gt;m_ReverseFaceMap;</div>\n\
<div class=\"line\">            m_Importer-&gt;m_ReverseFaceMap = 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// fcn to draw a textured quad given the 4 corners.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> drawQuad(<span class=\"keywordtype\">float</span> x0, <span class=\"keywordtype\">float</span> y0, <span class=\"keywordtype\">float</span> x1, <span class=\"keywordtype\">float</span> y1,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">float</span> x2, <span class=\"keywordtype\">float</span> y2, <span class=\"keywordtype\">float</span> x3, <span class=\"keywordtype\">float</span> y3)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    glBegin( GL_QUADS );</div>\n\
<div class=\"line\">    glColor4f( 1, 1, 1, 1 );</div>\n\
<div class=\"line\">    glTexCoord2f( x0, y0 ); glVertex2f( x0, y0 );   <span class=\"comment\">// 0</span></div>\n\
<div class=\"line\">    glTexCoord2f( x1, y1 ); glVertex2f( x1, y1 );   <span class=\"comment\">// 1</span></div>\n\
<div class=\"line\">    glTexCoord2f( x2, y2 ); glVertex2f( x2, y2 );   <span class=\"comment\">// 2</span></div>\n\
<div class=\"line\">    glTexCoord2f( x3, y3 ); glVertex2f( x3, y3 );   <span class=\"comment\">// 3</span></div>\n\
<div class=\"line\">    glEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                   </div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Load the texture data from the ptex file to an existing paint layer</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexPaintLayerImporter::LoadPtexTexture( PtexTexture     *pT, </div>\n\
<div class=\"line\">                                              TexturePool     *pTP, </div>\n\
<div class=\"line\">                                              <span class=\"keyword\">const</span> Mesh      *pMesh, </div>\n\
<div class=\"line\">                                              <a class=\"code\" href=\"#!/url=./cpp_ref/class_u_v_generator_node.html\">UVGeneratorNode</a> *pG )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> bDescriptorInitialized = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">    <span class=\"comment\">// map from the ptex formats to mudbox formats.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keyword\">enum</span> Image::Format aPtexFormats[4] = { Image::e8integer, Image::e16integer, </div>\n\
<div class=\"line\">                                                        Image::e16float,  Image::e32float };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iTileSize = pG-&gt;UVTileSize();  <span class=\"comment\">// This is usually 2048</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// bad things happen if we have gotten here and there are no texture coords on the mesh.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!pMesh-&gt;m_pTCs) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;This mesh has no PTEX UVs!\\n&quot;</span> ));</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This mesh has no PTEX UVs!&quot;</span>),  </div>\n\
<div class=\"line\">                                               <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!pG-&gt;<a name=\"a30\"></a>getMesh()-&gt;m_pTCs) {</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;This mesh has no PTEX UVs! (2)\\n&quot;</span> ));</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;HUDMessageShow( tr(<span class=\"stringliteral\">&quot;This mesh has no PTEX UVs (2)!&quot;</span>),  </div>\n\
<div class=\"line\">                                               <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_interface.html#a26e31204f799b1a1db85565fc5a98b99a6d1628d017e93eb59b9a74b0cdc9d904\">mudbox::Interface::HUDmsgFade</a> );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span>;            </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// just for curiosity, keep track of how much resampling we have done</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> unresampledQuads  = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resampledQuads    = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resampledSubFaces = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Find out how many texture tiles we have to process.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iUS = 0, iUE = 0, iVS = 0, iVE = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mf = 0; mf &lt; pMesh-&gt;FaceCount(); mf++ )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        UVGeneratorNode::DimData2 d = pG-&gt;<a name=\"a31\"></a>FaceUVArea( mf );</div>\n\
<div class=\"line\">        iUS = <a name=\"a32\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a33536fce33010513e0a87ec163ed29ff\">Min</a>( iUS, d[0] );</div>\n\
<div class=\"line\">        iUE = <a name=\"a33\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a990360af7f7250cdaec94844b139fa74\">Max</a>( iUE, d[0] + 1 );</div>\n\
<div class=\"line\">        iVS = <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a33536fce33010513e0a87ec163ed29ff\">Min</a>( iVS, d[1] );</div>\n\
<div class=\"line\">        iVE = <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a990360af7f7250cdaec94844b139fa74\">Max</a>( iVE, d[1] + 1 );</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> * swapUV = <span class=\"keyword\">new</span> <span class=\"keywordtype\">bool</span>[pMesh-&gt;FaceCount()];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mf = 0; mf &lt; pMesh-&gt;FaceCount(); mf++)</div>\n\
<div class=\"line\">        swapUV[mf] = !isUVRightHanded(*pMesh, mf);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Loop through the 2d grid of texture tiles.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> u = iUS; u &lt; iUE; u++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> = iVS; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> &lt; iVE; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">bool</span> quadResampling = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ( !bDescriptorInitialized )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                bDescriptorInitialized = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                pTP-&gt;SetDefaultTileDescriptor( TexturePool::TileDescriptor( iTileSize, iTileSize, aPtexFormats[pT-&gt;dataType()], 4, <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;ptx&quot;</span>), <a name=\"a34\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespace_qt.html#ae03fc486532da08d7b21f636fe547548a9eda5189bc72231852b49a068e5176a5\">Color::transparent</a> ) );</div>\n\
<div class=\"line\">            };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Create an image with the same format as the ptex file to avoid quality loss.</span></div>\n\
<div class=\"line\">            Instance&lt;Image&gt; i;</div>\n\
<div class=\"line\">            i-&gt;Create( iTileSize, iTileSize, 4, aPtexFormats[pT-&gt;dataType()], true );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// loop through the quads first....</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// Loop through all the faces of the mesh.</span></div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">            <span class=\"comment\">// loop through the ptex geometry faces, and handle the quads first...</span></div>\n\
<div class=\"line\">            <span class=\"comment\">// this loop will process only those quads where no resampling is needed.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> pf = 0; pf &lt; m_Importer-&gt;m_iFaceCount; pf++ )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> ( m_Importer-&gt;m_FaceMap[pf].m_NumEdges == 4 ) </div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mf  = m_Importer-&gt;m_FaceMap[pf].m_MBFaceID;      <span class=\"comment\">// xlate from ptex faceID to Mudbox FaceID</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ppf = m_Importer-&gt;m_FaceMap[pf].m_PTexSubfaceID; <span class=\"comment\">// xlate from ptex faceID to PTex subFaceID</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Check which tile the face belongs to, and if it is something else than the current one, skip it.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( pG-&gt;FaceUVArea( mf )[0] != u || pG-&gt;FaceUVArea( mf )[1] != <a name=\"a35\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// if the exponents are different, leave it for the second pass</span></div>\n\
<div class=\"line\">                    <span class=\"comment\">// which will handle triangles, n-gons and quads that need resampling</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( (pG-&gt;<a name=\"a36\"></a>FaceSizeExponent( mf )[swapUV[mf] ? 1 : 0] != pT-&gt;getFaceInfo( ppf ).res.ulog2) ||</div>\n\
<div class=\"line\">                         (pG-&gt;FaceSizeExponent( mf )[swapUV[mf] ? 0 : 1] != pT-&gt;getFaceInfo( ppf ).res.vlog2 ) ) {</div>\n\
<div class=\"line\">                        quadResampling = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a24f4fe4a32c8501c3cae26db72954a30\">MB_ASSERT</a>( pG-&gt;FaceSizeExponent( mf )[swapUV[mf] ? 1 : 0] == pT-&gt;getFaceInfo( ppf ).res.ulog2 );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a24f4fe4a32c8501c3cae26db72954a30\">MB_ASSERT</a>( pG-&gt;FaceSizeExponent( mf )[swapUV[mf] ? 0 : 1] == pT-&gt;getFaceInfo( ppf ).res.vlog2 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    ++unresampledQuads;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    UVGeneratorNode::DimData2 d = pG-&gt;<a name=\"a37\"></a>FaceUVPosition( mf );</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">                    <span class=\"comment\">// Prepare the surface data in a buffer.</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> iOrientation = pG-&gt;<a name=\"a38\"></a>FaceOrientation( mf );</div>\n\
<div class=\"line\">                    <span class=\"keywordtype\">void</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a> = NULL;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">switch</span> ( pT-&gt;dataType() )</div>\n\
<div class=\"line\">                    {</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> Ptex::dt_uint8:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;unsigned char, 255&gt;( pT, ppf, iOrientation, swapUV[mf] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> Ptex::dt_uint16:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;unsigned short, 65535&gt;( pT, ppf, iOrientation, swapUV[mf] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> Ptex::dt_half:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;half_, 1&gt;( pT, ppf, iOrientation, swapUV[mf] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">case</span> Ptex::dt_float:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;float, 1&gt;( pT, ppf, iOrientation, swapUV[mf] );</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Copy the buffer onto the image, and delete the buffer.</span></div>\n\
<div class=\"line\">                    i-&gt;setTile( d[0]%iTileSize, d[1]%iTileSize, pG-&gt;<a name=\"a39\"></a>FaceUVSize( mf )[0], pG-&gt;FaceUVSize( mf )[1], <a name=\"a40\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a> );</div>\n\
<div class=\"line\">                    free( p );</div>\n\
<div class=\"line\">                    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressAdd();</div>\n\
<div class=\"line\">                }  <span class=\"comment\">// endif -- handle unresampled quads </span></div>\n\
<div class=\"line\">            }  <span class=\"comment\">// endfor all the polys</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Fill the texture tile using the image we prepared.</span></div>\n\
<div class=\"line\">            Texture *pO = pTP-&gt;Tile( AxisAlignedBoundingBox( Vector( u, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, 0.5 ), Vector( u+1, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>+1, 0.5 ) ) );</div>\n\
<div class=\"line\">            pO-&gt;CopyFrom( i );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// now handle polys where the texture has to be resampled -- non quads, and </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// quads where the u or v size does not match that in the mudbox mesh</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!m_Importer-&gt;m_allQuads || quadResampling) </div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// make sure proxying does not interfere.</span></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> proxyLevel = pO-&gt;getProxyLevel();</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (proxyLevel != 0) </div>\n\
<div class=\"line\">                    pO-&gt;setProxyLevel(0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// make the texture tile the current render target</span></div>\n\
<div class=\"line\">                pO-&gt;SetAsRenderTarget();</div>\n\
<div class=\"line\">                glFlush();</div>\n\
<div class=\"line\">                <span class=\"comment\">// Set the viewport to fill this FBO completely with the texture 1:1</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"a41\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#aa76aa4edf14420db40cca96bec7eec8c\">MB_CHECK_GL_ERROR</a>;</div>\n\
<div class=\"line\">                glPushAttrib( GL_ENABLE_BIT | GL_TEXTURE_BIT );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"a42\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af15266b67de988f5ddf442bbbdd1b3fc\">glActiveTexture</a>( <a name=\"a43\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );</div>\n\
<div class=\"line\">                <a name=\"a44\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a21827cd469c04eaf79c6f64b24104ae6\">glClientActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                glBlendFunc( <a name=\"a45\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#aa92fae02a274fe856dad3362144f84dd\">GL_ONE</a>, <a name=\"a46\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a72086daeeb80e5eb5788f42a4eea050e\">GL_ZERO</a> );</div>\n\
<div class=\"line\">                glDisable( <a name=\"a47\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#aa290e8f9ee6f6862778355aa22bb0b13\">GL_BLEND</a> );</div>\n\
<div class=\"line\">                glDisable( <a name=\"a48\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4ccf1dc093190cc3798b9abea3655f98\">GL_DEPTH_TEST</a> );</div>\n\
<div class=\"line\">                glDisable( <a name=\"a49\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a8c4f153ed20a741aaae952650fec46f0\">GL_CULL_FACE</a> );</div>\n\
<div class=\"line\">                glDisable( <a name=\"a50\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#abe1c2e1876841bc483127fd45d7ca3b1\">GL_SCISSOR_TEST</a> );</div>\n\
<div class=\"line\">                glDisable( GL_LIGHTING );</div>\n\
<div class=\"line\">                glEnable( <a name=\"a51\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a> );</div>\n\
<div class=\"line\">                glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a name=\"a52\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a173a2b2453322dd8d613df6cf2e72480\">GL_TEXTURE_MIN_FILTER</a>, <a name=\"a53\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a name=\"a54\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#acb47a41b5963d44826f44b7370bccc26\">GL_TEXTURE_MAG_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a name=\"a55\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a23a0bc2909cc2f79fe7287aaa044e880\">GL_TEXTURE_WRAP_S</a>, <a name=\"a56\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\">                glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a name=\"a57\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ac307a4772e1d3decd5b6f36192113ab6\">GL_TEXTURE_WRAP_T</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// set up the gl matrices ---</span></div>\n\
<div class=\"line\">                glMatrixMode( <a name=\"a58\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a0da0630e92d17a649f7209148fe249af\">GL_TEXTURE</a> );</div>\n\
<div class=\"line\">                glPushMatrix();</div>\n\
<div class=\"line\">                glLoadIdentity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// make 1 = 1 texel in the render target.</span></div>\n\
<div class=\"line\">                glMatrixMode( GL_PROJECTION );</div>\n\
<div class=\"line\">                glPushMatrix();</div>\n\
<div class=\"line\">                glLoadIdentity();</div>\n\
<div class=\"line\">                glViewport( 0, 0, pO-&gt;Width(), pO-&gt;Height() );</div>\n\
<div class=\"line\">                gluOrtho2D(0, pO-&gt;Width(), 0, pO-&gt;Height() );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                glMatrixMode( GL_MODELVIEW );</div>\n\
<div class=\"line\">                glPushMatrix();</div>\n\
<div class=\"line\">                glLoadIdentity();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordtype\">bool</span> dirty = <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#af55790652af5f890c42ba6769a44d97f\">CGprofile</a> cgProfile = <a name=\"a59\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#ab20fd18cf7d726beaa9d7c36193c2a61\">cgGLGetLatestProfile</a>(<a name=\"a60\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#ad83071d7f7686bc85d28e22f1cb814afad69b6ec26c2fe834fae9a07f10be8104\">CG_GL_FRAGMENT</a>);</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#a45b79a74599d7b2d6074b0e505323ec0\">CGcontext</a> cgContext = <a name=\"a61\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#a0b6efcf2e6ec400396807af564143fac\">cgCreateContext</a>();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(JAMBUILD)</span></div>\n\
<div class=\"line\">                CgFile <a name=\"a62\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;Shaders/TexturePaint/quad_linear.bin&quot;</span>) );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">                CgFile <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;Shaders/Simple.cg&quot;</span>) );</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#a481cf2aa59c84e7e553c1a325d0064d4\">CGprogram</a> cgProgram = <a name=\"a63\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#a36a0c67a4d181b8f6b3a4b27478c72b5\">cgCreateProgram</a>(cgContext, <a name=\"a64\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#a58a98d9f87c901fb6636d2756c5a18e6a8a81af23c02a7a32e5dfd0ca6dd83dec\">CG_SOURCE</a>, &amp;<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>.Buffer()[0], cgProfile, NULL, NULL );</div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a24f4fe4a32c8501c3cae26db72954a30\">MB_ASSERT</a>( cgProgram );</div>\n\
<div class=\"line\">                <a name=\"a65\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a3fdd0cf6161407c251ff13b7b31b470e\">cgGLLoadProgram</a>( cgProgram );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#a7a6d8c8b46cb5efb94d4cb6393a28341\">CGparameter</a> cgV0, cgV1, cgV2, cgV3;</div>\n\
<div class=\"line\">                cgV0 = <a name=\"a66\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#aba225f7d8a697845c0054482492f6312\">cgGetNamedParameter</a>( cgProgram, <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;V0&quot;</span>) );</div>\n\
<div class=\"line\">                cgV1 = <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#aba225f7d8a697845c0054482492f6312\">cgGetNamedParameter</a>( cgProgram, <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;V1&quot;</span>) );</div>\n\
<div class=\"line\">                cgV2 = <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#aba225f7d8a697845c0054482492f6312\">cgGetNamedParameter</a>( cgProgram, <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;V3&quot;</span>) );</div>\n\
<div class=\"line\">                cgV3 = <a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#aba225f7d8a697845c0054482492f6312\">cgGetNamedParameter</a>( cgProgram, <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;V2&quot;</span>) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"a67\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a5a566921e13982a1add1b7874d0b9d5d\">cgGLBindProgram</a>( cgProgram );</div>\n\
<div class=\"line\">                <a name=\"a68\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a26c714fcbbf139071a5eb37ecffd4cbe\">cgGLEnableProfile</a>( cgProfile );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// loop through the ptex faces, and handle the triangles and n-gons and </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// (TODO) potentially any quads that need to be resampled.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">int</span> pf = 0; pf &lt; m_Importer-&gt;m_iFaceCount; pf++ )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> mf  = m_Importer-&gt;m_FaceMap[pf].m_MBFaceID;      <span class=\"comment\">// xlate from ptex faceID to Mudbox FaceID</span></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> ppf = m_Importer-&gt;m_FaceMap[pf].m_PTexSubfaceID; <span class=\"comment\">// xlate from ptex faceID to PTex subFaceID</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"comment\">// Check which tile the face belongs to, and if it is something else than the current one, skip it.</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( pG-&gt;FaceUVArea( mf )[0] != u || pG-&gt;FaceUVArea( mf )[1] != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> numEdges = m_Importer-&gt;m_FaceMap[pf].m_NumEdges;</div>\n\
<div class=\"line\">                    <span class=\"comment\">// Handle triangles and n-gons where n &lt; MAX_EDGE_COUNT....</span></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( numEdges != 4  &amp;&amp; </div>\n\
<div class=\"line\">                         numEdges &gt;  2  &amp;&amp;</div>\n\
<div class=\"line\">                         numEdges &lt;  MAX_EDGE_COUNT) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> jitterOffsets [3] = { -1.0f, 0.0f, 1.0f };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// collect the texture coordinates of the poly vertices</span></div>\n\
<div class=\"line\">                        TC TCs[MAX_EDGE_COUNT+1];</div>\n\
<div class=\"line\">                        TCs[0] = pMesh-&gt;TriangleVertexTC(mf, 0); <span class=\"comment\">// get the first triangle</span></div>\n\
<div class=\"line\">                        TCs[1] = pMesh-&gt;TriangleVertexTC(mf, 1); <span class=\"comment\">// of the n-gon</span></div>\n\
<div class=\"line\">                        TCs[2] = pMesh-&gt;TriangleVertexTC(mf, 2);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Remember; on import to Mudbox, all n-gons are tessellated </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// into fans of n-2 triangles</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 3; j &lt; numEdges; ++j) {     <span class=\"comment\">// and the last vert of each subsequent triangle</span></div>\n\
<div class=\"line\">                            TCs[j] = pMesh-&gt;TriangleVertexTC(mf + j - 2, 2);</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Convert them all to texel coordinates in the current texture tile</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; numEdges; ++j) {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> dd = 0.0f;</div>\n\
<div class=\"line\">                            TCs[j].u = modff(TCs[j].u, &amp;dd) * iTileSize;</div>\n\
<div class=\"line\">                            TCs[j].v = modff(TCs[j].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, &amp;dd) * iTileSize;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// draw the poly jitered in uv by +-1.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// this is to ensure thet ehe pixels around the edge of the </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// ngon are filled with colors from just inside the ngon -- </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// ensuring no &quot;seams&quot; in the texture display.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> ii = 0; ii &lt; 3; ++ii) {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> jj = 0; jj &lt; 3; ++jj) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                TC tempTCs[MAX_EDGE_COUNT+1];</div>\n\
<div class=\"line\">                                memcpy(tempTCs, TCs, <span class=\"keyword\">sizeof</span>(TCs));</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> kk = 0; kk &lt; numEdges; ++kk) {</div>\n\
<div class=\"line\">                                    tempTCs[kk].u += jitterOffsets[jj];</div>\n\
<div class=\"line\">                                    tempTCs[kk].v += jitterOffsets[ii];</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Compute the center of the poly, and the center of each edge.</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// which will give us the quads of the subfaces in target uv </span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// coordinates.</span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// Recall that the winding order in ptex is ccw. </span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// See http://ptex.us/adjdata.html for a nice diagram.</span></div>\n\
<div class=\"line\">                                fCoord polyCenter(0, 0);</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; numEdges; ++j) {</div>\n\
<div class=\"line\">                                    polyCenter.x += TCs[j].u;</div>\n\
<div class=\"line\">                                    polyCenter.y += TCs[j].v;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                polyCenter.x /= (float) numEdges;</div>\n\
<div class=\"line\">                                polyCenter.y /= (float) numEdges;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                tempTCs[numEdges] = tempTCs[0]; <span class=\"comment\">// Replicate the first vertex at the end...</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// now compute the edge centers</span></div>\n\
<div class=\"line\">                                fCoord edgeCenters[MAX_EDGE_COUNT];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; numEdges; ++j) {</div>\n\
<div class=\"line\">                                    edgeCenters[j].x = (tempTCs[j].u + tempTCs[j + 1].u) * 0.5<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>;</div>\n\
<div class=\"line\">                                    edgeCenters[j].y = (tempTCs[j].v + tempTCs[j + 1].v) * 0.5<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>;</div>\n\
<div class=\"line\">                                }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// remember; in ptex, each triangle/n-gon is catmull / clarke </span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// subdivided into n quads -- with ccw winding. These are </span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// called sub-faces in ptex nomenclature.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                <span class=\"comment\">// loop through the sub-faces, getting the texture from the </span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// ptex file for each sub-face and drawing it as a textured </span></div>\n\
<div class=\"line\">                                <span class=\"comment\">// quad into the target texture tile.</span></div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> subFace = 0; subFace &lt; numEdges; ++subFace) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>       fId   = ppf + subFace;</div>\n\
<div class=\"line\">                                    Ptex::FaceInfo  fInfo = pT-&gt;getFaceInfo(fId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"comment\">// Prepare the surface data from the ptex file in a buffer.</span></div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> iOrientation = 0;</div>\n\
<div class=\"line\">                                    <span class=\"keywordtype\">void</span> *p = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">switch</span> ( pT-&gt;dataType() )</div>\n\
<div class=\"line\">                                    {</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">case</span> Ptex::dt_uint8:</div>\n\
<div class=\"line\">                                            p = PrepareFaceBuffer&lt;unsigned char, 255&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">case</span> Ptex::dt_uint16:</div>\n\
<div class=\"line\">                                            p = PrepareFaceBuffer&lt;unsigned short, 65535&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">case</span> Ptex::dt_half:</div>\n\
<div class=\"line\">                                            p = PrepareFaceBuffer&lt;half_, 1&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                        <span class=\"keywordflow\">case</span> Ptex::dt_float:</div>\n\
<div class=\"line\">                                            p = PrepareFaceBuffer&lt;float, 1&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                            <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iUsize = 1u &lt;&lt; fInfo.res.ulog2; </div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iVsize = 1u &lt;&lt; fInfo.res.vlog2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    Instance&lt;Image&gt; i;</div>\n\
<div class=\"line\">                                    i-&gt;Create( iUsize, iVsize, 4, aPtexFormats[pT-&gt;dataType()], true );</div>\n\
<div class=\"line\">                                    <span class=\"comment\">// Copy the buffer onto the image, and delete the buffer.</span></div>\n\
<div class=\"line\">                                    i-&gt;setTile( 0, 0, iUsize, iVsize, p );</div>\n\
<div class=\"line\">                                    free( p );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"comment\">// put it into a texture (this will be the source)</span></div>\n\
<div class=\"line\">                                    Instance&lt;Texture&gt; <a name=\"a69\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a>;</div>\n\
<div class=\"line\">                                    t-&gt;Create(iUsize, iVsize, 4, aPtexFormats[pT-&gt;dataType()]);</div>\n\
<div class=\"line\">                                    t-&gt;CopyFrom(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af15266b67de988f5ddf442bbbdd1b3fc\">glActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );             </div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a21827cd469c04eaf79c6f64b24104ae6\">glClientActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );</div>\n\
<div class=\"line\">                                    glEnable( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    t-&gt;Activate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"comment\">// make sure the texture filtering is correct.</span></div>\n\
<div class=\"line\">                                    glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a173a2b2453322dd8d613df6cf2e72480\">GL_TEXTURE_MIN_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                                    glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#acb47a41b5963d44826f44b7370bccc26\">GL_TEXTURE_MAG_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                                    glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a23a0bc2909cc2f79fe7287aaa044e880\">GL_TEXTURE_WRAP_S</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\">                                    glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ac307a4772e1d3decd5b6f36192113ab6\">GL_TEXTURE_WRAP_T</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> lastIndex = (subFace == 0) ? numEdges-1 : subFace-1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <a name=\"a70\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV0, tempTCs[subFace] );</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV1, (<span class=\"keywordtype\">float</span> *)&amp;edgeCenters[subFace] );</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV2, (<span class=\"keywordtype\">float</span> *)&amp;polyCenter );</div>\n\
<div class=\"line\">                                    <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV3, (<span class=\"keywordtype\">float</span> *)&amp;edgeCenters[lastIndex] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                    <span class=\"comment\">// draw the textured quad (representing the subface) into the target texture.</span></div>\n\
<div class=\"line\">                                    drawQuad(tempTCs[subFace].u, tempTCs[subFace].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,                      <span class=\"comment\">// start with the corner of the poly</span></div>\n\
<div class=\"line\">                                             edgeCenters[subFace].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>, edgeCenters[subFace].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>,      <span class=\"comment\">// then the center of the edge ccw</span></div>\n\
<div class=\"line\">                                             polyCenter.x, polyCenter.y,                          <span class=\"comment\">// then the center of the poly</span></div>\n\
<div class=\"line\">                                             edgeCenters[lastIndex].x, edgeCenters[lastIndex].y); <span class=\"comment\">// finally the center of the edge cw</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                                } <span class=\"comment\">// end for each subface</span></div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// after drawing the jitered polys, draw it in precisely the right location.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Compute the center of the poly, and the center of each edge.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// which will give us the quads of the subfaces in target uv </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// coordinates.</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Recall that the winding order in ptex is ccw. </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// See http://ptex.us/adjdata.html for a nice diagram.</span></div>\n\
<div class=\"line\">                        fCoord polyCenter(0, 0);</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; numEdges; ++j) {</div>\n\
<div class=\"line\">                            polyCenter.x += TCs[j].u;</div>\n\
<div class=\"line\">                            polyCenter.y += TCs[j].v;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        polyCenter.x /= (float) numEdges;</div>\n\
<div class=\"line\">                        polyCenter.y /= (float) numEdges;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        TCs[numEdges] = TCs[0]; <span class=\"comment\">// Replicate the first vertex at the end...</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// now compute the edge centers</span></div>\n\
<div class=\"line\">                        fCoord edgeCenters[MAX_EDGE_COUNT];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; numEdges; ++j) {</div>\n\
<div class=\"line\">                            edgeCenters[j].x = (TCs[j].u + TCs[j + 1].u) * 0.5<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>;</div>\n\
<div class=\"line\">                            edgeCenters[j].y = (TCs[j].v + TCs[j + 1].v) * 0.5<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// remember; in ptex, each triangle/n-gon is catmull / clarke </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// subdivided into n quads -- with ccw winding. These are </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// called sub-faces in ptex nomenclature.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// loop through the sub-faces, getting the texture from the </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// ptex file for each sub-face and drawing it as a textured </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// quad into the target texture tile.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> subFace = 0; subFace &lt; numEdges; ++subFace) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>       fId   = ppf + subFace;</div>\n\
<div class=\"line\">                            Ptex::FaceInfo  fInfo = pT-&gt;getFaceInfo(fId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// Prepare the surface data from the ptex file in a buffer.</span></div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> iOrientation = 0;</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">void</span> *p = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">switch</span> ( pT-&gt;dataType() )</div>\n\
<div class=\"line\">                            {</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">case</span> Ptex::dt_uint8:</div>\n\
<div class=\"line\">                                    p = PrepareFaceBuffer&lt;unsigned char, 255&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">case</span> Ptex::dt_uint16:</div>\n\
<div class=\"line\">                                    p = PrepareFaceBuffer&lt;unsigned short, 65535&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">case</span> Ptex::dt_half:</div>\n\
<div class=\"line\">                                    p = PrepareFaceBuffer&lt;half_, 1&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">case</span> Ptex::dt_float:</div>\n\
<div class=\"line\">                                    p = PrepareFaceBuffer&lt;float, 1&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                    <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iUsize = 1u &lt;&lt; fInfo.res.ulog2; </div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iVsize = 1u &lt;&lt; fInfo.res.vlog2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            Instance&lt;Image&gt; i;</div>\n\
<div class=\"line\">                            i-&gt;Create( iUsize, iVsize, 4, aPtexFormats[pT-&gt;dataType()], true );</div>\n\
<div class=\"line\">                            <span class=\"comment\">// Copy the buffer onto the image, and delete the buffer.</span></div>\n\
<div class=\"line\">                            i-&gt;setTile( 0, 0, iUsize, iVsize, p );</div>\n\
<div class=\"line\">                            free( p );</div>\n\
<div class=\"line\">                                                                                                       </div>\n\
<div class=\"line\">                            <span class=\"comment\">// put it into a texture (this will be the source)</span></div>\n\
<div class=\"line\">                            Instance&lt;Texture&gt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a>;</div>\n\
<div class=\"line\">                            t-&gt;Create(iUsize, iVsize, 4, aPtexFormats[pT-&gt;dataType()]);</div>\n\
<div class=\"line\">                            t-&gt;CopyFrom(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af15266b67de988f5ddf442bbbdd1b3fc\">glActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );             </div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a21827cd469c04eaf79c6f64b24104ae6\">glClientActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );</div>\n\
<div class=\"line\">                            glEnable( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            t-&gt;Activate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// make sure the texture filtering is correct.</span></div>\n\
<div class=\"line\">                            glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a173a2b2453322dd8d613df6cf2e72480\">GL_TEXTURE_MIN_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                            glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#acb47a41b5963d44826f44b7370bccc26\">GL_TEXTURE_MAG_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                            glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a23a0bc2909cc2f79fe7287aaa044e880\">GL_TEXTURE_WRAP_S</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\">                            glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ac307a4772e1d3decd5b6f36192113ab6\">GL_TEXTURE_WRAP_T</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> lastIndex = (subFace == 0) ? numEdges-1 : subFace-1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV0, TCs[subFace] );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV1, (<span class=\"keywordtype\">float</span> *)&amp;edgeCenters[subFace] );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV2, (<span class=\"keywordtype\">float</span> *)&amp;polyCenter );</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV3, (<span class=\"keywordtype\">float</span> *)&amp;edgeCenters[lastIndex] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            <span class=\"comment\">// draw the textured quad (representing the subface) into the target texture.</span></div>\n\
<div class=\"line\">                            drawQuad(TCs[subFace].u, TCs[subFace].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,                      <span class=\"comment\">// start with the corner of the poly</span></div>\n\
<div class=\"line\">                                     edgeCenters[subFace].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>, edgeCenters[subFace].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>,      <span class=\"comment\">// then the center of the edge ccw</span></div>\n\
<div class=\"line\">                                     polyCenter.x, polyCenter.y,                          <span class=\"comment\">// then the center of the poly</span></div>\n\
<div class=\"line\">                                     edgeCenters[lastIndex].x, edgeCenters[lastIndex].y); <span class=\"comment\">// finally the center of the edge cw</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                            dirty = <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">                            ++resampledSubFaces;</div>\n\
<div class=\"line\">                            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressAdd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        } <span class=\"comment\">// end for each subface</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    } <span class=\"keywordflow\">else</span> <span class=\"comment\">// endif non quad poly.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( numEdges == 4 &amp;&amp; quadResampling ) {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// if the exponents are the same, it was done in the first pass above </span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// which handles quads that do not require resampling, so in that case</span></div>\n\
<div class=\"line\">                        <span class=\"comment\">// just skip this one -- it should have been processed above.</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> ( (pG-&gt;FaceSizeExponent( mf )[swapUV[mf] ? 1 : 0] == pT-&gt;getFaceInfo( ppf ).res.ulog2) &amp;&amp;</div>\n\
<div class=\"line\">                             (pG-&gt;FaceSizeExponent( mf )[swapUV[mf] ? 0 : 1] == pT-&gt;getFaceInfo( ppf ).res.vlog2 ) ) {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">continue</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        TC TCs[4];</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">if</span> (m_Importer-&gt;m_allQuads) {</div>\n\
<div class=\"line\">                            TCs[0] = pMesh-&gt;QuadVertexTC(mf, 0); </div>\n\
<div class=\"line\">                            TCs[1] = pMesh-&gt;QuadVertexTC(mf, 1); </div>\n\
<div class=\"line\">                            TCs[2] = pMesh-&gt;QuadVertexTC(mf, 2);</div>\n\
<div class=\"line\">                            TCs[3] = pMesh-&gt;QuadVertexTC(mf, 3);</div>\n\
<div class=\"line\">                        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                            <span class=\"comment\">// collect the texture coordinates of the poly vertices</span></div>\n\
<div class=\"line\">                            TCs[0] = pMesh-&gt;TriangleVertexTC(mf, 0); <span class=\"comment\">// get the first triangle</span></div>\n\
<div class=\"line\">                            TCs[1] = pMesh-&gt;TriangleVertexTC(mf, 1); <span class=\"comment\">// of the quad</span></div>\n\
<div class=\"line\">                            TCs[2] = pMesh-&gt;TriangleVertexTC(mf, 2);</div>\n\
<div class=\"line\">                            TCs[3] = pMesh-&gt;TriangleVertexTC(mf+1, 2); <span class=\"comment\">// and the last vertex of the second</span></div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Convert them all to texel coordinates in the current texture tile</span></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> j = 0; j &lt; 4; ++j) {</div>\n\
<div class=\"line\">                            <span class=\"keywordtype\">float</span> dd = 0.0f;</div>\n\
<div class=\"line\">                            TCs[j].u = modff(TCs[j].u, &amp;dd) * iTileSize;</div>\n\
<div class=\"line\">                            TCs[j].v = modff(TCs[j].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, &amp;dd) * iTileSize;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span>       fId   = ppf;</div>\n\
<div class=\"line\">                        Ptex::FaceInfo  fInfo = pT-&gt;getFaceInfo(fId);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// Prepare the surface data from the ptex file in a buffer.</span></div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> iOrientation = 0;</div>\n\
<div class=\"line\">                        <span class=\"keywordtype\">void</span> *p = NULL;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">switch</span> ( pT-&gt;dataType() )</div>\n\
<div class=\"line\">                        {</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">case</span> Ptex::dt_uint8:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;unsigned char, 255&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">case</span> Ptex::dt_uint16:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;unsigned short, 65535&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">case</span> Ptex::dt_half:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;half_, 1&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                            <span class=\"keywordflow\">case</span> Ptex::dt_float:</div>\n\
<div class=\"line\">                                p = PrepareFaceBuffer&lt;float, 1&gt;( pT, fId, iOrientation, false );</div>\n\
<div class=\"line\">                                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">                        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iUsize = 1u &lt;&lt; fInfo.res.ulog2; </div>\n\
<div class=\"line\">                        <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iVsize = 1u &lt;&lt; fInfo.res.vlog2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        Instance&lt;Image&gt; i;</div>\n\
<div class=\"line\">                        i-&gt;Create( iUsize, iVsize, 4, aPtexFormats[pT-&gt;dataType()], true );</div>\n\
<div class=\"line\">                        <span class=\"comment\">// Copy the buffer onto the image, and delete the buffer.</span></div>\n\
<div class=\"line\">                        i-&gt;setTile( 0, 0, iUsize, iVsize, p );</div>\n\
<div class=\"line\">                        free( p );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// put it in a texture</span></div>\n\
<div class=\"line\">                        Instance&lt;Texture&gt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a>;</div>\n\
<div class=\"line\">                        t-&gt;Create(iUsize, iVsize, 4, aPtexFormats[pT-&gt;dataType()]);</div>\n\
<div class=\"line\">                        t-&gt;CopyFrom(i);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af15266b67de988f5ddf442bbbdd1b3fc\">glActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );             </div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a21827cd469c04eaf79c6f64b24104ae6\">glClientActiveTexture</a>( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a16cc91096144fc7048b45e2add14915b\">GL_TEXTURE0</a> );</div>\n\
<div class=\"line\">                        glEnable( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        t-&gt;Activate();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// make sure the texture filtering is correct.</span></div>\n\
<div class=\"line\">                        glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a173a2b2453322dd8d613df6cf2e72480\">GL_TEXTURE_MIN_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                        glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#acb47a41b5963d44826f44b7370bccc26\">GL_TEXTURE_MAG_FILTER</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a4e682f218130b98b27a1e33fa7325080\">GL_LINEAR</a> );</div>\n\
<div class=\"line\">                        glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a23a0bc2909cc2f79fe7287aaa044e880\">GL_TEXTURE_WRAP_S</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\">                        glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ac307a4772e1d3decd5b6f36192113ab6\">GL_TEXTURE_WRAP_T</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ae90f81f48642444b4ba7fa5cacf40569\">GL_CLAMP_TO_EDGE</a> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <span class=\"comment\">// draw the textured quad (representing the subface) into the target texture.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV0, TCs[0] );</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV1, TCs[1] );</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV2, TCs[2] );</div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#a04969cc5835a5e846a13181aa8e97182\">cgGLSetParameter2fv</a>( cgV3, TCs[3] );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        drawQuad(TCs[0].u, TCs[0].<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, TCs[1].u, TCs[1].v, </div>\n\
<div class=\"line\">                                 TCs[2].u, TCs[2].v, TCs[3].u, TCs[3].v);          </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        dirty = <span class=\"keyword\">true</span>; </div>\n\
<div class=\"line\">                        ++resampledQuads;   <span class=\"comment\">// keep track of how many we did....</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressAdd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                    } <span class=\"comment\">// endif quad.</span></div>\n\
<div class=\"line\">                } <span class=\"comment\">// endfor all the polys</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                glFlush();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a name=\"a71\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_g_l_8h.html#afbf63baab60050650f15576b8161c689\">cgGLDisableProfile</a>( cgProfile );</div>\n\
<div class=\"line\">                <a name=\"a72\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/cg_8h.html#aac74f65897d67c949df16b85475dca16\">cgDestroyContext</a>( cgContext );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// restore the matrices</span></div>\n\
<div class=\"line\">                glMatrixMode( GL_MODELVIEW );</div>\n\
<div class=\"line\">                glPopMatrix();</div>\n\
<div class=\"line\">                glMatrixMode( GL_PROJECTION );</div>\n\
<div class=\"line\">                glPopMatrix();</div>\n\
<div class=\"line\">                glMatrixMode( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a0da0630e92d17a649f7209148fe249af\">GL_TEXTURE</a> );</div>\n\
<div class=\"line\">                glPopMatrix();</div>\n\
<div class=\"line\">                glMatrixMode( GL_MODELVIEW );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#a23a0bc2909cc2f79fe7287aaa044e880\">GL_TEXTURE_WRAP_S</a>, <a name=\"a73\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#aa402fcab9f814ff88b2b19ca2823a594\">GL_REPEAT</a> );</div>\n\
<div class=\"line\">                glTexParameteri( <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ad4de17abefa73fa2ef53379f73b734be\">GL_TEXTURE_2D</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#ac307a4772e1d3decd5b6f36192113ab6\">GL_TEXTURE_WRAP_T</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/qglfunctions_8h.html#aa402fcab9f814ff88b2b19ca2823a594\">GL_REPEAT</a> );</div>\n\
<div class=\"line\">                glPopAttrib();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#aa76aa4edf14420db40cca96bec7eec8c\">MB_CHECK_GL_ERROR</a>;</div>\n\
<div class=\"line\">                pO-&gt;RestoreRenderTarget();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"comment\">// it is very important to tell Mudbox&#39;s textureing system if </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// you have modified a texture when it is resident on the GPU. </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// Otherwise, those changes may be lost.</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (dirty) </div>\n\
<div class=\"line\">                    pO-&gt;AddDirtyTile(ImgTile(0, 0, iTileSize, iTileSize));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (proxyLevel != 0) </div>\n\
<div class=\"line\">                    pO-&gt;setProxyLevel(proxyLevel);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            } <span class=\"comment\">// endif handle resampled polys </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        } <span class=\"comment\">// end-For looping through uv tiles -- V component</span></div>\n\
<div class=\"line\">    } <span class=\"comment\">// end-For looping through uv tiles -- U component </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] swapUV;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import processed %1 quad faces with NO resampling. \\n&quot;</span>).arg(unresampledQuads));</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import processed %1 resampled / resized quad faces.\\n&quot;</span>).arg(resampledQuads));</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a>( <span class=\"stringliteral\">&quot;PTEX Import processed %1 resampled / resized sub-faces.\\n\\n&quot;</span>).arg(resampledSubFaces));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\">// The following function reads the color data from the ptex file, and prepares </span></div>\n\
<div class=\"line\"><span class=\"comment\">// a buffer. During the preparation it rotates the data to the desired direction, </span></div>\n\
<div class=\"line\"><span class=\"comment\">// and extends it (if necessary) to four channels.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> eFormat, const <span class=\"keywordtype\">int</span> iMax&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> *PtexPaintLayerImporter::PrepareFaceBuffer( PtexTexture  *pTexture, </div>\n\
<div class=\"line\">                                                 <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>  pTexFaceIndex, <span class=\"comment\">// ptex subface index</span></div>\n\
<div class=\"line\">                                                 <span class=\"keywordtype\">char</span>          iDirection, </div>\n\
<div class=\"line\">                                                 <span class=\"keywordtype\">bool</span>          bSwapUV )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (bSwapUV &amp;&amp; iDirection % 2)</div>\n\
<div class=\"line\">        iDirection = 4 - iDirection;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> NoPremultiply = -1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (NoPremultiply == -1) {</div>\n\
<div class=\"line\">        NoPremultiply = (<a name=\"a74\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>)(::getenv(<span class=\"stringliteral\">&quot;MUDBOX_NO_PTEX_PREMULTIPLY_ON_IMPORT&quot;</span>) != 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iChannelCount = (<span class=\"keywordtype\">unsigned</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>)pTexture-&gt;numChannels();</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iU = 1u &lt;&lt; pTexture-&gt;getFaceInfo( pTexFaceIndex ).res.ulog2; </div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iV = 1u &lt;&lt; pTexture-&gt;getFaceInfo( pTexFaceIndex ).res.vlog2;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    eFormat *pTmp = <span class=\"keyword\">new</span> eFormat[iU*iV*iChannelCount];</div>\n\
<div class=\"line\">    <span class=\"comment\">// First read the data from the ptex file into a temporary buffer.</span></div>\n\
<div class=\"line\">    pTexture-&gt;getData( pTexFaceIndex, pTmp, iU*iChannelCount*<span class=\"keyword\">sizeof</span>(eFormat) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    eFormat *pBuffer = (eFormat *)malloc(<span class=\"keyword\">sizeof</span>(eFormat) * 4 * iU * iV);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> fMax   = (float)iMax;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span> invMax = 1.0f / fMax; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Copy the content of the temporary buffer into the final one, and during </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the copy, extend it to four channels, and rotate if necessary.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a> &lt; iV; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>++ ) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a> &lt; iU; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// Calculate the position where the data should be written to, </span></div>\n\
<div class=\"line\">            <span class=\"comment\">// this depends on the orientation of the face.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> d = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">switch</span> ( iDirection )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 0:</div>\n\
<div class=\"line\">                d = bSwapUV ? 4*(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>*iV) : 4*(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>*iU);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 1:</div>\n\
<div class=\"line\">                d = bSwapUV ? 4*(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>+(iV-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>-1)*iU) : 4*(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>+(iU-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>-1)*iV);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 2:</div>\n\
<div class=\"line\">                d = bSwapUV ? 4*((iV-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>-1)+(iU-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>-1)*iV) : 4*((iU-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>-1)+(iV-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>-1)*iU);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">case</span> 3:</div>\n\
<div class=\"line\">                d = bSwapUV ? 4*((iU-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>-1)+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>*iU) : 4*((iV-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>-1)+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>*iV);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"comment\">// Copy the data which exist in the ptex file.</span></div>\n\
<div class=\"line\">            <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a> = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">while</span> ( c &lt; iChannelCount )</div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                pBuffer[d+<a name=\"a75\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>] = pTmp[iChannelCount*(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#af21ddfd4e51a5f5a4d8e60f8b9177b98\">y</a>*iU)+c];</div>\n\
<div class=\"line\">                c++;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> ((NoPremultiply == <span class=\"keyword\">false</span>) &amp;&amp; (iChannelCount == 4)) {</div>\n\
<div class=\"line\">                 <span class=\"comment\">// image/texture data in a ptex file is stored unpremultiplied, </span></div>\n\
<div class=\"line\">                 <span class=\"comment\">// but Mudbox always wants image and texture data premultiplied, </span></div>\n\
<div class=\"line\">                 <span class=\"comment\">// so we multiply the alpha into the rgb channels here.</span></div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a55d98ec4b6aa35ace9b91275e7ad847b\">alpha</a> = (float)pBuffer[d+3];</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (iMax != 1) {</div>\n\
<div class=\"line\">                    pBuffer[d+0] = (eFormat)((((<span class=\"keywordtype\">float</span>)pBuffer[d+0] * invMax) * (alpha * invMax)) * fMax);</div>\n\
<div class=\"line\">                    pBuffer[d+1] = (eFormat)((((<span class=\"keywordtype\">float</span>)pBuffer[d+1] * invMax) * (alpha * invMax)) * fMax);</div>\n\
<div class=\"line\">                    pBuffer[d+2] = (eFormat)((((<span class=\"keywordtype\">float</span>)pBuffer[d+2] * invMax) * (alpha * invMax)) * fMax);</div>\n\
<div class=\"line\">                } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                    pBuffer[d+0] = pBuffer[d+0] * <a name=\"a76\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a55d98ec4b6aa35ace9b91275e7ad847b\">alpha</a>;</div>\n\
<div class=\"line\">                    pBuffer[d+1] = pBuffer[d+1] * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a55d98ec4b6aa35ace9b91275e7ad847b\">alpha</a>; </div>\n\
<div class=\"line\">                    pBuffer[d+2] = pBuffer[d+2] * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a55d98ec4b6aa35ace9b91275e7ad847b\">alpha</a>; </div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">            {</div>\n\
<div class=\"line\">                <span class=\"comment\">// Fill the rest using default data (1 for the alpha channel, </span></div>\n\
<div class=\"line\">                <span class=\"comment\">// red channel for others).</span></div>\n\
<div class=\"line\">                <span class=\"keywordflow\">while</span> ( c &lt; 4 )</div>\n\
<div class=\"line\">                {</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( c == 3 )</div>\n\
<div class=\"line\">                        pBuffer[d+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>] = iMax;</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">                        pBuffer[d+<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>] = pBuffer[d];</div>\n\
<div class=\"line\">                    c++;</div>\n\
<div class=\"line\">                }</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> [] pTmp;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> pBuffer;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//------------------------------------------------------------------------------</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";