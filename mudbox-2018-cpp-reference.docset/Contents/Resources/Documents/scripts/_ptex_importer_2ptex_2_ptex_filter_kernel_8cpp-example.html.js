var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/PtexFilterKernel.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptex_filter_kernel_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/PtexFilterKernel.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/PtexFilterKernel.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexFilterContext.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexFilterKernel.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexHalf.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* Kernel iterator</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">   Allows moving through the kernel while moving through the data</span></div>\n\
<div class=\"line\"><span class=\"comment\">   following the in-memory order of the data.  Since the kernel may be</span></div>\n\
<div class=\"line\"><span class=\"comment\">   rotated with respect to the data, the iterator allows moving</span></div>\n\
<div class=\"line\"><span class=\"comment\">   through the kernel in arbitrary order which is accomplished by</span></div>\n\
<div class=\"line\"><span class=\"comment\">   having both a ustride and a vstride, either of which may be</span></div>\n\
<div class=\"line\"><span class=\"comment\">   positive or negative.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexFilterKernel::Iter : <span class=\"keyword\">public</span> Ptex {</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PtexFilterContext&amp; <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a0f62dc9cce4277dbcea531ad32cc48a2\">ctx</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9fb9363e7d23824a7603a288729cf1ec\">ustride</a>;        <span class=\"comment\">// distance between u samples</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a60703cfb6ea898d8d2bb036ef4c6b2d1\">vstride</a>;        <span class=\"comment\">// distance between v samples</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowskip;        <span class=\"comment\">// distance to skip at end of row</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* pos;        <span class=\"comment\">// current iterator pos</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* rowend;     <span class=\"comment\">// end of current iterator row</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;        <span class=\"comment\">// end of current iterator</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> dstart;         <span class=\"comment\">// offset to start of data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> drowskip;       <span class=\"comment\">// amount of data to skip at end of row</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Iter(<span class=\"keyword\">const</span> PtexFilterKernel&amp; k, <span class=\"keywordtype\">int</span> rotate, <span class=\"keyword\">const</span> PtexFilterContext&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>)</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a0f62dc9cce4277dbcea531ad32cc48a2\">ctx</a>(c)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resu = k.res.u(), resv = k.res.v();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (rotate) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 0: <span class=\"comment\">// no rotation</span></div>\n\
<div class=\"line\">        ustride = 1;</div>\n\
<div class=\"line\">        vstride = k.stride;</div>\n\
<div class=\"line\">        pos = k.start;</div>\n\
<div class=\"line\">        rowend = pos + k.uw;</div>\n\
<div class=\"line\">        end = pos + vstride * k.vw;</div>\n\
<div class=\"line\">        dstart = k.v * resu + k.u;</div>\n\
<div class=\"line\">        drowskip = resu - k.uw;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 1: <span class=\"comment\">// rotate kernel 90 deg cw relative to data</span></div>\n\
<div class=\"line\">        ustride = -k.stride;</div>\n\
<div class=\"line\">        vstride = 1;</div>\n\
<div class=\"line\">        pos = k.start + k.stride * (k.vw-1);</div>\n\
<div class=\"line\">        rowend = k.start - k.stride;</div>\n\
<div class=\"line\">        end = pos + k.uw;</div>\n\
<div class=\"line\">        dstart = k.u * resv + (resv - k.vw - k.v);</div>\n\
<div class=\"line\">        drowskip = resv - k.vw;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 2: <span class=\"comment\">// rotate kernel 180 deg cw relative to data</span></div>\n\
<div class=\"line\">        ustride = -1;</div>\n\
<div class=\"line\">        vstride = -k.stride;</div>\n\
<div class=\"line\">        pos = k.start + k.stride * (k.vw-1) + k.uw-1;</div>\n\
<div class=\"line\">        rowend = pos - k.uw;</div>\n\
<div class=\"line\">        end = pos + vstride * k.vw;</div>\n\
<div class=\"line\">        dstart = (resv - k.vw - k.v) * resu + (resu - k.uw - k.u);</div>\n\
<div class=\"line\">        drowskip = resu - k.uw;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 3: <span class=\"comment\">// rotate kernel 90 deg ccw relative to data</span></div>\n\
<div class=\"line\">        ustride = k.stride;</div>\n\
<div class=\"line\">        vstride = -1;</div>\n\
<div class=\"line\">        pos = k.start + k.uw-1;</div>\n\
<div class=\"line\">        rowend = pos + k.vw * k.stride;</div>\n\
<div class=\"line\">        end = pos - k.uw;</div>\n\
<div class=\"line\">        dstart = (resu - k.uw - k.u) * resv + k.v;</div>\n\
<div class=\"line\">        drowskip = resv - k.vw;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    rowskip = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(pos - rowend) + <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a60703cfb6ea898d8d2bb036ef4c6b2d1\">vstride</a>;</div>\n\
<div class=\"line\">    dstart = dstart * c.ntxchannels + c.firstchan;</div>\n\
<div class=\"line\">    drowskip *= c.ntxchannels;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> nextval()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> result = *pos; </div>\n\
<div class=\"line\">    pos += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9fb9363e7d23824a7603a288729cf1ec\">ustride</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> rowdone()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pos != rowend) <span class=\"keywordflow\">return</span> 0; </div>\n\
<div class=\"line\">    rowend += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a60703cfb6ea898d8d2bb036ef4c6b2d1\">vstride</a>;</div>\n\
<div class=\"line\">    pos += rowskip;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> done()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> pos == <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexFilterKernel::TileIter : <span class=\"keyword\">public</span> Ptex</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexFilterKernel kernels[4];  <span class=\"comment\">// kernel split over tiles</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tiles[4];         <span class=\"comment\">// tiles covered by kernel</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntiles;           <span class=\"comment\">// number of tiles</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a6468fe3bfff24d7d939eb21863b88268\">index</a>;            <span class=\"comment\">// current index</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    TileIter(<span class=\"keyword\">const</span> PtexFilterKernel&amp; k, <span class=\"keywordtype\">int</span> rotate, Res tileres)</div>\n\
<div class=\"line\">    : index(0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// find first tile (ignoring rotation for now)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileu = k.u &gt;&gt; tileres.ulog2; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tilev = k.v &gt;&gt; tileres.vlog2;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesu = k.res.ntilesu(tileres);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesv = k.res.ntilesv(tileres);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// find updated u, v within first tile</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> u = k.u - tileu * tileres.u();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> = k.v - tilev * tileres.v();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// set primary kernel entry and tile offsets</span></div>\n\
<div class=\"line\">    kernels[0].set(tileres, u, v, k.uw, k.vw, k.start, k.stride);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tilesu[4], tilesv[4];</div>\n\
<div class=\"line\">    tilesu[0] = tileu; tilesv[0] = tilev;</div>\n\
<div class=\"line\">    ntiles = 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// split kernel across tile boundaries into (up to) 4 pieces</span></div>\n\
<div class=\"line\">    PtexFilterKernel ku, kv, kc;</div>\n\
<div class=\"line\">    kernels[0].split(ku, kv, kc);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ku) {</div>\n\
<div class=\"line\">        kernels[ntiles] = ku;</div>\n\
<div class=\"line\">        tilesu[ntiles] = tileu + 1;</div>\n\
<div class=\"line\">        tilesv[ntiles] = tilev;</div>\n\
<div class=\"line\">        ntiles++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (kv) {</div>\n\
<div class=\"line\">        kernels[ntiles] = kv;</div>\n\
<div class=\"line\">        tilesu[ntiles] = tileu;</div>\n\
<div class=\"line\">        tilesv[ntiles] = tilev + 1;</div>\n\
<div class=\"line\">        ntiles++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (kc) {</div>\n\
<div class=\"line\">        kernels[ntiles] = kc;</div>\n\
<div class=\"line\">        tilesu[ntiles] = tileu + 1;</div>\n\
<div class=\"line\">        tilesv[ntiles] = tilev + 1;</div>\n\
<div class=\"line\">        ntiles++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// calculate (rotated) tile indices</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (rotate) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 0: <span class=\"comment\">// no rotation</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; ntiles; i++)</div>\n\
<div class=\"line\">        tiles[i] = tilesv[i] * ntilesu + tilesu[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 1: <span class=\"comment\">// rotate kernel 90 deg cw relative to data</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; ntiles; i++)</div>\n\
<div class=\"line\">        tiles[i] = tilesu[i] * ntilesv + (ntilesv - 1 - tilesv[i]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 2: <span class=\"comment\">// rotate kernel 180 deg cw relative to data</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; ntiles; i++)</div>\n\
<div class=\"line\">        tiles[i] = (ntilesv - 1 - tilesv[i]) * ntilesu</div>\n\
<div class=\"line\">            + (ntilesu - 1 - tilesu[i]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 3: <span class=\"comment\">// rotate kernel 90 deg ccw relative to data</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; ntiles; i++)</div>\n\
<div class=\"line\">        tiles[i] = (ntilesu - 1 - tilesu[i]) * ntilesv + tilesv[i];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tile() { <span class=\"keywordflow\">return</span> tiles[<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a6468fe3bfff24d7d939eb21863b88268\">index</a>]; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PtexFilterKernel&amp; kernel() { <span class=\"keywordflow\">return</span> kernels[<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a6468fe3bfff24d7d939eb21863b88268\">index</a>]; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> next() { <span class=\"keywordflow\">return</span> ++index &lt; ntiles; }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexFilterKernel::split(PtexFilterKernel&amp; ku, PtexFilterKernel&amp; kv,</div>\n\
<div class=\"line\">                 PtexFilterKernel&amp; kc) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// split off adjacent u, v, and corner pieces from kernel</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (u &lt; 0)                { splitL(ku); }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (u+uw &gt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>.u()) { splitR(ku); }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v &lt; 0)                { splitB(kv); <span class=\"keywordflow\">if</span> (ku) ku.splitB(kc); }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (v+vw &gt; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>.v()) { splitT(kv); <span class=\"keywordflow\">if</span> (ku) ku.splitT(kc); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// for corner, set eid to edge leading in to corner (counterclockwise)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (kc) kc.eid = ((ku.eid+1)%4 == kv.eid) ? ku.eid : kv.eid;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// fixed length accumulator: result[i] += val[i] * weight</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keywordtype\">int</span> n&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VecAccum {</div>\n\
<div class=\"line\">    VecAccum() {}</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> operator()(<span class=\"keywordtype\">float</span>* result, <span class=\"keyword\">const</span> T* val, <span class=\"keywordtype\">double</span> weight) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        *result = float(*result + *val * weight);</div>\n\
<div class=\"line\">        <span class=\"comment\">// use template to unroll loop</span></div>\n\
<div class=\"line\">        VecAccum&lt;T,<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>-1&gt;()(result+1, val+1, weight);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// loop terminator</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VecAccum&lt;T,0&gt; { <span class=\"keywordtype\">void</span> operator()(<span class=\"keywordtype\">float</span>*, <span class=\"keyword\">const</span> T*, <span class=\"keywordtype\">double</span>) {} };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// variable length accumulator: result[i] += val[i] * weight</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>VecAccumN {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> operator()(<span class=\"keywordtype\">float</span>* result, <span class=\"keyword\">const</span> T* val, <span class=\"keywordtype\">int</span> nchan, <span class=\"keywordtype\">double</span> weight) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nchan; i++) </div>\n\
<div class=\"line\">        result[i] = <span class=\"keywordtype\">float</span>(result[i] + val[i] * weight);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> ApplyConstT(<span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keyword\">const</span> PtexFilterContext&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, <span class=\"keywordtype\">double</span> weight)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    VecAccumN&lt;T&gt;()(c.result, ((T*)data)+c.firstchan, c.nchannels, weight);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> ApplyConst(<span class=\"keywordtype\">void</span>* data, <span class=\"keyword\">const</span> PtexFilterContext&amp; c, <span class=\"keywordtype\">double</span> weight)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (c.dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> Ptex::dt_uint8:   ApplyConstT&lt;uint8_t&gt; (<a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, weight); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> Ptex::dt_uint16:  ApplyConstT&lt;uint16_t&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, weight); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> Ptex::dt_half:    ApplyConstT&lt;PtexHalf&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, weight); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> Ptex::dt_float:   ApplyConstT&lt;float&gt;   (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, weight); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T, <span class=\"keywordtype\">int</span> n&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> ApplyT(<span class=\"keywordtype\">void</span>* data, PtexFilterKernel::Iter&amp; i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    T* ptr = ((T*)data) + i.dstart;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* result = i.ctx.result;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntxchan = i.ctx.ntxchannels;</div>\n\
<div class=\"line\">    VecAccum&lt;T,n&gt; accum;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">do</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">do</span> { </div>\n\
<div class=\"line\">        accum(result, ptr, i.nextval()); </div>\n\
<div class=\"line\">        ptr += ntxchan;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">while</span> (!i.rowdone());</div>\n\
<div class=\"line\">        ptr += i.drowskip;</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">while</span>(!i.done());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> ApplyT(<span class=\"keywordtype\">void</span>* data, PtexFilterKernel::Iter&amp; i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    T* ptr = ((T*)data) + i.dstart;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* result = i.ctx.result;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nchan = i.ctx.nchannels;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntxchan = i.ctx.ntxchannels;</div>\n\
<div class=\"line\">    VecAccumN&lt;T&gt; accum;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">do</span> {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">do</span> { </div>\n\
<div class=\"line\">        accum(result, ptr, nchan, i.nextval()); </div>\n\
<div class=\"line\">        ptr += ntxchan;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">while</span> (!i.rowdone());</div>\n\
<div class=\"line\">        ptr += i.drowskip;</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">while</span>(!i.done());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> Apply(<span class=\"keywordtype\">void</span>* data, PtexFilterKernel::Iter&amp; i)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>((i.ctx.nchannels-1)&lt;&lt;2|i.ctx.dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (0&lt;&lt;2|Ptex::dt_uint8):  ApplyT&lt;uint8_t, 1&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (0&lt;&lt;2|Ptex::dt_uint16): ApplyT&lt;uint16_t,1&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (0&lt;&lt;2|Ptex::dt_half):   ApplyT&lt;PtexHalf,1&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (0&lt;&lt;2|Ptex::dt_float):  ApplyT&lt;float,   1&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (1&lt;&lt;2|Ptex::dt_uint8):  ApplyT&lt;uint8_t, 2&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (1&lt;&lt;2|Ptex::dt_uint16): ApplyT&lt;uint16_t,2&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (1&lt;&lt;2|Ptex::dt_half):   ApplyT&lt;PtexHalf,2&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (1&lt;&lt;2|Ptex::dt_float):  ApplyT&lt;float,   2&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (2&lt;&lt;2|Ptex::dt_uint8):  ApplyT&lt;uint8_t, 3&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (2&lt;&lt;2|Ptex::dt_uint16): ApplyT&lt;uint16_t,3&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (2&lt;&lt;2|Ptex::dt_half):   ApplyT&lt;PtexHalf,3&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (2&lt;&lt;2|Ptex::dt_float):  ApplyT&lt;float,   3&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (3&lt;&lt;2|Ptex::dt_uint8):  ApplyT&lt;uint8_t, 4&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (3&lt;&lt;2|Ptex::dt_uint16): ApplyT&lt;uint16_t,4&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (3&lt;&lt;2|Ptex::dt_half):   ApplyT&lt;PtexHalf,4&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (3&lt;&lt;2|Ptex::dt_float):  ApplyT&lt;float,   4&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (i.ctx.dt) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Ptex::dt_uint8:  ApplyT&lt;uint8_t&gt; (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Ptex::dt_uint16: ApplyT&lt;uint16_t&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Ptex::dt_half:   ApplyT&lt;PtexHalf&gt;(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> Ptex::dt_float:  ApplyT&lt;float&gt;   (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, i); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexFilterKernel::apply(<span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">int</span> rotate, <span class=\"keyword\">const</span> PtexFilterContext&amp; c)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    PtexPtr&lt;PtexFaceData&gt; <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a> ( c.tx-&gt;getData(faceid, (rotate &amp; 1) ? <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>.swappeduv() : <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;isConstant()) {</div>\n\
<div class=\"line\">    ApplyConst(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;getData(), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, totalWeight());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;isTiled()) {</div>\n\
<div class=\"line\">    Res tres = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;tileRes();</div>\n\
<div class=\"line\">    TileIter tileiter(*<span class=\"keyword\">this</span>, rotate, (rotate &amp; 1) ? tres.swappeduv() : tres);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">do</span> {</div>\n\
<div class=\"line\">        PtexPtr&lt;PtexFaceData&gt; th ( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;getTile(tileiter.tile()) );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (th-&gt;isConstant()) {</div>\n\
<div class=\"line\">        ApplyConst(th-&gt;getData(), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>, tileiter.kernel().totalWeight());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        Iter iter(tileiter.kernel(), rotate, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>);</div>\n\
<div class=\"line\">        Apply(th-&gt;getData(), iter);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">while</span> (tileiter.next());</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    Iter iter(*<span class=\"keyword\">this</span>, rotate, c);</div>\n\
<div class=\"line\">    Apply(<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>-&gt;getData(), iter);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexFilterKernel::applyConst(<span class=\"keywordtype\">void</span>* data, <span class=\"keyword\">const</span> PtexFilterContext&amp; c, <span class=\"keywordtype\">double</span> weight)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    ApplyConst(data, c, weight);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";