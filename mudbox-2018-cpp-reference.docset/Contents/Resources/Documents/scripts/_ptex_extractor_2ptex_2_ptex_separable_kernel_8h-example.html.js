var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexExtractor/ptex/PtexSeparableKernel.h</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_extractor_2ptex_2_ptex_separable_kernel_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexExtractor/ptex/PtexSeparableKernel.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexExtractor/ptex/PtexSeparableKernel.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef PtexSeparableKernel_h</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexSeparableKernel_h</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;numeric&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;Ptexture.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexUtils.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Separable convolution kernel</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexSeparableKernel : <span class=\"keyword\">public</span> Ptex {</div>\n\
<div class=\"line\"> <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    Res <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>;            <span class=\"comment\">// resolution that kernel was built for</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> u, <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>;           <span class=\"comment\">// uv offset within face data</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> uw, vw;         <span class=\"comment\">// kernel width</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* ku;         <span class=\"comment\">// kernel weights in u</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* kv;         <span class=\"comment\">// kernel weights in v</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">int</span> kmax = 10; <span class=\"comment\">// max kernel width</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> kubuff[kmax];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> kvbuff[kmax];</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    PtexSeparableKernel()</div>\n\
<div class=\"line\">    : <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1dbb21208b9047cc8031ca9c840d3c2f\">res</a>(0), u(0), <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>(0), uw(0), vw(0), ku(kubuff), kv(kvbuff) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexSeparableKernel(<span class=\"keyword\">const</span> PtexSeparableKernel&amp; k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    set(k.res, k.u, k.v, k.uw, k.vw, k.ku, k.kv);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    PtexSeparableKernel&amp; operator= (<span class=\"keyword\">const</span> PtexSeparableKernel&amp; k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    set(k.res, k.u, k.v, k.uw, k.vw, k.ku, k.kv);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> set(Res resVal,</div>\n\
<div class=\"line\">         <span class=\"keywordtype\">int</span> uVal, <span class=\"keywordtype\">int</span> vVal,</div>\n\
<div class=\"line\">         <span class=\"keywordtype\">int</span> uwVal, <span class=\"keywordtype\">int</span> vwVal,</div>\n\
<div class=\"line\">         <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* kuVal, <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* kvVal)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    assert(uwVal &lt;= kmax &amp;&amp; vwVal &lt;= kmax);</div>\n\
<div class=\"line\">    res = resVal;</div>\n\
<div class=\"line\">    u = uVal;</div>\n\
<div class=\"line\">    v = vVal;</div>\n\
<div class=\"line\">    uw = uwVal;</div>\n\
<div class=\"line\">    vw = vwVal;</div>\n\
<div class=\"line\">    memcpy(kubuff, kuVal, <span class=\"keyword\">sizeof</span>(*ku)*uw);</div>\n\
<div class=\"line\">    memcpy(kvbuff, kvVal, <span class=\"keyword\">sizeof</span>(*kv)*vw);</div>\n\
<div class=\"line\">    ku = kubuff;</div>\n\
<div class=\"line\">    kv = kvbuff;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> stripZeros()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (ku[0] == 0) { ku++; u++; uw--; }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (ku[uw-1] == 0) { uw--; }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (kv[0] == 0) { kv++; v++; vw--; }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (kv[vw-1] == 0) { vw--; }</div>\n\
<div class=\"line\">    assert(uw &gt; 0 &amp;&amp; vw &gt; 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> weight()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> accumulate(ku, uw) * accumulate(kv, vw);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> mergeL(BorderMode <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1e71d9c196e4683cc06c4b54d53f7ef5\">mode</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = -u;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mode != m_black)</div>\n\
<div class=\"line\">        ku[<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>] += accumulate(ku, w);</div>\n\
<div class=\"line\">    ku += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    uw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    u = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> mergeR(BorderMode mode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = uw + u - res.u();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* kp = ku + uw - <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mode != m_black)</div>\n\
<div class=\"line\">        kp[-1] += accumulate(kp, w);</div>\n\
<div class=\"line\">    uw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> mergeB(BorderMode mode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = -<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mode != m_black)</div>\n\
<div class=\"line\">        kv[<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>] += accumulate(kv, w);</div>\n\
<div class=\"line\">    kv += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    vw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    v = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> mergeT(BorderMode mode)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = vw + v - res.v();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* kp = kv + vw - <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mode != m_black)</div>\n\
<div class=\"line\">        kp[-1] += accumulate(kp, w);</div>\n\
<div class=\"line\">    vw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> splitL(PtexSeparableKernel&amp; k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// split off left piece of width w into k</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = -u;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (w &lt; uw) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// normal case - split off a portion</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    res  u          v  uw vw  ku  kv</span></div>\n\
<div class=\"line\">        k.set(res, res.u()-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>, vw, ku, kv);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// update local</span></div>\n\
<div class=\"line\">        u = 0;</div>\n\
<div class=\"line\">        uw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">        ku += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// entire kernel is split off</span></div>\n\
<div class=\"line\">        k = *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        k.u += res.u();</div>\n\
<div class=\"line\">        u = 0; uw = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> splitR(PtexSeparableKernel&amp; k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// split off right piece of width w into k</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = u + uw - res.u();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (w &lt; uw) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// normal case - split off a portion</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    res  u  v  uw vw  ku           kv</span></div>\n\
<div class=\"line\">        k.set(res, 0, v, w, vw, ku + uw - w, kv);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// update local</span></div>\n\
<div class=\"line\">        uw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// entire kernel is split off</span></div>\n\
<div class=\"line\">        k = *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        k.u -= res.u();</div>\n\
<div class=\"line\">        u = 0; uw = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> splitB(PtexSeparableKernel&amp; k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// split off bottom piece of width w into k</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = -<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (w &lt; vw) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// normal case - split off a portion</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    res  u  v          uw vw  ku  kv</span></div>\n\
<div class=\"line\">        k.set(res, u, res.v()-<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>, uw, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>, ku, kv);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// update local</span></div>\n\
<div class=\"line\">        v = 0;</div>\n\
<div class=\"line\">        vw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">        kv += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// entire kernel is split off</span></div>\n\
<div class=\"line\">        k = *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        k.v += res.v();</div>\n\
<div class=\"line\">        v = 0; vw = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> splitT(PtexSeparableKernel&amp; k)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// split off top piece of width w into k</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = v + vw - res.v();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (w &lt; vw) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// normal case - split off a portion</span></div>\n\
<div class=\"line\">        <span class=\"comment\">//    res  u  v  uw vw  ku  kv</span></div>\n\
<div class=\"line\">        k.set(res, u, 0, uw, w, ku, kv + vw - w);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// update local</span></div>\n\
<div class=\"line\">        vw -= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// entire kernel is split off</span></div>\n\
<div class=\"line\">        k = *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        k.v -= res.v();</div>\n\
<div class=\"line\">        v = 0; vw = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> flipU()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    u = res.u() - u - uw;</div>\n\
<div class=\"line\">    std::reverse(ku, ku+uw);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> flipV()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    v = res.v() - v - vw;</div>\n\
<div class=\"line\">    std::reverse(kv, kv+vw);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> swapUV()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    res.swapuv();</div>\n\
<div class=\"line\">    <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacestd.html#a48315615ae44e23b2308833bd7116ba5\">std::swap</a>(u, v);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacestd.html#a48315615ae44e23b2308833bd7116ba5\">std::swap</a>(uw, vw);</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacestd.html#a48315615ae44e23b2308833bd7116ba5\">std::swap</a>(ku, kv);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> rotate(<span class=\"keywordtype\">int</span> rot)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// rotate kernel &#39;rot&#39; steps ccw</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (rot &amp; 3) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>: <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 1: flipU(); swapUV(); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 2: flipU(); flipV(); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> 3: flipV(); swapUV(); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> adjustMainToSubface(<span class=\"keywordtype\">int</span> eid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// to adjust the kernel for the subface, we must adjust the res down and offset the uv coords</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// however, if the res is already zero, we must upres the kernel first</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res.ulog2 == 0) upresU();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res.vlog2 == 0) upresV();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res.ulog2 &gt; 0) res.ulog2--;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res.vlog2 &gt; 0) res.vlog2--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// offset uv coords and determine whether target subface is the primary one</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> primary = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> resu = res.u(), resv = res.v();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (eid&amp;3) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_bottom:</div>\n\
<div class=\"line\">        primary = (u &lt; resu);</div>\n\
<div class=\"line\">        v -= resv;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!primary) u -= resu;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_right:</div>\n\
<div class=\"line\">        primary = (v &lt; resv);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!primary) v -= resv;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_top:</div>\n\
<div class=\"line\">        primary = (u &gt;= resu);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (primary) u -= resu;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_left:</div>\n\
<div class=\"line\">        primary = (v &gt;= resv);</div>\n\
<div class=\"line\">        u -= resu;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (primary) v -= resv;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> primary;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> adjustSubfaceToMain(<span class=\"keywordtype\">int</span> eid)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (eid&amp;3) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_bottom: v += res.v(); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_right:  <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_top:    u += res.u(); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> e_left:   u += res.u(); v += res.v(); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    res.ulog2++; res.vlog2++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> downresU()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a> = ku;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a> = ku;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// skip odd leading sample (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (u &amp; 1) {</div>\n\
<div class=\"line\">        dst++;</div>\n\
<div class=\"line\">        src++;</div>\n\
<div class=\"line\">        uw--;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// combine even pairs</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = uw/2; i &gt; 0; i--) {</div>\n\
<div class=\"line\">        *dst++ = src[0] + src[1];</div>\n\
<div class=\"line\">        src += 2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy odd trailing sample (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (uw &amp; 1) {</div>\n\
<div class=\"line\">        *dst++ = *src++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// update state</span></div>\n\
<div class=\"line\">    u /= 2;</div>\n\
<div class=\"line\">    uw = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(dst - ku);</div>\n\
<div class=\"line\">    res.ulog2--;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> downresV()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a> = kv;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a> = kv;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// skip odd leading sample (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (v &amp; 1) {</div>\n\
<div class=\"line\">        dst++;</div>\n\
<div class=\"line\">        src++;</div>\n\
<div class=\"line\">        vw--;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// combine even pairs</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = vw/2; i &gt; 0; i--) {</div>\n\
<div class=\"line\">        *dst++ = src[0] + src[1];</div>\n\
<div class=\"line\">        src += 2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// copy odd trailing sample (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (vw &amp; 1) {</div>\n\
<div class=\"line\">        *dst++ = *src++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// update state</span></div>\n\
<div class=\"line\">    v /= 2;</div>\n\
<div class=\"line\">    vw = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(dst - kv);</div>\n\
<div class=\"line\">    res.vlog2--;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> upresU()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a> = ku + uw-1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a> = ku + uw*2-2;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = uw; i &gt; 0; i--) {</div>\n\
<div class=\"line\">        dst[0] = dst[1] = *src-- / 2;</div>\n\
<div class=\"line\">        dst -=2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    uw *= 2;</div>\n\
<div class=\"line\">    u *= 2;</div>\n\
<div class=\"line\">    res.ulog2++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> upresV()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a> = kv + vw-1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a> = kv + vw*2-2;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = vw; i &gt; 0; i--) {</div>\n\
<div class=\"line\">        dst[0] = dst[1] = *src-- / 2;</div>\n\
<div class=\"line\">        dst -=2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    vw *= 2;</div>\n\
<div class=\"line\">    v *= 2;</div>\n\
<div class=\"line\">    res.vlog2++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> makeSymmetric()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    assert(u == 0 &amp;&amp; v == 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// downres higher-res dimension until equal</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (res.ulog2 &gt; res.vlog2) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">do</span> { downresU(); } <span class=\"keywordflow\">while</span>(res.ulog2 &gt; res.vlog2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (res.vlog2 &gt; res.ulog2) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">do</span> { downresV(); } <span class=\"keywordflow\">while</span> (res.vlog2 &gt; res.ulog2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// check initial weight so we can preserve overall weight</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> initialWeight = weight();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// truncate excess samples in longer dimension</span></div>\n\
<div class=\"line\">    uw = vw = PtexUtils::min(uw, vw);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// combine corresponding u and v samples</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> newWeight = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; uw; i++) {</div>\n\
<div class=\"line\">        ku[i] += kv[i];</div>\n\
<div class=\"line\">        newWeight += ku[i];</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compensate for weight change by scaling v weights</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a> = newWeight == 0 ? 1.0 : initialWeight / (newWeight * newWeight);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; uw; i++) kv[i] = ku[i] * scale;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> apply(<span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, DataType dt, <span class=\"keywordtype\">int</span> nChan, <span class=\"keywordtype\">int</span> nTxChan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// dispatch specialized apply function</span></div>\n\
<div class=\"line\">    ApplyFn fn = applyFunctions[(nChan!=nTxChan)*20 + ((<span class=\"keywordtype\">unsigned</span>)nChan&lt;=4)*nChan*4 + dt];</div>\n\
<div class=\"line\">    fn(*<span class=\"keyword\">this</span>, dst, data, nChan, nTxChan);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> applyConst(<span class=\"keywordtype\">double</span>* dst, <span class=\"keywordtype\">void</span>* data, DataType dt, <span class=\"keywordtype\">int</span> nChan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    PtexUtils::applyConst(weight(), dst, data, dt, nChan);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"> <span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3db05964a3cc4410f35b7ea2b7eb850d\">void</a> (*ApplyFn)(PtexSeparableKernel&amp; k, <span class=\"keywordtype\">double</span>* <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>, <span class=\"keywordtype\">void</span>* <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> nChan, <span class=\"keywordtype\">int</span> nTxChan);</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3db05964a3cc4410f35b7ea2b7eb850d\">void</a> (*ApplyConstFn)(<span class=\"keywordtype\">double</span> weight, <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>, <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> nChan);</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> ApplyFn applyFunctions[40];</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> ApplyConstFn applyConstFunctions[20];</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> accumulate(<span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> result = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span>* e = p + n; p != e; p++) result += *p;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> result;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";