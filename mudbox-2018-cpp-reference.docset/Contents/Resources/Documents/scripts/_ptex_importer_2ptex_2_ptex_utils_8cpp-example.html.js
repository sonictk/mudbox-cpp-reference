var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/PtexUtils.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptex_utils_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/PtexUtils.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/PtexUtils.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;algorithm&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;vector&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexHalf.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexUtils.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* Ptex::MeshTypeName(MeshType mt)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* names[] = { <span class=\"stringliteral\">&quot;triangle&quot;</span>, <span class=\"stringliteral\">&quot;quad&quot;</span> };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mt &lt; 0 || mt &gt;= <span class=\"keywordtype\">int</span>(<span class=\"keyword\">sizeof</span>(names)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;(invalid mesh type)&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names[mt];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* Ptex::DataTypeName(DataType dt)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* names[] = { <span class=\"stringliteral\">&quot;uint8&quot;</span>, <span class=\"stringliteral\">&quot;uint16&quot;</span>, <span class=\"stringliteral\">&quot;float16&quot;</span>, <span class=\"stringliteral\">&quot;float32&quot;</span> };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (dt &lt; 0 || dt &gt;= <span class=\"keywordtype\">int</span>(<span class=\"keyword\">sizeof</span>(names)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;(invalid data type)&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names[dt];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* Ptex::BorderModeName(BorderMode m)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* names[] = { <span class=\"stringliteral\">&quot;clamp&quot;</span>, <span class=\"stringliteral\">&quot;black&quot;</span>, <span class=\"stringliteral\">&quot;periodic&quot;</span> };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (m &lt; 0 || m &gt;= <span class=\"keywordtype\">int</span>(<span class=\"keyword\">sizeof</span>(names)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;(invalid border mode)&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names[m];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* Ptex::EdgeIdName(EdgeId eid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* names[] = { <span class=\"stringliteral\">&quot;bottom&quot;</span>, <span class=\"stringliteral\">&quot;right&quot;</span>, <span class=\"stringliteral\">&quot;top&quot;</span>, <span class=\"stringliteral\">&quot;left&quot;</span> };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (eid &lt; 0 || eid &gt;= <span class=\"keywordtype\">int</span>(<span class=\"keyword\">sizeof</span>(names)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;(invalid edge id)&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names[eid];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* Ptex::MetaDataTypeName(MetaDataType mdt)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* names[] = { <span class=\"stringliteral\">&quot;string&quot;</span>, <span class=\"stringliteral\">&quot;int8&quot;</span>, <span class=\"stringliteral\">&quot;int16&quot;</span>, <span class=\"stringliteral\">&quot;int32&quot;</span>, <span class=\"stringliteral\">&quot;float&quot;</span>, <span class=\"stringliteral\">&quot;double&quot;</span> };</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (mdt &lt; 0 || mdt &gt;= <span class=\"keywordtype\">int</span>(<span class=\"keyword\">sizeof</span>(names)/<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*)))</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"stringliteral\">&quot;(invalid meta data type)&quot;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> names[mdt];</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> DST, <span class=\"keyword\">typename</span> SRC&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> ConvertArrayClamped(DST* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>, SRC* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a>, <span class=\"keywordtype\">int</span> numChannels, <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a>, <span class=\"keywordtype\">double</span> round=0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numChannels; i++)</div>\n\
<div class=\"line\">        dst[i] = DST(<a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(src[i], 0.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 1.0<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>) * scale + round);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> DST, <span class=\"keyword\">typename</span> SRC&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> ConvertArray(DST* dst, SRC* src, <span class=\"keywordtype\">int</span> numChannels, <span class=\"keywordtype\">double</span> scale, <span class=\"keywordtype\">double</span> round=0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; numChannels; i++) dst[i] = DST(src[i] * scale + round);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Ptex::ConvertToFloat(<span class=\"keywordtype\">float</span>* dst, <span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, Ptex::DataType dt, <span class=\"keywordtype\">int</span> numChannels)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:  ConvertArray(dst, (uint8_t*)src,  numChannels, 1/255.0); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16: ConvertArray(dst, (uint16_t*)src, numChannels, 1/65535.0); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:   ConvertArray(dst, (PtexHalf*)src, numChannels, 1.0); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:  memcpy(dst, src, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)*numChannels); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> Ptex::ConvertFromFloat(<span class=\"keywordtype\">void</span>* dst, <span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>* src, Ptex::DataType dt, <span class=\"keywordtype\">int</span> numChannels)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:  ConvertArrayClamped((uint8_t*)dst,  src, numChannels, 255.0, 0.5); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16: ConvertArrayClamped((uint16_t*)dst, src, numChannels, 65535.0, 0.5); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:   ConvertArray((PtexHalf*)dst, src, numChannels, 1.0); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:  memcpy(dst, src, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>)*numChannels); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexUtils::isConstant(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>, <span class=\"keywordtype\">int</span> ures, <span class=\"keywordtype\">int</span> vres,</div>\n\
<div class=\"line\">               <span class=\"keywordtype\">int</span> pixelSize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = pixelSize * ures;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a> = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*) data + stride;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compare each row with the first</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 1; i &lt; vres; i++, p += <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9d21c1b0530d07b637b5b71b969d7921\">stride</a>)</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (0 != memcmp(data, p, rowlen)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// make sure first row is constant</span></div>\n\
<div class=\"line\">    p = (<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*) data + pixelSize;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 1; i &lt; ures; i++, p += pixelSize)</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (0 != memcmp(data, p, pixelSize)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> interleave(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">               T* dst, <span class=\"keywordtype\">int</span> dstride, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    dstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"comment\">// for each channel</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (T* dstend = dst + nchan; dst != dstend; dst++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// for each row</span></div>\n\
<div class=\"line\">        T* drow = <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a92034251bfd455d524a9b5610cddba00\">dst</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = src + sstride*vw; src != rowend;</div>\n\
<div class=\"line\">         src += sstride, drow += dstride) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// copy each pixel across the row</span></div>\n\
<div class=\"line\">        T* dp = drow;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* sp = src, * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = sp + uw; sp != <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; dp += nchan)</div>\n\
<div class=\"line\">            *dp = *sp++;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::interleave(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">               <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::interleave((<span class=\"keyword\">const</span> uint8_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (uint8_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::interleave((<span class=\"keyword\">const</span> uint16_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (uint16_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::interleave((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (<span class=\"keywordtype\">float</span>*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> deinterleave(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">                 T* dst, <span class=\"keywordtype\">int</span> dstride, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    dstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"comment\">// for each channel</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* srcend = src + nchan; src != srcend; src++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// for each row</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> T* srow = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a72e0fdf0f845ded60b1fada9e9195cd7\">src</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = srow + sstride*vw; srow != rowend;</div>\n\
<div class=\"line\">         srow += sstride, dst += dstride) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// copy each pixel across the row</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> T* sp = srow;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (T* dp = dst, * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = dp + uw; dp != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; sp += nchan)</div>\n\
<div class=\"line\">            *dp++ = *sp;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::deinterleave(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">                 <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::deinterleave((<span class=\"keyword\">const</span> uint8_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                    (uint8_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::deinterleave((<span class=\"keyword\">const</span> uint16_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                    (uint16_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::deinterleave((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                    (<span class=\"keywordtype\">float</span>*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> encodeDifference(T* data, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    size /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    T* p = (T*) data, * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = p + size, tmp, prev = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (p != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>) { tmp = prev; prev = *<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a>; *p++ -= tmp; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::encodeDifference(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>, DataType dt)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:  ::encodeDifference((uint8_t*) data, size); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16: ::encodeDifference((uint16_t*) data, size); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>: <span class=\"keywordflow\">break</span>; <span class=\"comment\">// skip other types</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> decodeDifference(T* data, <span class=\"keywordtype\">int</span> size)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    size /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    T* p = (T*) data, * <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = p + size, prev = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (p != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>) { *p += prev; prev = *p++; }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::decodeDifference(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> size, DataType dt)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:  ::decodeDifference((uint8_t*) data, size); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16: ::decodeDifference((uint16_t*) data, size); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">default</span>: <span class=\"keywordflow\">break</span>; <span class=\"comment\">// skip other types</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> reduce(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">               T* dst, <span class=\"keywordtype\">int</span> dstride, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    dstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = uw*nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> srowskip = 2*sstride - rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> drowskip = dstride - rowlen/2;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = src + vw*sstride; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; </div>\n\
<div class=\"line\">         src += srowskip, dst += drowskip)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = src + rowlen; src != rowend; src += nchan)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* pixend = src+nchan; src != pixend; src++)</div>\n\
<div class=\"line\">            *dst++ = T(0.25 * (src[0] + src[nchan] +</div>\n\
<div class=\"line\">                       src[sstride] + src[sstride+nchan]));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::reduce(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw,</div>\n\
<div class=\"line\">               <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::reduce((<span class=\"keyword\">const</span> uint8_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (uint8_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:    ::reduce((<span class=\"keyword\">const</span> PtexHalf*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (PtexHalf*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::reduce((<span class=\"keyword\">const</span> uint16_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (uint16_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::reduce((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                  (<span class=\"keywordtype\">float</span>*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> reduceu(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">            T* dst, <span class=\"keywordtype\">int</span> dstride, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    dstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = uw*nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> srowskip = sstride - rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> drowskip = dstride - rowlen/2;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = src + vw*sstride; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; </div>\n\
<div class=\"line\">         src += srowskip, dst += drowskip)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = src + rowlen; src != rowend; src += nchan)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* pixend = src+nchan; src != pixend; src++)</div>\n\
<div class=\"line\">            *dst++ = T(0.5 * (src[0] + src[nchan]));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::reduceu(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::reduceu((<span class=\"keyword\">const</span> uint8_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (uint8_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:    ::reduceu((<span class=\"keyword\">const</span> PtexHalf*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (PtexHalf*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::reduceu((<span class=\"keyword\">const</span> uint16_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (uint16_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::reduceu((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (<span class=\"keywordtype\">float</span>*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> reducev(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">            T* dst, <span class=\"keywordtype\">int</span> dstride, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    dstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = uw*nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> srowskip = 2*sstride - rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> drowskip = dstride - rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = src + vw*sstride; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; </div>\n\
<div class=\"line\">         src += srowskip, dst += drowskip)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = src + rowlen; src != rowend; src++)</div>\n\
<div class=\"line\">        *dst++ = T(0.5 * (src[0] + src[sstride]));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::reducev(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::reducev((<span class=\"keyword\">const</span> uint8_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (uint8_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:    ::reducev((<span class=\"keyword\">const</span> PtexHalf*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (PtexHalf*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::reducev((<span class=\"keyword\">const</span> uint16_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (uint16_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::reducev((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (<span class=\"keywordtype\">float</span>*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// generate a reduction of a packed-triangle texture</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// note: this method won&#39;t work for tiled textures</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> reduceTri(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a>, <span class=\"keywordtype\">int</span> <span class=\"comment\">/*vw*/</span>, </div>\n\
<div class=\"line\">              T* dst, <span class=\"keywordtype\">int</span> dstride, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    dstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = w*nchan;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> T* src2 = src + (w-1) * sstride + rowlen - nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> srowinc2 = -2*sstride - nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> srowskip = 2*sstride - rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> srowskip2 = w*sstride - 2 * nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> drowskip = dstride - rowlen/2;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = src + w*sstride; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; </div>\n\
<div class=\"line\">         src += srowskip, src2 += srowskip2, dst += drowskip)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = src + rowlen; src != rowend; src += nchan, src2 += srowinc2)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* pixend = src+nchan; src != pixend; src++, src2++)</div>\n\
<div class=\"line\">            *dst++ = T(0.25 * (src[0] + src[nchan] + src[sstride] + src2[0]));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::reduceTri(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> w, <span class=\"keywordtype\">int</span> <span class=\"comment\">/*vw*/</span>,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::reduceTri((<span class=\"keyword\">const</span> uint8_t*) src, sstride, w, 0, </div>\n\
<div class=\"line\">                 (uint8_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:    ::reduceTri((<span class=\"keyword\">const</span> PtexHalf*) src, sstride, w, 0, </div>\n\
<div class=\"line\">                 (PtexHalf*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::reduceTri((<span class=\"keyword\">const</span> uint16_t*) src, sstride, w, 0, </div>\n\
<div class=\"line\">                 (uint16_t*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::reduceTri((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, w, 0, </div>\n\
<div class=\"line\">                 (<span class=\"keywordtype\">float</span>*) dst, dstride, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::fill(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride,</div>\n\
<div class=\"line\">             <span class=\"keywordtype\">int</span> ures, <span class=\"keywordtype\">int</span> vres, <span class=\"keywordtype\">int</span> pixelsize)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// fill first row</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = ures*pixelsize;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* ptr = (<span class=\"keywordtype\">char</span>*) dst;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = ptr + rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; ptr != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; ptr += pixelsize) memcpy(ptr, src, pixelsize);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// fill remaining rows from first row</span></div>\n\
<div class=\"line\">    ptr = (<span class=\"keywordtype\">char</span>*) dst + dstride;</div>\n\
<div class=\"line\">    end = (<span class=\"keywordtype\">char</span>*) dst + vres*dstride;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (; ptr != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; ptr += dstride) memcpy(ptr, dst, rowlen);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::copy(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">int</span> dstride,</div>\n\
<div class=\"line\">             <span class=\"keywordtype\">int</span> vres, <span class=\"keywordtype\">int</span> rowlen)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// regular non-tiled case</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sstride == rowlen &amp;&amp; dstride == rowlen) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// packed case - copy in single block</span></div>\n\
<div class=\"line\">    memcpy(dst, src, vres*rowlen);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"comment\">// copy a row at a time</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* sptr = (<span class=\"keywordtype\">char</span>*) src;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span>* dptr = (<span class=\"keywordtype\">char</span>*) dst;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">char</span>* end = sptr + vres*sstride; sptr != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;) {</div>\n\
<div class=\"line\">        memcpy(dptr, sptr, rowlen);</div>\n\
<div class=\"line\">        dptr += dstride;</div>\n\
<div class=\"line\">        sptr += sstride;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> blend(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">float</span> weight, T* dst, <span class=\"keywordtype\">int</span> rowlen, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* end = src + rowlen * nchan; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; dst++)</div>\n\
<div class=\"line\">        *dst = *dst + T(weight * *src++);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> blendflip(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">float</span> weight, T* dst, <span class=\"keywordtype\">int</span> rowlen, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    dst += (rowlen-1) * nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* end = src + rowlen * nchan; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nchan; i++, dst++)</div>\n\
<div class=\"line\">        *dst = *dst + T(weight * *src++);</div>\n\
<div class=\"line\">        dst -= nchan*2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::blend(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">float</span> weight, <span class=\"keywordtype\">void</span>* dst, <span class=\"keywordtype\">bool</span> flip,</div>\n\
<div class=\"line\">              <span class=\"keywordtype\">int</span> rowlen, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> ((dt&lt;&lt;1) | <span class=\"keywordtype\">int</span>(flip)) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_uint8&lt;&lt;1):      ::blend((<span class=\"keyword\">const</span> uint8_t*) src, weight,</div>\n\
<div class=\"line\">                     (uint8_t*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_uint8&lt;&lt;1 | 1):  ::blendflip((<span class=\"keyword\">const</span> uint8_t*) src, weight,</div>\n\
<div class=\"line\">                     (uint8_t*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_half&lt;&lt;1):       ::blend((<span class=\"keyword\">const</span> PtexHalf*) src, weight,</div>\n\
<div class=\"line\">                     (PtexHalf*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_half&lt;&lt;1 | 1):   ::blendflip((<span class=\"keyword\">const</span> PtexHalf*) src, weight,</div>\n\
<div class=\"line\">                     (PtexHalf*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_uint16&lt;&lt;1):     ::blend((<span class=\"keyword\">const</span> uint16_t*) src, weight,</div>\n\
<div class=\"line\">                     (uint16_t*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_uint16&lt;&lt;1 | 1): ::blendflip((<span class=\"keyword\">const</span> uint16_t*) src, weight,</div>\n\
<div class=\"line\">                     (uint16_t*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_float&lt;&lt;1):      ::blend((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, weight,</div>\n\
<div class=\"line\">                     (<span class=\"keywordtype\">float</span>*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> (dt_float&lt;&lt;1 | 1):  ::blendflip((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, weight,</div>\n\
<div class=\"line\">                     (<span class=\"keywordtype\">float</span>*) dst, rowlen, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> average(<span class=\"keyword\">const</span> T* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw, </div>\n\
<div class=\"line\">            T* dst, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span>* buff = (<span class=\"keywordtype\">float</span>*) alloca(nchan*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">    memset(buff, 0, nchan*<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>));</div>\n\
<div class=\"line\">    sstride /= <span class=\"keyword\">sizeof</span>(T);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowlen = uw*nchan;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> rowskip = sstride - rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* end = src + vw*sstride; src != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; src += rowskip)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keyword\">const</span> T* rowend = src + rowlen; src != rowend;)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nchan; i++) buff[i] += *src++;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scale = 1.0/(uw*vw);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nchan; i++) dst[i] = T(buff[i]*scale);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::average(<span class=\"keyword\">const</span> <span class=\"keywordtype\">void</span>* src, <span class=\"keywordtype\">int</span> sstride, <span class=\"keywordtype\">int</span> uw, <span class=\"keywordtype\">int</span> vw,</div>\n\
<div class=\"line\">            <span class=\"keywordtype\">void</span>* dst, DataType dt, <span class=\"keywordtype\">int</span> nchan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span> (dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:   ::average((<span class=\"keyword\">const</span> uint8_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (uint8_t*) dst, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:    ::average((<span class=\"keyword\">const</span> PtexHalf*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (PtexHalf*) dst, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16:  ::average((<span class=\"keyword\">const</span> uint16_t*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (uint16_t*) dst, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:   ::average((<span class=\"keyword\">const</span> <span class=\"keywordtype\">float</span>*) src, sstride, uw, vw, </div>\n\
<div class=\"line\">                   (<span class=\"keywordtype\">float</span>*) dst, nchan); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>CompareRfaceIds {</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Ptex::FaceInfo* faces;</div>\n\
<div class=\"line\">    CompareRfaceIds(<span class=\"keyword\">const</span> Ptex::FaceInfo* faces) : faces(faces) {}</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> operator() (uint32_t faceid1, uint32_t faceid2)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f1 = faces[faceid1];</div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f2 = faces[faceid2];</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> min1 = f1.isConstant() ? 1 : PtexUtils::min(f1.res.ulog2, f1.res.vlog2);</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> min2 = f2.isConstant() ? 1 : PtexUtils::min(f2.res.ulog2, f2.res.vlog2);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> min1 &gt; min2;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> multalpha(T* data, <span class=\"keywordtype\">int</span> npixels, <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">double</span> scale)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> alphaoffset; <span class=\"comment\">// offset to alpha chan from data ptr</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nchanmult;   <span class=\"comment\">// number of channels to alpha-multiply</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alphachan == 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// first channel is alpha chan: mult the rest of the channels</span></div>\n\
<div class=\"line\">        data++;</div>\n\
<div class=\"line\">        alphaoffset = -1;</div>\n\
<div class=\"line\">        nchanmult = nchannels - 1; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// mult all channels up to alpha chan</span></div>\n\
<div class=\"line\">        alphaoffset = alphachan;</div>\n\
<div class=\"line\">        nchanmult = alphachan;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (T* end = data + npixels*nchannels; data != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; data += nchannels) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> aval = scale * data[alphaoffset];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nchanmult; i++) data[i] = T(data[i] * aval);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::multalpha(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> npixels, DataType dt, <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scale = OneValueInv(dt);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>(dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:  ::multalpha((uint8_t*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16: ::multalpha((uint16_t*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:   ::multalpha((PtexHalf*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:  ::multalpha((<span class=\"keywordtype\">float</span>*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">void</span> divalpha(T* data, <span class=\"keywordtype\">int</span> npixels, <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan, <span class=\"keywordtype\">double</span> scale)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> alphaoffset; <span class=\"comment\">// offset to alpha chan from data ptr</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nchandiv;    <span class=\"comment\">// number of channels to alpha-divide</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (alphachan == 0) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// first channel is alpha chan: div the rest of the channels</span></div>\n\
<div class=\"line\">        data++;</div>\n\
<div class=\"line\">        alphaoffset = -1;</div>\n\
<div class=\"line\">        nchandiv = nchannels - 1; </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// div all channels up to alpha chan</span></div>\n\
<div class=\"line\">        alphaoffset = alphachan;</div>\n\
<div class=\"line\">        nchandiv = alphachan;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (T* end = data + npixels*nchannels; data != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>; data += nchannels) {</div>\n\
<div class=\"line\">        T <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a55d98ec4b6aa35ace9b91275e7ad847b\">alpha</a> = data[alphaoffset];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!alpha) <span class=\"keywordflow\">continue</span>; <span class=\"comment\">// don&#39;t divide by zero!</span></div>\n\
<div class=\"line\">        <span class=\"keywordtype\">double</span> aval = scale / <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a55d98ec4b6aa35ace9b91275e7ad847b\">alpha</a>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nchandiv; i++)  data[i] = T(data[i] * aval);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::divalpha(<span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> npixels, DataType dt, <span class=\"keywordtype\">int</span> nchannels, <span class=\"keywordtype\">int</span> alphachan)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scale = OneValue(dt);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">switch</span>(dt) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint8:  ::divalpha((uint8_t*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_uint16: ::divalpha((uint16_t*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_half:   ::divalpha((PtexHalf*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">case</span> dt_float:  ::divalpha((<span class=\"keywordtype\">float</span>*) data, npixels, nchannels, alphachan, scale); <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexUtils::genRfaceids(<span class=\"keyword\">const</span> FaceInfo* faces, <span class=\"keywordtype\">int</span> nfaces,</div>\n\
<div class=\"line\">                uint32_t* rfaceids, uint32_t* faceids)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// stable_sort faceids by smaller dimension (u or v) in descending order</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// treat const faces as having res of 1</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// init faceids</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nfaces; i++) faceids[i] = i;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// sort faceids by rfaceid</span></div>\n\
<div class=\"line\">    std::stable_sort(faceids, faceids + nfaces, CompareRfaceIds(faces));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// generate mapping from faceid to rfaceid</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; nfaces; i++) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// note: i is the rfaceid</span></div>\n\
<div class=\"line\">    rfaceids[faceids[i]] = i;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// apply to 1..4 channels, unrolled</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T, <span class=\"keywordtype\">int</span> nChan&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> ApplyConst(<span class=\"keywordtype\">double</span> weight, <span class=\"keywordtype\">double</span>* dst, <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> <span class=\"comment\">/*nChan*/</span>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// dst[i] += data[i] * weight for i in {0..n-1}</span></div>\n\
<div class=\"line\">    PtexUtils::VecAccum&lt;T,nChan&gt;()(dst, (T*) data, weight);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// apply to N channels (general case)</span></div>\n\
<div class=\"line\">    template&lt;class T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> ApplyConstN(<span class=\"keywordtype\">double</span> weight, <span class=\"keywordtype\">double</span>* dst, <span class=\"keywordtype\">void</span>* data, <span class=\"keywordtype\">int</span> nChan)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// dst[i] += data[i] * weight for i in {0..n-1}</span></div>\n\
<div class=\"line\">    PtexUtils::VecAccumN&lt;T&gt;()(dst, (T*) data, nChan, weight);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PtexUtils::ApplyConstFn</div>\n\
<div class=\"line\">PtexUtils::applyConstFunctions[20] = {</div>\n\
<div class=\"line\">    ApplyConstN&lt;uint8_t&gt;,  ApplyConstN&lt;uint16_t&gt;,  ApplyConstN&lt;PtexHalf&gt;,  ApplyConstN&lt;float&gt;,</div>\n\
<div class=\"line\">    ApplyConst&lt;uint8_t,1&gt;, ApplyConst&lt;uint16_t,1&gt;, ApplyConst&lt;PtexHalf,1&gt;, ApplyConst&lt;float,1&gt;,</div>\n\
<div class=\"line\">    ApplyConst&lt;uint8_t,2&gt;, ApplyConst&lt;uint16_t,2&gt;, ApplyConst&lt;PtexHalf,2&gt;, ApplyConst&lt;float,2&gt;,</div>\n\
<div class=\"line\">    ApplyConst&lt;uint8_t,3&gt;, ApplyConst&lt;uint16_t,3&gt;, ApplyConst&lt;PtexHalf,3&gt;, ApplyConst&lt;float,3&gt;,</div>\n\
<div class=\"line\">    ApplyConst&lt;uint8_t,4&gt;, ApplyConst&lt;uint16_t,4&gt;, ApplyConst&lt;PtexHalf,4&gt;, ApplyConst&lt;float,4&gt;,</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef PTEX_USE_STDSTRING</span></div>\n\
<div class=\"line\">Ptex::String::~String()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_str) free(_str);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">Ptex::String&amp; Ptex::String::operator=(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* str)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_str) free(_str);</div>\n\
<div class=\"line\">    _str = str ? strdup(str) : 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">std::ostream&amp; <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_s_s_e_8h.html#a48d936d9a8d7c3911d7a6978264d36ba\">operator &lt;&lt; </a>(std::ostream&amp; stream, <span class=\"keyword\">const</span> Ptex::String&amp; str)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    stream &lt;&lt; str.c_str();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> stream;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";