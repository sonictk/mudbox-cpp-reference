var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexExtractor/ptex/PtexDict.h</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_extractor_2ptex_2_ptex_dict_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexExtractor/ptex/PtexDict.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexExtractor/ptex/PtexDict.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef PtexDict_h</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexDict_h</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexDict</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Entry; </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>: <span class=\"comment\">// Public Types   </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>iterator;        </div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>const_iterator;  </div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>iterator;</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>const_iterator;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>*    key_type;       </div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> T              mapped_type;    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>value_type {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    value_type(): <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a970a385f6f880f2b620451db4ca4299a\">first</a>(0), second() {}</div>\n\
<div class=\"line\">    value_type(key_type <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, <span class=\"keyword\">const</span> T&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a>): <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a970a385f6f880f2b620451db4ca4299a\">first</a>(f), second(s) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> key_type <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a970a385f6f880f2b620451db4ca4299a\">first</a>;  </div>\n\
<div class=\"line\">    T second;              </div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:  <span class=\"comment\">// Public Member Interfce</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    PtexDict() :  _numEntries(0), _numBuckets(0), _bucketMask(0), _buckets(0) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexDict() { clear(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    T&amp; operator[](<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iterator begin()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    iterator iter;</div>\n\
<div class=\"line\">    iter._d = <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (iter._b = 0; iter._b &lt; _numBuckets; iter._b++) {</div>\n\
<div class=\"line\">        iter._e = &amp;_buckets[iter._b];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*iter._e) <span class=\"keywordflow\">return</span> iter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    iter._e = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> iter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> iterator <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>() { <span class=\"keywordflow\">return</span> iterator( 0, <span class=\"keyword\">this</span>, 0 ); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    const_iterator begin()<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">    const_iterator iter;</div>\n\
<div class=\"line\">    iter._d = <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (iter._b = 0; iter._b &lt; _numBuckets; iter._b++) {</div>\n\
<div class=\"line\">        iter._e = &amp;_buckets[iter._b];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*iter._e) <span class=\"keywordflow\">return</span> iter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    iter._e = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> iter;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> const_iterator <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> const_iterator( 0, <span class=\"keyword\">this</span>, 0 ); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iterator find(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key);</div>\n\
<div class=\"line\">    const_iterator find(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key) <span class=\"keyword\">const</span>;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> erase(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iterator erase(iterator iter);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> clear();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> _numEntries; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>: <span class=\"comment\">// Private Member Interface</span></div>\n\
<div class=\"line\">       </div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>Entry {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>: <span class=\"comment\">// Public Member Interface</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    Entry() : _next(0), _hashval(0), _keylen(0),</div>\n\
<div class=\"line\">          _val(_key,T()), _pad(0) {}    </div>\n\
<div class=\"line\">    <span class=\"keyword\">private</span>: <span class=\"comment\">// Private Member Interface    </span></div>\n\
<div class=\"line\"><span class=\"comment\"></span>    Entry(<span class=\"keyword\">const</span> Entry&amp;);</div>\n\
<div class=\"line\">    Entry&amp; operator=(<span class=\"keyword\">const</span> Entry&amp;);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    Entry*     _next;    </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>        _hashval; </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span>        _keylen;  </div>\n\
<div class=\"line\">    value_type _val;     </div>\n\
<div class=\"line\">    <span class=\"keyword\">union </span>{</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span>  _pad;   </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span> _key[1];</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    PtexDict(<span class=\"keyword\">const</span> PtexDict&amp;);</div>\n\
<div class=\"line\">    PtexDict&amp; operator=(<span class=\"keyword\">const</span> PtexDict&amp;);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> hash(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keywordtype\">int</span>&amp; keylen)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">    <span class=\"comment\">// this is similar to perl&#39;s hash function</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> hashval = 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* cp = key;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ((c = *cp++)) hashval = hashval * 33 + <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>;</div>\n\
<div class=\"line\">    keylen = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a>(cp-key)-1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> hashval;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Entry** locate(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key, <span class=\"keywordtype\">int</span>&amp; keylen, <span class=\"keywordtype\">int</span>&amp; hashval)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{</div>\n\
<div class=\"line\">    hashval = hash(key, keylen);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_buckets) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (Entry** e = &amp;_buckets[hashval &amp; _bucketMask]; *e; e=&amp;(*e)-&gt;_next)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ((*e)-&gt;_hashval == hashval &amp;&amp; (*e)-&gt;_keylen == keylen &amp;&amp;</div>\n\
<div class=\"line\">        streq(key, (*e)-&gt;_key, keylen)) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> e;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> streq(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* s1, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* s2, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a508cd9b0e54f044f23b7fc474233693b\">len</a>)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// first make sure s1 is quad-aligned (s2 is always aligned)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (((intptr_t)s1 &amp; 3) == 0) {  </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> len4 = len &gt;&gt; 2;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">while</span> (len4--) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*(<span class=\"keywordtype\">int</span>*)s1 != *(<span class=\"keywordtype\">int</span>*)s2) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        s1 += 4; s2 += 4;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        len &amp;= 3;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (len--) <span class=\"keywordflow\">if</span> (*s1++ != *s2++) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> grow();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:  <span class=\"comment\">// Private Member data</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _numEntries;  </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _numBuckets;  </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _bucketMask;  </div>\n\
<div class=\"line\">    Entry** _buckets; </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexDict&lt;T&gt;::iterator {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    iterator() : _d(0), _e(0), _b(0) {}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    iterator(<span class=\"keyword\">const</span> iterator&amp; iter) :</div>\n\
<div class=\"line\">    _d(iter._d), _e(iter._e), _b(iter._b) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> iterator&amp; operator=(<span class=\"keyword\">const</span> iterator&amp; iter)</div>\n\
<div class=\"line\">    { _e = iter._e; _d = iter._d; _b = iter._b; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }   </div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> value_type&amp; <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a7ca6a588e71f54d4a6e7f09519ea7fda\">operator*</a>()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> getValue(); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> value_type* operator-&gt;()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> &amp;getValue(); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">operator</span> bool() { <span class=\"keywordflow\">return</span> _e != 0; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a637f7084f9654006932237127d7be263\">operator==</a>(<span class=\"keyword\">const</span> iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e == _e; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qbytearray_8h.html#ae6561cb91aa056d85ac61b6cf59ef070\">operator!=</a>(<span class=\"keyword\">const</span> iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e != _e; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a637f7084f9654006932237127d7be263\">operator==</a>(<span class=\"keyword\">const</span> const_iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e == _e; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/qbytearray_8h.html#ae6561cb91aa056d85ac61b6cf59ef070\">operator!=</a>(<span class=\"keyword\">const</span> const_iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e != _e; }</div>\n\
<div class=\"line\">    iterator&amp; operator++(<span class=\"keywordtype\">int</span>);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:  <span class=\"comment\">// Private interface</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    iterator( Entry** e, <span class=\"keyword\">const</span> PtexDict* d, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a>): _d(d), _e(e), _b(b) {}</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> value_type&amp; getValue()<span class=\"keyword\"> const</span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_e) <span class=\"keywordflow\">return</span> (*_e)-&gt;_val;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>   <span class=\"keywordflow\">return</span> _defaultVal;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>PtexDict;</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>const_iterator;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PtexDict* _d;  </div>\n\
<div class=\"line\">    Entry** _e;      </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _b;          </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> value_type _defaultVal; </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// define the static type for the iterator</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::value_type PtexDict&lt;T&gt;::iterator::_defaultVal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexDict&lt;T&gt;::const_iterator {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    const_iterator() : _d(0), _e(0), _b(0) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    const_iterator(<span class=\"keyword\">const</span> const_iterator&amp; iter) :</div>\n\
<div class=\"line\">    _d(iter._d), _e(iter._e), _b(iter._b) {}</div>\n\
<div class=\"line\">    const_iterator(<span class=\"keyword\">const</span> iterator&amp; iter) :</div>\n\
<div class=\"line\">    _d(iter._d), _e(iter._e), _b(iter._b) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> const_iterator&amp; operator=(<span class=\"keyword\">const</span> const_iterator&amp; iter)</div>\n\
<div class=\"line\">    { _e = iter._e; _d = iter._d; _b = iter._b; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> const_iterator&amp; operator=(iterator&amp; iter)</div>\n\
<div class=\"line\">    { _e = iter._e; _d = iter._d; _b = iter._b; <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> value_type&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a7ca6a588e71f54d4a6e7f09519ea7fda\">operator*</a>()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> getValue(); }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> value_type* operator-&gt;()<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> &amp;getValue(); }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">operator</span> bool() { <span class=\"keywordflow\">return</span> _e != 0; }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a637f7084f9654006932237127d7be263\">operator==</a>(<span class=\"keyword\">const</span> iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e == _e; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/qbytearray_8h.html#ae6561cb91aa056d85ac61b6cf59ef070\">operator!=</a>(<span class=\"keyword\">const</span> iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e != _e; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#a637f7084f9654006932237127d7be263\">operator==</a>(<span class=\"keyword\">const</span> const_iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e == _e; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">bool</span> <a class=\"code\" href=\"#!/url=./cpp_ref/qbytearray_8h.html#ae6561cb91aa056d85ac61b6cf59ef070\">operator!=</a>(<span class=\"keyword\">const</span> const_iterator&amp; iter)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\">    </span>{ <span class=\"keywordflow\">return</span> iter._e != _e; }</div>\n\
<div class=\"line\">    const_iterator&amp; operator++(<span class=\"keywordtype\">int</span>);</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:  <span class=\"comment\">// Private interface</span></div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    const_iterator( Entry** e, <span class=\"keyword\">const</span> PtexDict* d, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a>): _d(d),_e(e),_b(b) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keyword\">const</span> value_type&amp; getValue()<span class=\"keyword\"> const</span>{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_e) <span class=\"keywordflow\">return</span> (*_e)-&gt;_val;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>   <span class=\"keywordflow\">return</span> _defaultVal;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>PtexDict;</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>iterator;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> PtexDict* _d;  </div>\n\
<div class=\"line\">    Entry** _e;      </div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _b;          </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> value_type _defaultVal; </div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// define the static type for the iterator</span></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt; <span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::value_type PtexDict&lt;T&gt;::const_iterator::_defaultVal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::iterator&amp; PtexDict&lt;T&gt;::iterator::operator++(<span class=\"keywordtype\">int</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_e) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// move to next entry</span></div>\n\
<div class=\"line\">    _e = &amp;(*_e)-&gt;_next;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!*_e) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// move to next non-empty bucket</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (_b++; _b &lt; _d-&gt;_numBuckets; _b++) {</div>\n\
<div class=\"line\">        _e = &amp;_d-&gt;_buckets[_b];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*_e) <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        _e = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::const_iterator&amp; PtexDict&lt;T&gt;::const_iterator::operator++(<span class=\"keywordtype\">int</span>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_e) {</div>\n\
<div class=\"line\">    <span class=\"comment\">// move to next entry</span></div>\n\
<div class=\"line\">    _e = &amp;(*_e)-&gt;_next;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!*_e) {</div>\n\
<div class=\"line\">        <span class=\"comment\">// move to next non-empty bucket</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (_b++; _b &lt; _d-&gt;_numBuckets; _b++) {</div>\n\
<div class=\"line\">        _e = &amp;_d-&gt;_buckets[_b];</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (*_e) <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        _e = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> *<span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::iterator PtexDict&lt;T&gt;::find(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> keylen, hashval;</div>\n\
<div class=\"line\">    Entry** e = locate(key, keylen, hashval);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (e) <span class=\"keywordflow\">return</span> iterator( e, <span class=\"keyword\">this</span>, hashval &amp; _bucketMask );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::const_iterator PtexDict&lt;T&gt;::find(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key)<span class=\"keyword\"> const</span></div>\n\
<div class=\"line\"><span class=\"keyword\"></span>{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> keylen, hashval;</div>\n\
<div class=\"line\">    Entry** e = locate(key, keylen, hashval);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (e) <span class=\"keywordflow\">return</span> const_iterator( e, <span class=\"keyword\">this</span>, hashval &amp; _bucketMask );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span>   <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>();</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\">T&amp; PtexDict&lt;T&gt;::operator[](<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> keylen, hashval;</div>\n\
<div class=\"line\">    Entry** e = locate(key, keylen, hashval);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (e) <span class=\"keywordflow\">return</span> (*e)-&gt;_val.second;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// create a new entry</span></div>\n\
<div class=\"line\">    _numEntries++;</div>\n\
<div class=\"line\">    if (_numEntries*2 &gt;= _numBuckets) grow();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// allocate a buffer big enough to hold Entry + (the key length )</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note: the NULL character is already accounted for by Entry::_key&#39;s size</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>* ebuf = malloc( <span class=\"keyword\">sizeof</span>(Entry) + (keylen) * <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>) );</div>\n\
<div class=\"line\">    Entry* ne = <span class=\"keyword\">new</span>(ebuf) Entry; <span class=\"comment\">// note: placement new </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Store the values in the Entry structure</span></div>\n\
<div class=\"line\">    Entry** slot = &amp;_buckets[hashval &amp; _bucketMask];</div>\n\
<div class=\"line\">    ne-&gt;_next = *slot; *slot = ne;</div>\n\
<div class=\"line\">    ne-&gt;_hashval = hashval;</div>\n\
<div class=\"line\">    ne-&gt;_keylen = keylen;</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// copy the string given into the new location</span></div>\n\
<div class=\"line\">    memcpy(ne-&gt;_key, key, keylen);</div>\n\
<div class=\"line\">    ne-&gt;_key[keylen] = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ne-&gt;_val.second;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexDict&lt;T&gt;::grow()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_buckets) {</div>\n\
<div class=\"line\">    _numBuckets = 16;</div>\n\
<div class=\"line\">    _bucketMask = _numBuckets - 1;</div>\n\
<div class=\"line\">    _buckets = (Entry**) calloc(_numBuckets, <span class=\"keyword\">sizeof</span>(Entry*));</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> newsize = _numBuckets * 2;</div>\n\
<div class=\"line\">    _bucketMask = newsize - 1;</div>\n\
<div class=\"line\">    Entry** newbuckets = (Entry**) calloc(newsize, <span class=\"keyword\">sizeof</span>(Entry*));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; _numBuckets; i++) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (Entry* e = _buckets[i]; e;) {</div>\n\
<div class=\"line\">        Entry* _next = e-&gt;_next;</div>\n\
<div class=\"line\">        Entry** slot = &amp;newbuckets[e-&gt;_hashval &amp; _bucketMask];</div>\n\
<div class=\"line\">        e-&gt;_next = *slot; *slot = e;</div>\n\
<div class=\"line\">        e = _next;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    free(_buckets);</div>\n\
<div class=\"line\">    _buckets = newbuckets;</div>\n\
<div class=\"line\">    _numBuckets = newsize;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">bool</span> PtexDict&lt;T&gt;::erase(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* key)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    iterator iter = find(key);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!iter) <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    erase(iter);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;  <span class=\"comment\">// valid entry to remove</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keyword\">typename</span> PtexDict&lt;T&gt;::iterator PtexDict&lt;T&gt;::erase(iterator iter)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    Entry** eptr = iter._e;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!eptr) <span class=\"keywordflow\">return</span> iter;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// patch around deleted entry</span></div>\n\
<div class=\"line\">    Entry* e = *eptr;</div>\n\
<div class=\"line\">    Entry* next = e-&gt;_next;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!next) iter++;  <span class=\"comment\">// advance iterator if at end of chain</span></div>\n\
<div class=\"line\">    *eptr = next;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// destroy entry.  This is a strange destroy but is necessary because of</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// the way Entry() is allocated by using malloc above.</span></div>\n\
<div class=\"line\">    e-&gt;~Entry(); <span class=\"comment\">// note: explicit dtor call</span></div>\n\
<div class=\"line\">    free(e);     <span class=\"comment\">// free memory allocated.</span></div>\n\
<div class=\"line\">    _numEntries--;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> iter;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">template</span>&lt;<span class=\"keyword\">class</span> T&gt;</div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexDict&lt;T&gt;::clear()</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (iterator i=begin(); i != <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>(); i = erase(i));</div>\n\
<div class=\"line\">    free(_buckets);</div>\n\
<div class=\"line\">    _buckets = 0;</div>\n\
<div class=\"line\">    _numEntries = 0;</div>\n\
<div class=\"line\">    _numBuckets = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif //PtexDict_h</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";