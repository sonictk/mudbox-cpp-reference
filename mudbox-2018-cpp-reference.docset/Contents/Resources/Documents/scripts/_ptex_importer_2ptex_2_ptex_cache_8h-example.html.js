var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexImporter/ptex/PtexCache.h</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_importer_2ptex_2_ptex_cache_8h-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexImporter/ptex/PtexCache.h</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexImporter/ptex/PtexCache.h</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"preprocessor\">#ifndef PtexCache_h</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define PtexCache_h</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexMutex.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;Ptexture.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexDict.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define USE_SPIN // use spinlocks instead of mutex for main cache lock</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>PtexInternal {</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef USE_SPIN</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> SpinLock CacheLock;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> Mutex CacheLock;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> AutoLock&lt;CacheLock&gt; AutoLockCache;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifndef NDEBUG</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define GATHER_STATS</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef GATHER_STATS</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">struct </span>CacheStats{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nfilesOpened;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nfilesClosed;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ndataAllocated;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ndataFreed;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nblocksRead;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> <span class=\"keywordtype\">int</span> nbytesRead;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> nseeks;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    CacheStats()</div>\n\
<div class=\"line\">        : nfilesOpened(0),</div>\n\
<div class=\"line\">          nfilesClosed(0),</div>\n\
<div class=\"line\">          ndataAllocated(0),</div>\n\
<div class=\"line\">          ndataFreed(0),</div>\n\
<div class=\"line\">          nblocksRead(0),</div>\n\
<div class=\"line\">          nbytesRead(0),</div>\n\
<div class=\"line\">          nseeks(0) {}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    ~CacheStats();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> print();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> inc(<span class=\"keywordtype\">int</span>&amp; val) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> SpinLock spinlock;</div>\n\
<div class=\"line\">        AutoSpin lock(spinlock);</div>\n\
<div class=\"line\">        val++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> add(<span class=\"keywordtype\">long</span> <span class=\"keywordtype\">int</span>&amp; val, <span class=\"keywordtype\">int</span> inc) {</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> SpinLock spinlock;</div>\n\
<div class=\"line\">        AutoSpin lock(spinlock);</div>\n\
<div class=\"line\">        val+=inc;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">    <span class=\"keyword\">extern</span> CacheStats stats;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define STATS_INC(x) stats.inc(stats.x);</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define STATS_ADD(x, y) stats.add(stats.x, y);</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define STATS_INC(x)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define STATS_ADD(x, y)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span>PtexInternal;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexLruItem {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> inuse() { <span class=\"keywordflow\">return</span> _prev == 0; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> orphan() </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// parent no longer wants me</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>** <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a> = _parent;</div>\n\
<div class=\"line\">    _parent = 0;</div>\n\
<div class=\"line\">    assert(p &amp;&amp; *p == <span class=\"keyword\">this</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!inuse()) <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    *p = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt; <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> orphanList(T&amp; list)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keyword\">typename</span> T::iterator i=list.begin(); i != list.end(); i++) {</div>\n\
<div class=\"line\">        PtexLruItem* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a0c0d4701a6c89f4f7f0640715d27ab26\">obj</a> = *i;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (obj) {</div>\n\
<div class=\"line\">        assert(obj-&gt;_parent == (<span class=\"keywordtype\">void</span>**)&amp;*i);</div>\n\
<div class=\"line\">        obj-&gt;orphan();</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    PtexLruItem(<span class=\"keywordtype\">void</span>** parent=0)</div>\n\
<div class=\"line\">    : _parent(parent), _prev(0), _next(0) {}</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexLruItem()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// detach from parent (if any)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_parent) { assert(*_parent == <span class=\"keyword\">this</span>); *_parent = 0; }</div>\n\
<div class=\"line\">    <span class=\"comment\">// unlink from lru list (if in list)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_prev) {</div>\n\
<div class=\"line\">        _prev-&gt;_next = _next; </div>\n\
<div class=\"line\">        _next-&gt;_prev = _prev;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">friend</span> <span class=\"keyword\">class </span>PtexLruList;   <span class=\"comment\">// maintains prev/next, deletes</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span>** _parent;     <span class=\"comment\">// pointer to this item within parent</span></div>\n\
<div class=\"line\">    PtexLruItem* _prev;     <span class=\"comment\">// prev in lru list (0 if in-use)</span></div>\n\
<div class=\"line\">    PtexLruItem* _next;     <span class=\"comment\">// next in lru list (0 if in-use)</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexLruList {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexLruList() { _end._prev = _end._next = &amp;_end; }</div>\n\
<div class=\"line\">    ~PtexLruList() { <span class=\"keywordflow\">while</span> (pop()); }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> extract(PtexLruItem* node)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// remove from list</span></div>\n\
<div class=\"line\">    node-&gt;_prev-&gt;_next = node-&gt;_next;</div>\n\
<div class=\"line\">    node-&gt;_next-&gt;_prev = node-&gt;_prev;</div>\n\
<div class=\"line\">    node-&gt;_next = node-&gt;_prev = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> push(PtexLruItem* node)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">// delete node if orphaned</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!node-&gt;_parent) <span class=\"keyword\">delete</span> node;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        <span class=\"comment\">// add to end of list</span></div>\n\
<div class=\"line\">        node-&gt;_next = &amp;_end;</div>\n\
<div class=\"line\">        node-&gt;_prev = _end._prev;</div>\n\
<div class=\"line\">        _end._prev-&gt;_next = node;</div>\n\
<div class=\"line\">        _end._prev = node;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> pop()</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_end._next == &amp;_end) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">delete</span> _end._next; <span class=\"comment\">// item will unlink itself</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    PtexLruItem _end;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexCacheImpl : <span class=\"keyword\">public</span> PtexCache {</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexCacheImpl(<span class=\"keywordtype\">int</span> maxFiles, <span class=\"keywordtype\">int</span> maxMem)</div>\n\
<div class=\"line\">    : _pendingDelete(false),</div>\n\
<div class=\"line\">      _maxFiles(maxFiles), _unusedFileCount(0),</div>\n\
<div class=\"line\">      _maxDataSize(maxMem),</div>\n\
<div class=\"line\">      _unusedDataSize(0), _unusedDataCount(0)</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">    <span class=\"comment\">/* Allow for a minimum number of data blocks so cache doesn&#39;t</span></div>\n\
<div class=\"line\"><span class=\"comment\">       thrash too much if there are any really big items in the</span></div>\n\
<div class=\"line\"><span class=\"comment\">       cache pushing over the limit. It&#39;s better to go over the</span></div>\n\
<div class=\"line\"><span class=\"comment\">       limit in this case and make sure there&#39;s room for at least</span></div>\n\
<div class=\"line\"><span class=\"comment\">       a modest number of objects in the cache.</span></div>\n\
<div class=\"line\"><span class=\"comment\">    */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// try to allow for at least 10 objects per file (up to 100 files)</span></div>\n\
<div class=\"line\">    _minDataCount = 10 * maxFiles;</div>\n\
<div class=\"line\">    <span class=\"comment\">// but no more than 1000</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (_minDataCount &gt; 1000) _minDataCount = 1000;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> release() { <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    Mutex openlock;</div>\n\
<div class=\"line\">    CacheLock cachelock;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// internal use - only call from reader classes for deferred deletion</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setPendingDelete() { _pendingDelete = <span class=\"keyword\">true</span>; }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> handlePendingDelete() { <span class=\"keywordflow\">if</span> (_pendingDelete) <span class=\"keyword\">delete</span> <span class=\"keyword\">this</span>; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// internal use - only call from PtexCachedFile, PtexCachedData</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> addFile() { STATS_INC(nfilesOpened); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setFileInUse(PtexLruItem* file);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setFileUnused(PtexLruItem* file);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeFile();</div>\n\
<div class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> addData() { STATS_INC(ndataAllocated); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDataInUse(PtexLruItem* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> setDataUnused(PtexLruItem* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> removeData(<span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> purgeFiles() {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (_unusedFileCount &gt; _maxFiles) </div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!_unusedFiles.pop()) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// note: pop will destroy item and item destructor will</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// call removeFile which will decrement _unusedFileCount</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> purgeData() {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> ((_unusedDataSize &gt; _maxDataSize) &amp;&amp;</div>\n\
<div class=\"line\">           (_unusedDataCount &gt; _minDataCount))</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!_unusedData.pop()) <span class=\"keywordflow\">break</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// note: pop will destroy item and item destructor will</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// call removeData which will decrement _unusedDataSize</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// and _unusedDataCount</span></div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    ~PtexCacheImpl();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> _pendingDelete;                 <span class=\"comment\">// flag set if delete is pending</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _maxFiles, _unusedFileCount;         <span class=\"comment\">// file limit, current unused file count</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> <span class=\"keywordtype\">int</span> _maxDataSize, _unusedDataSize;  <span class=\"comment\">// data limit (bytes), current size</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _minDataCount, _unusedDataCount;     <span class=\"comment\">// min, current # of unused data blocks</span></div>\n\
<div class=\"line\">    PtexLruList _unusedFiles, _unusedData;   <span class=\"comment\">// lists of unused items</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexCachedFile : <span class=\"keyword\">public</span> PtexLruItem</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexCachedFile(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache)</div>\n\
<div class=\"line\">    : PtexLruItem(parent), _cache(cache), _refcount(1)</div>\n\
<div class=\"line\">    { _cache-&gt;addFile(); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a083de4c8e32ad3d9059245f26be721de\">ref</a>() { assert(_cache-&gt;cachelock.locked()); <span class=\"keywordflow\">if</span> (!_refcount++) _cache-&gt;setFileInUse(<span class=\"keyword\">this</span>); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> unref() { assert(_cache-&gt;cachelock.locked()); <span class=\"keywordflow\">if</span> (!--_refcount) _cache-&gt;setFileUnused(<span class=\"keyword\">this</span>); }</div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexCachedFile() { _cache-&gt;removeFile(); }</div>\n\
<div class=\"line\">    PtexCacheImpl* _cache;</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _refcount;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PtexCachedData : <span class=\"keyword\">public</span> PtexLruItem</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">    PtexCachedData(<span class=\"keywordtype\">void</span>** parent, PtexCacheImpl* cache, <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>)</div>\n\
<div class=\"line\">    : PtexLruItem(parent), _cache(cache), _refcount(1), _size(size)</div>\n\
<div class=\"line\">    { _cache-&gt;addData(); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a083de4c8e32ad3d9059245f26be721de\">ref</a>() { assert(_cache-&gt;cachelock.locked()); <span class=\"keywordflow\">if</span> (!_refcount++) _cache-&gt;setDataInUse(<span class=\"keyword\">this</span>, _size); }</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> unref() { assert(_cache-&gt;cachelock.locked()); <span class=\"keywordflow\">if</span> (!--_refcount) _cache-&gt;setDataUnused(<span class=\"keyword\">this</span>, _size); }</div>\n\
<div class=\"line\"><span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> incSize(<span class=\"keywordtype\">int</span> size) { _size += <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>; }</div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> ~PtexCachedData() { _cache-&gt;removeData(_size); }</div>\n\
<div class=\"line\">    PtexCacheImpl* _cache;</div>\n\
<div class=\"line\"><span class=\"keyword\">private</span>:</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _refcount;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> _size;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";