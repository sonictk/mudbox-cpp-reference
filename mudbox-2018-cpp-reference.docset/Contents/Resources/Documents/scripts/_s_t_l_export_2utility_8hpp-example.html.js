var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>STLExport/utility.hpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_s_t_l_export_2utility_8hpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>STLExport/utility.hpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">STLExport/utility.hpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"keyword\">namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html\">mudbox</a></div>\n\
<div class=\"line\">{    </div>\n\
<div class=\"line\">    <span class=\"comment\">// Useful typedefs </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">double</span> float64;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">float</span> float32; </div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> half_ float16;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">long</span> <span class=\"keywordtype\">long</span> <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#aecfc3c54bd29ad5964e1c1c3ccbf89df\">int64</a>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> uint32;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">int</span> int32;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> uint16;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">short</span> int16;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> uint8;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">char</span> int8;</div>\n\
<div class=\"line\">    <span class=\"keyword\">typedef</span> <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> uint;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Used to assure one global instance of a plugin</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// This is one global instance of the plugin. This is needed because Mudbox will check all the nodes in the </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// memory and check their types. If the node type is Importer (like in this case) Mudbox will know</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// that this node can be used to import a specific file type, in this case the PLY format.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> T&gt;</div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>Singleton {</div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\">        <span class=\"keyword\">static</span> T instance;</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Provides common functionality for exporters. Primarily it is responsible for </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// caching the mesh pointers provided by Mudbox</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">class </span>BaseExporter : <span class=\"keyword\">public</span> Exporter</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        std::vector&lt;const Mesh*&gt; meshes;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        BaseExporter() { }</div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> ~BaseExporter() { }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// By calling this function, the mudbox kernel will inform the exporter plugin how many meshes it has to </span></div>\n\
<div class=\"line\">        <span class=\"comment\">// put into the file.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> SetMeshCount( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iMeshCount )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            meshes.resize(iMeshCount);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"comment\">// This function will be called once for each mesh, to tell the plugin what to export. The plugin don&#39;t have to</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// make a copy of the mesh data, it can store the pointer only, and then extract the required data from the mesh</span></div>\n\
<div class=\"line\">        <span class=\"comment\">// during the Export() call.</span></div>\n\
<div class=\"line\">        <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> SetMesh( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iIndex, <span class=\"keyword\">const</span> Mesh *pMesh )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (iIndex &gt; meshes.size())</div>\n\
<div class=\"line\">                <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>(<span class=\"stringliteral\">&quot;Internal error, index of mesh out of range for exporter&quot;</span>);</div>\n\
<div class=\"line\">            meshes[iIndex] = pMesh;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">protected</span>:</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        uint GetNumMeshes() {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">static_cast&lt;</span>uint<span class=\"keyword\">&gt;</span>(meshes.size());</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> Mesh* GetMesh(uint <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> meshes[<a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>];</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Utility functions for reading and writing sized values to a stream.</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #pragma region </span></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> WriteFloat32(Stream_T&amp; str, float32 <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>) {</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(f) == 4);</div>\n\
<div class=\"line\">        str.write((<span class=\"keywordtype\">char</span>*)&amp;f, <span class=\"keyword\">sizeof</span>(f));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> WriteUInt32(Stream_T&amp; str, uint32 <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a830e6eb5d1b77f7226a78592ba9d2613\">n</a>) {</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(n) == 4);</div>\n\
<div class=\"line\">        str.write((<span class=\"keywordtype\">char</span>*)&amp;n, <span class=\"keyword\">sizeof</span>(n));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> WriteUInt16(Stream_T&amp; str, uint16 n) {</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(n) == 2);</div>\n\
<div class=\"line\">        str.write((<span class=\"keywordtype\">char</span>*)&amp;n, <span class=\"keyword\">sizeof</span>(n));</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> WriteVectorFloat32(Stream_T&amp; str, <span class=\"keyword\">const</span> Vector&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>) {</div>\n\
<div class=\"line\">        WriteFloat32(str, v.x);</div>\n\
<div class=\"line\">        WriteFloat32(str, v.y);</div>\n\
<div class=\"line\">        WriteFloat32(str, v.z);        </div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    float32 ReadFloat32(Stream_T&amp; str) {</div>\n\
<div class=\"line\">        float32 <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>;</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(r) == 4);</div>\n\
<div class=\"line\">        str.read((<span class=\"keywordtype\">char</span>*)&amp;r, <span class=\"keyword\">sizeof</span>(r));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    uint32 ReadUInt32(Stream_T&amp; str) {</div>\n\
<div class=\"line\">        uint32 <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>;</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(r) == 4);</div>\n\
<div class=\"line\">        str.read((<span class=\"keywordtype\">char</span>*)&amp;r, <span class=\"keyword\">sizeof</span>(r));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    uint16 ReadUInt16(Stream_T&amp; str) {</div>\n\
<div class=\"line\">        uint16 <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>;</div>\n\
<div class=\"line\">        assert(<span class=\"keyword\">sizeof</span>(r) == 2);</div>\n\
<div class=\"line\">        str.read((<span class=\"keywordtype\">char</span>*)&amp;r, <span class=\"keyword\">sizeof</span>(r));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a28666c5860e73f899079b4ee29200aec\">r</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keyword\">template</span>&lt;<span class=\"keyword\">typename</span> Stream_T&gt;</div>\n\
<div class=\"line\">    Vector ReadVectorFloat32(Stream_T&amp; str) {</div>\n\
<div class=\"line\">        Vector <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>;</div>\n\
<div class=\"line\">        v.x = ReadFloat32(str, v.x);</div>\n\
<div class=\"line\">        v.y = ReadFloat32(str, v.y);</div>\n\
<div class=\"line\">        v.z = ReadFloat32(str, v.z);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\"><span class=\"preprocessor\">    #pragma endregion</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mesh utility functions</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">bool</span> IsMeshOpen(<span class=\"keyword\">const</span> Mesh* m) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">switch</span> (m-&gt;Type())</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_topology.html#a461eba4998b5d5dac48d6102c8c63beca8458eba8ae564ca5f914a2f93eedeaed\">Mesh::typeTriangular</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( uint i = 0; i &lt; m-&gt;FaceCount(); ++i )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( uint j = 0; j &lt; 3; j++ )</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( !m-&gt;HasAdjacentTriangle( i, j ) )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">case</span> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_topology.html#a461eba4998b5d5dac48d6102c8c63beca390d96966d786eb4e11035e9439f755e\">Mesh::typeQuadric</a>:</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( uint i = 0; i &lt; m-&gt;FaceCount(); ++i )</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">for</span> ( uint j = 0; j &lt; 4; j++ )</div>\n\
<div class=\"line\">                    <span class=\"keywordflow\">if</span> ( !m-&gt;HasAdjacentQuad( i, j ) )</div>\n\
<div class=\"line\">                        <span class=\"keywordflow\">return</span> <span class=\"keyword\">true</span>;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">default</span>:</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>(<span class=\"stringliteral\">&quot;Unexpected internal condition&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> <span class=\"keyword\">false</span>;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";