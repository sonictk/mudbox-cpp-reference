var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PLYImport/rply.c</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_p_l_y_import_2rply_8c-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PLYImport/rply.c</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PLYImport/rply.c</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2008 Autodesk, Inc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CREATED: October 2008</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * RPly library, read/write PLY files</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Diego Nehab, Princeton University</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * http://www.cs.princeton.edu/~diego/professional/rply</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * This library is distributed under the MIT License. See notice</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * at the end of this file.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;ctype.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;string.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;limits.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;float.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdarg.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdlib.h&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stddef.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;rply.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Constants </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define WORDSIZE 256</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define LINESIZE 1024</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define BUFFERSIZE (8*1024)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">enum</span> e_ply_io_mode_ {</div>\n\
<div class=\"line\">    PLY_READ, </div>\n\
<div class=\"line\">    PLY_WRITE</div>\n\
<div class=\"line\">} e_ply_io_mode;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<span class=\"keyword\">const</span> ply_storage_mode_list[] = {</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;binary_big_endian&quot;</span>, <span class=\"stringliteral\">&quot;binary_little_endian&quot;</span>, <span class=\"stringliteral\">&quot;ascii&quot;</span>, NULL</div>\n\
<div class=\"line\">};     <span class=\"comment\">/* order matches e_ply_storage_mode enum */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<span class=\"keyword\">const</span> ply_type_list[] = {</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;int8&quot;</span>, <span class=\"stringliteral\">&quot;uint8&quot;</span>, <span class=\"stringliteral\">&quot;int16&quot;</span>, <span class=\"stringliteral\">&quot;uint16&quot;</span>, </div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;int32&quot;</span>, <span class=\"stringliteral\">&quot;uint32&quot;</span>, <span class=\"stringliteral\">&quot;float32&quot;</span>, <span class=\"stringliteral\">&quot;float64&quot;</span>,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;char&quot;</span>, <span class=\"stringliteral\">&quot;uchar&quot;</span>, <span class=\"stringliteral\">&quot;short&quot;</span>, <span class=\"stringliteral\">&quot;ushort&quot;</span>, </div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;int&quot;</span>, <span class=\"stringliteral\">&quot;uint&quot;</span>, <span class=\"stringliteral\">&quot;float&quot;</span>, <span class=\"stringliteral\">&quot;double&quot;</span>,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;list&quot;</span>, NULL</div>\n\
<div class=\"line\">};     <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Property reading callback argument</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * element: name of element being processed</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * property: name of property being processed</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * nelements: number of elements of this kind in file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * instance_index: index current element of this kind being processed</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * length: number of values in current list (or 1 for scalars)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * value_index: index of current value int this list (or 0 for scalars)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * value: value of property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * pdata/idata: user data defined with ply_set_cb</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns handle to ply file if succesful, NULL otherwise.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_argument_ {</div>\n\
<div class=\"line\">    p_ply_element element;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> instance_index;</div>\n\
<div class=\"line\">    p_ply_property property;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> <a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3c8469415bbc83dd1341af15c67f1cef\">length</a>, value_index;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> *pdata;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> idata;</div>\n\
<div class=\"line\">} t_ply_argument;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Property information</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: name of this property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * type: type of this property (list or type of scalar value)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * length_type, value_type: type of list property count and values</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * read_cb: function to be called when this property is called</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if should continue processing file, 0 if should abort.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_property_ {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>[WORDSIZE];</div>\n\
<div class=\"line\">    e_ply_type <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>, value_type, length_type;</div>\n\
<div class=\"line\">    p_ply_read_cb read_cb;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> *pdata;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> idata;</div>\n\
<div class=\"line\">} t_ply_property; </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Element information</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * name: name of this property</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ninstances: number of elements of this type in file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * property: property descriptions for this element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * nproperty: number of properties in this element</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Returns 1 if should continue processing file, 0 if should abort.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_element_ {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>[WORDSIZE];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> ninstances;</div>\n\
<div class=\"line\">    p_ply_property property;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> nproperties;</div>\n\
<div class=\"line\">} t_ply_element;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Input/output driver</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Depending on file mode, different functions are used to read/write </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * property fields. The drivers make it transparent to read/write in ascii, </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * big endian or little endian cases.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a> (*p_ply_ihandler)(p_ply ply, <span class=\"keywordtype\">double</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a> (*p_ply_ichunk)(p_ply ply, <span class=\"keywordtype\">void</span> *anydata, <span class=\"keywordtype\">size_t</span> <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_idriver_ {</div>\n\
<div class=\"line\">    p_ply_ihandler ihandler[16];</div>\n\
<div class=\"line\">    p_ply_ichunk ichunk;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>;</div>\n\
<div class=\"line\">} t_ply_idriver;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> t_ply_idriver *p_ply_idriver;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a> (*p_ply_ohandler)(p_ply ply, <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa813ad7a4a00cda401ffd0c336154620\">int</a> (*p_ply_ochunk)(p_ply ply, <span class=\"keywordtype\">void</span> *anydata, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_odriver_ {</div>\n\
<div class=\"line\">    p_ply_ohandler ohandler[16];</div>\n\
<div class=\"line\">    p_ply_ochunk ochunk;</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>;</div>\n\
<div class=\"line\">} t_ply_odriver;</div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> t_ply_odriver *p_ply_odriver;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Ply file handle. </span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * io_mode: read or write (from e_ply_io_mode)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * storage_mode: mode of file associated with handle (from e_ply_storage_mode)</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * element: elements description for this file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * nelement: number of different elements in file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * comment: comments for this file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ncomments: number of comments in file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * obj_info: obj_info items for this file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * nobj_infos: number of obj_info items in file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * fp: file pointer associated with ply file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * c: last character read from ply file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * buffer: last word/chunck of data read from ply file</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * buffer_first, buffer_last: interval of untouched good data in buffer</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * buffer_token: start of parsed token (line or word) in buffer</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * idriver, odriver: input driver used to get property fields from file </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * argument: storage space for callback arguments</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * welement, wproperty: element/property type being written</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * winstance_index: index of instance of current element being written</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * wvalue_index: index of list property value being written </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * wlength: number of values in list property being written</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * error_cb: callback for error messages</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">struct </span>t_ply_ {</div>\n\
<div class=\"line\">    e_ply_io_mode io_mode;</div>\n\
<div class=\"line\">    e_ply_storage_mode storage_mode;</div>\n\
<div class=\"line\">    p_ply_element element;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> nelements;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *comment;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> ncomments;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *obj_info;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> nobj_infos;</div>\n\
<div class=\"line\">    FILE *fp;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a1f2d7f8147412c43ba2303a56f97ee73\">c</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a>[BUFFERSIZE];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> buffer_first, buffer_token, buffer_last;</div>\n\
<div class=\"line\">    p_ply_idriver idriver;</div>\n\
<div class=\"line\">    p_ply_odriver odriver;</div>\n\
<div class=\"line\">    t_ply_argument argument;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> welement, wproperty;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> winstance_index, wvalue_index, wlength;</div>\n\
<div class=\"line\">    p_ply_error_cb error_cb;</div>\n\
<div class=\"line\">} t_ply;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * I/O functions and drivers</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_idriver ply_idriver_ascii;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_idriver ply_idriver_binary;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_idriver ply_idriver_binary_reverse;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_odriver ply_odriver_ascii;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_odriver ply_odriver_binary;</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_odriver ply_odriver_binary_reverse;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_word(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_check_word(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_line(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_check_line(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_chunk(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_chunk_reverse(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_write_chunk(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_write_chunk_reverse(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_reverse(<span class=\"keywordtype\">void</span> *anydata, <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * String functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_find_string(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *item, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">const</span> list[]);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_element ply_find_element(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_property ply_find_property(p_ply_element element, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Header parsing</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_format(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_comment(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_obj_info(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_property(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_element(p_ply ply);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Error handling</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_error_cb(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *message);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_error(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *fmt, ...);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Memory allocation and initialization</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_init(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_element_init(p_ply_element element);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_property_init(p_ply_property property);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply ply_alloc(<span class=\"keywordtype\">void</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_element ply_grow_element(p_ply ply);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_property ply_grow_property(p_ply ply, p_ply_element element);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> *ply_grow_array(p_ply ply, <span class=\"keywordtype\">void</span> **<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a5229d099e9ac4bec02ec527c371b2d50\">pointer</a>, <span class=\"keywordtype\">long</span> *nmemb, <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Special functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> e_ply_storage_mode ply_arch_endian(<span class=\"keywordtype\">void</span>);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_type_check(<span class=\"keywordtype\">void</span>); </div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Auxiliary read functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_element(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_argument argument);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_property(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property property, p_ply_argument argument);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_list_property(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property property, p_ply_argument argument);</div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_scalar_property(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property property, p_ply_argument argument);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Buffer support functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* pointers to tokenized word and line in buffer */</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define BWORD(p) (p-&gt;buffer + p-&gt;buffer_token)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define BLINE(p) (p-&gt;buffer + p-&gt;buffer_token)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* pointer to start of untouched bytes in buffer */</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define BFIRST(p) (p-&gt;buffer + p-&gt;buffer_first) </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* number of bytes untouched in buffer */</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define BSIZE(p) (p-&gt;buffer_last - p-&gt;buffer_first) </span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* consumes data from buffer */</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#define BSKIP(p, s) (p-&gt;buffer_first += s)</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* refills the buffer */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> BREFILL(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"comment\">/* move untouched data to beginning of buffer */</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a> = BSIZE(ply);</div>\n\
<div class=\"line\">    memmove(ply-&gt;buffer, BFIRST(ply), size);</div>\n\
<div class=\"line\">    ply-&gt;buffer_last = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">    ply-&gt;buffer_first = ply-&gt;buffer_token = 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* fill remaining with new data */</span></div>\n\
<div class=\"line\">    size = fread(ply-&gt;buffer+size, 1, BUFFERSIZE-size-1, ply-&gt;fp);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* place sentinel so we can use str* functions with buffer */</span></div>\n\
<div class=\"line\">    ply-&gt;buffer[BUFFERSIZE-1] = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* check if read failed */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (size &lt;= 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* increase size to account for new data */</span></div>\n\
<div class=\"line\">    ply-&gt;buffer_last += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8f853268a6a93ade1ff556b79420cda3\">size</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Exported functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Read support functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply ply_open(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad977737dfc9a274a62741b9500c49a32\">name</a>, p_ply_error_cb error_cb) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qtransportauthdefs__qws_8h.html#a0932b349ee120b14273041f2ec489165\">magic</a>[5] = <span class=\"stringliteral\">&quot;    &quot;</span>;</div>\n\
<div class=\"line\">    FILE *fp = NULL; </div>\n\
<div class=\"line\">    p_ply ply = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (error_cb == NULL) error_cb = ply_error_cb;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_type_check()) {</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Incompatible type system&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    assert(name);</div>\n\
<div class=\"line\">    fp = fopen(name, <span class=\"stringliteral\">&quot;rb&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fp) {</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Unable to open file&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fread(magic, 1, 4, fp) &lt; 4) {</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Error reading from file&quot;</span>);</div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(magic, <span class=\"stringliteral\">&quot;ply\\n&quot;</span>)) {</div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Not a PLY file. Expected magic number &#39;ply\\\\n&#39;&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ply = ply_alloc();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply) {</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Out of memory&quot;</span>);</div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ply-&gt;fp = fp;</div>\n\
<div class=\"line\">    ply-&gt;io_mode = PLY_READ;</div>\n\
<div class=\"line\">    ply-&gt;error_cb = error_cb;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_read_header(p_ply ply) {</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* parse file format */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_header_format(ply)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid file format&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* parse elements, comments or obj_infos until the end of header */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;end_header&quot;</span>)) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ply_read_header_comment(ply) &amp;&amp; </div>\n\
<div class=\"line\">                !ply_read_header_element(ply) &amp;&amp; </div>\n\
<div class=\"line\">                !ply_read_header_obj_info(ply)) {</div>\n\
<div class=\"line\">            ply_error(ply, <span class=\"stringliteral\">&quot;Unexpected token &#39;%s&#39;&quot;</span>, BWORD(ply));</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">long</span> ply_set_read_cb(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *element_name, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* property_name, p_ply_read_cb read_cb, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">void</span> *pdata, <span class=\"keywordtype\">long</span> idata) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL; </div>\n\
<div class=\"line\">    p_ply_property <span class=\"keyword\">property</span> = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; element_name &amp;&amp; property_name);</div>\n\
<div class=\"line\">    element = ply_find_element(ply, element_name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!element) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = ply_find_property(element, property_name);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!property) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;read_cb = read_cb;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;pdata = pdata;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;idata = idata;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">int</span>) element-&gt;ninstances;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_read(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> i;</div>\n\
<div class=\"line\">    p_ply_argument argument;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    argument = &amp;ply-&gt;argument;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* for each element type */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; ply-&gt;nelements; i++) {</div>\n\
<div class=\"line\">        p_ply_element element = &amp;ply-&gt;element[i];</div>\n\
<div class=\"line\">        argument-&gt;element = element;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ply_read_element(ply, element, argument))</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Write support functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply ply_create(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, e_ply_storage_mode storage_mode, </div>\n\
<div class=\"line\">        p_ply_error_cb error_cb) {</div>\n\
<div class=\"line\">    FILE *fp = NULL;</div>\n\
<div class=\"line\">    p_ply ply = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (error_cb == NULL) error_cb = ply_error_cb;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_type_check()) {</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Incompatible type system&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    assert(name &amp;&amp; storage_mode &lt;= PLY_DEFAULT);</div>\n\
<div class=\"line\">    fp = fopen(name, <span class=\"stringliteral\">&quot;wb&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!fp) {</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Unable to create file&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ply = ply_alloc();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply) {</div>\n\
<div class=\"line\">        fclose(fp);</div>\n\
<div class=\"line\">        error_cb(<span class=\"stringliteral\">&quot;Out of memory&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ply-&gt;io_mode = PLY_WRITE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (storage_mode == PLY_DEFAULT) storage_mode = ply_arch_endian();</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (storage_mode == PLY_ASCII) ply-&gt;odriver = &amp;ply_odriver_ascii;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (storage_mode == ply_arch_endian()) </div>\n\
<div class=\"line\">        ply-&gt;odriver = &amp;ply_odriver_binary;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> ply-&gt;odriver = &amp;ply_odriver_binary_reverse;</div>\n\
<div class=\"line\">    ply-&gt;storage_mode = storage_mode;</div>\n\
<div class=\"line\">    ply-&gt;fp = fp;</div>\n\
<div class=\"line\">    ply-&gt;error_cb = error_cb;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_element(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, <span class=\"keywordtype\">long</span> ninstances) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_WRITE);</div>\n\
<div class=\"line\">    assert(name &amp;&amp; strlen(name) &lt; WORDSIZE &amp;&amp; ninstances &gt;= 0);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strlen(name) &gt;= WORDSIZE || ninstances &lt; 0) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid arguments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    element = ply_grow_element(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!element) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(element-&gt;name, name);</div>\n\
<div class=\"line\">    element-&gt;ninstances = ninstances;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_scalar_property(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, e_ply_type <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    p_ply_property <span class=\"keyword\">property</span> = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_WRITE);</div>\n\
<div class=\"line\">    assert(name &amp;&amp; strlen(name) &lt; WORDSIZE);</div>\n\
<div class=\"line\">    assert(type &lt; PLY_LIST);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strlen(name) &gt;= WORDSIZE || type &gt;= PLY_LIST) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid arguments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    element = &amp;ply-&gt;element[ply-&gt;nelements-1];</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = ply_grow_property(ply, element);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!property) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(property-&gt;name, name);</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;type = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a63267399cd2a2ee217572c11d2e54f07\">type</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_list_property(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, </div>\n\
<div class=\"line\">        e_ply_type length_type, e_ply_type value_type) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    p_ply_property <span class=\"keyword\">property</span> = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_WRITE);</div>\n\
<div class=\"line\">    assert(name &amp;&amp; strlen(name) &lt; WORDSIZE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strlen(name) &gt;= WORDSIZE) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid arguments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    assert(length_type &lt; PLY_LIST);</div>\n\
<div class=\"line\">    assert(value_type &lt; PLY_LIST);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (length_type &gt;= PLY_LIST || value_type &gt;= PLY_LIST) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid arguments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    element = &amp;ply-&gt;element[ply-&gt;nelements-1];</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = ply_grow_property(ply, element);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!property) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(property-&gt;name, name);</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;type = PLY_LIST;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;length_type = length_type;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;value_type = value_type;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_property(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name, e_ply_type type,</div>\n\
<div class=\"line\">        e_ply_type length_type, e_ply_type value_type) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (type == PLY_LIST) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ply_add_list_property(ply, name, length_type, value_type);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ply_add_scalar_property(ply, name, type);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_comment(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *comment) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *new_comment = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; comment &amp;&amp; strlen(comment) &lt; LINESIZE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!comment || strlen(comment) &gt;= LINESIZE) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid arguments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    new_comment = (<span class=\"keywordtype\">char</span> *) ply_grow_array(ply, (<span class=\"keywordtype\">void</span> **) &amp;ply-&gt;comment,</div>\n\
<div class=\"line\">            &amp;ply-&gt;ncomments, LINESIZE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!new_comment) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(new_comment, comment);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_add_obj_info(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *obj_info) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *new_obj_info = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; obj_info &amp;&amp; strlen(obj_info) &lt; LINESIZE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!obj_info || strlen(obj_info) &gt;= LINESIZE) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Invalid arguments&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    new_obj_info = (<span class=\"keywordtype\">char</span> *) ply_grow_array(ply, (<span class=\"keywordtype\">void</span> **) &amp;ply-&gt;obj_info,</div>\n\
<div class=\"line\">            &amp;ply-&gt;nobj_infos, LINESIZE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!new_obj_info) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(new_obj_info, obj_info);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_write_header(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> i, j;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_WRITE);</div>\n\
<div class=\"line\">    assert(ply-&gt;element || ply-&gt;nelements == 0); </div>\n\
<div class=\"line\">    assert(!ply-&gt;element || ply-&gt;nelements &gt; 0); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;ply\\nformat %s 1.0\\n&quot;</span>, </div>\n\
<div class=\"line\">                ply_storage_mode_list[ply-&gt;storage_mode]) &lt;= 0) <span class=\"keywordflow\">goto</span> error;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; ply-&gt;ncomments; i++)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;comment %s\\n&quot;</span>, ply-&gt;comment + LINESIZE*i) &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">goto</span> error;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; ply-&gt;nobj_infos; i++)</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;obj_info %s\\n&quot;</span>, ply-&gt;obj_info + LINESIZE*i) &lt;= 0)</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">goto</span> error;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; ply-&gt;nelements; i++) {</div>\n\
<div class=\"line\">        p_ply_element element = &amp;ply-&gt;element[i];</div>\n\
<div class=\"line\">        assert(element-&gt;property || element-&gt;nproperties == 0); </div>\n\
<div class=\"line\">        assert(!element-&gt;property || element-&gt;nproperties &gt; 0); </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;element %s %ld\\n&quot;</span>, element-&gt;name, </div>\n\
<div class=\"line\">                    element-&gt;ninstances) &lt;= 0) <span class=\"keywordflow\">goto</span> error;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (j = 0; j &lt; element-&gt;nproperties; j++) {</div>\n\
<div class=\"line\">            p_ply_property <span class=\"keyword\">property</span> = &amp;element-&gt;property[j];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (property-&gt;type == PLY_LIST) {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;property list %s %s %s\\n&quot;</span>, </div>\n\
<div class=\"line\">                            ply_type_list[property-&gt;length_type],</div>\n\
<div class=\"line\">                            ply_type_list[property-&gt;value_type],</div>\n\
<div class=\"line\">                            property-&gt;name) &lt;= 0) <span class=\"keywordflow\">goto</span> error;</div>\n\
<div class=\"line\">            } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">if</span> (fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;property %s %s\\n&quot;</span>, </div>\n\
<div class=\"line\">                            ply_type_list[property-&gt;type],</div>\n\
<div class=\"line\">                            property-&gt;name) &lt;= 0) <span class=\"keywordflow\">goto</span> error;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;end_header\\n&quot;</span>) &gt; 0;</div>\n\
<div class=\"line\">error:</div>\n\
<div class=\"line\">    ply_error(ply, <span class=\"stringliteral\">&quot;Error writing to file&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_write(p_ply ply, <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value</a>) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    p_ply_property <span class=\"keyword\">property</span> = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> type = -1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> breakafter = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;welement &gt; ply-&gt;nelements) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    element = &amp;ply-&gt;element[ply-&gt;welement];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;wproperty &gt; element-&gt;nproperties) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = &amp;element-&gt;property[ply-&gt;wproperty];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (property-&gt;type == PLY_LIST) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ply-&gt;wvalue_index == 0) {</div>\n\
<div class=\"line\">            type = <span class=\"keyword\">property</span>-&gt;length_type;</div>\n\
<div class=\"line\">            ply-&gt;wlength = (long) value;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> type = <span class=\"keyword\">property</span>-&gt;value_type;</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        type = <span class=\"keyword\">property</span>-&gt;type;</div>\n\
<div class=\"line\">        ply-&gt;wlength = 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;odriver-&gt;ohandler[type](ply, value)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Failed writing %s of %s %d (%s: %s)&quot;</span>, </div>\n\
<div class=\"line\">                    property-&gt;name, element-&gt;name, </div>\n\
<div class=\"line\">                    ply-&gt;winstance_index, </div>\n\
<div class=\"line\">                    ply-&gt;odriver-&gt;name, ply_type_list[type]);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    ply-&gt;wvalue_index++;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;wvalue_index &gt; ply-&gt;wlength) {</div>\n\
<div class=\"line\">        ply-&gt;wvalue_index = 0;</div>\n\
<div class=\"line\">        ply-&gt;wproperty++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;wproperty &gt;= element-&gt;nproperties) {</div>\n\
<div class=\"line\">        ply-&gt;wproperty = 0;</div>\n\
<div class=\"line\">        ply-&gt;winstance_index++;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ply-&gt;storage_mode == PLY_ASCII) breakafter = 1;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;winstance_index &gt;= element-&gt;ninstances) {</div>\n\
<div class=\"line\">        ply-&gt;winstance_index = 0;</div>\n\
<div class=\"line\">        ply-&gt;welement++;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> !breakafter || putc(<span class=\"charliteral\">&#39;\\n&#39;</span>, ply-&gt;fp) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_close(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> i;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp);</div>\n\
<div class=\"line\">    assert(ply-&gt;element || ply-&gt;nelements == 0);</div>\n\
<div class=\"line\">    assert(!ply-&gt;element || ply-&gt;nelements &gt; 0);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* write last chunk to file */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;io_mode == PLY_WRITE &amp;&amp; </div>\n\
<div class=\"line\">      fwrite(ply-&gt;buffer, 1, ply-&gt;buffer_last, ply-&gt;fp) &lt; ply-&gt;buffer_last) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Error closing up&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    fclose(ply-&gt;fp);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* free all memory used by handle */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;element) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (i = 0; i &lt; ply-&gt;nelements; i++) {</div>\n\
<div class=\"line\">            p_ply_element element = &amp;ply-&gt;element[i];</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (element-&gt;property) free(element-&gt;property);</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        free(ply-&gt;element);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;obj_info) free(ply-&gt;obj_info);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;comment) free(ply-&gt;comment);</div>\n\
<div class=\"line\">    free(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Query support functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\">p_ply_element ply_get_next_element(p_ply ply, </div>\n\
<div class=\"line\">        p_ply_element last) {</div>\n\
<div class=\"line\">    assert(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!last) <span class=\"keywordflow\">return</span> ply-&gt;element;</div>\n\
<div class=\"line\">    last++;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (last &lt; ply-&gt;element + ply-&gt;nelements) <span class=\"keywordflow\">return</span> last;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_element_info(p_ply_element element, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>** name,</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">long</span> *ninstances) {</div>\n\
<div class=\"line\">    assert(element);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (name) *name = element-&gt;name;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ninstances) *ninstances = (long) element-&gt;ninstances;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">p_ply_property ply_get_next_property(p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property last) {</div>\n\
<div class=\"line\">    assert(element);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!last) <span class=\"keywordflow\">return</span> element-&gt;property;</div>\n\
<div class=\"line\">    last++;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (last &lt; element-&gt;property + element-&gt;nproperties) <span class=\"keywordflow\">return</span> last;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_property_info(p_ply_property property, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>** name,</div>\n\
<div class=\"line\">        e_ply_type *type, e_ply_type *length_type, e_ply_type *value_type) {</div>\n\
<div class=\"line\">    assert(property);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (name) *name = <span class=\"keyword\">property</span>-&gt;name;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (type) *type = <span class=\"keyword\">property</span>-&gt;type;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (length_type) *length_type = <span class=\"keyword\">property</span>-&gt;length_type;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value_type) *value_type = <span class=\"keyword\">property</span>-&gt;value_type;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *ply_get_next_comment(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *last) {</div>\n\
<div class=\"line\">    assert(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!last) <span class=\"keywordflow\">return</span> ply-&gt;comment; </div>\n\
<div class=\"line\">    last += LINESIZE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (last &lt; ply-&gt;comment + LINESIZE*ply-&gt;ncomments) <span class=\"keywordflow\">return</span> last;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *ply_get_next_obj_info(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *last) {</div>\n\
<div class=\"line\">    assert(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!last) <span class=\"keywordflow\">return</span> ply-&gt;obj_info; </div>\n\
<div class=\"line\">    last += LINESIZE;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (last &lt; ply-&gt;obj_info + LINESIZE*ply-&gt;nobj_infos) <span class=\"keywordflow\">return</span> last;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Callback argument support functions </span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_argument_element(p_ply_argument argument, </div>\n\
<div class=\"line\">        p_ply_element *element, <span class=\"keywordtype\">long</span> *instance_index) {</div>\n\
<div class=\"line\">    assert(argument);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!argument) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (element) *element = argument-&gt;element;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (instance_index) *instance_index = argument-&gt;instance_index;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_argument_property(p_ply_argument argument, </div>\n\
<div class=\"line\">        p_ply_property *property, <span class=\"keywordtype\">long</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3c8469415bbc83dd1341af15c67f1cef\">length</a>, <span class=\"keywordtype\">long</span> *value_index) {</div>\n\
<div class=\"line\">    assert(argument);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!argument) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (property) *<span class=\"keyword\">property</span> = argument-&gt;property;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (length) *length = argument-&gt;length;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value_index) *value_index = argument-&gt;value_index;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">int</span> ply_get_argument_user_data(p_ply_argument argument, <span class=\"keywordtype\">void</span> **pdata, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">long</span> *idata) {</div>\n\
<div class=\"line\">    assert(argument);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!argument) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (pdata) *pdata = argument-&gt;pdata;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (idata) *idata = argument-&gt;idata;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">double</span> ply_get_argument_value(p_ply_argument argument) {</div>\n\
<div class=\"line\">    assert(argument);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!argument) <span class=\"keywordflow\">return</span> 0.0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> argument-&gt;value;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Internal functions</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_list_property(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property property, p_ply_argument argument) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> l;</div>\n\
<div class=\"line\">    p_ply_read_cb read_cb = <span class=\"keyword\">property</span>-&gt;read_cb;</div>\n\
<div class=\"line\">    p_ply_ihandler *driver = ply-&gt;idriver-&gt;ihandler; </div>\n\
<div class=\"line\">    <span class=\"comment\">/* get list length */</span></div>\n\
<div class=\"line\">    p_ply_ihandler handler = driver[<span class=\"keyword\">property</span>-&gt;length_type];</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3c8469415bbc83dd1341af15c67f1cef\">length</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!handler(ply, &amp;length)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Error reading &#39;%s&#39; of &#39;%s&#39; number %d&quot;</span>,</div>\n\
<div class=\"line\">                property-&gt;name, element-&gt;name, argument-&gt;instance_index);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* invoke callback to pass length in value field */</span></div>\n\
<div class=\"line\">    argument-&gt;length = (long) length;</div>\n\
<div class=\"line\">    argument-&gt;value_index = -1;</div>\n\
<div class=\"line\">    argument-&gt;value = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3c8469415bbc83dd1341af15c67f1cef\">length</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (read_cb &amp;&amp; !read_cb(argument)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Aborted by user&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* read list values */</span></div>\n\
<div class=\"line\">    handler = driver[<span class=\"keyword\">property</span>-&gt;value_type];</div>\n\
<div class=\"line\">    <span class=\"comment\">/* for each value in list */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (l = 0; l &lt; (long) length; l++) {</div>\n\
<div class=\"line\">        <span class=\"comment\">/* read value from file */</span></div>\n\
<div class=\"line\">        argument-&gt;value_index = l;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!handler(ply, &amp;argument-&gt;value)) {</div>\n\
<div class=\"line\">            ply_error(ply, <span class=\"stringliteral\">&quot;Error reading value number %d of &#39;%s&#39; of &quot;</span></div>\n\
<div class=\"line\">                    <span class=\"stringliteral\">&quot;&#39;%s&#39; number %d&quot;</span>, l+1, property-&gt;name, </div>\n\
<div class=\"line\">                    element-&gt;name, argument-&gt;instance_index);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"comment\">/* invoke callback to pass value */</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (read_cb &amp;&amp; !read_cb(argument)) {</div>\n\
<div class=\"line\">            ply_error(ply, <span class=\"stringliteral\">&quot;Aborted by user&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_scalar_property(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property property, p_ply_argument argument) {</div>\n\
<div class=\"line\">    p_ply_read_cb read_cb = <span class=\"keyword\">property</span>-&gt;read_cb;</div>\n\
<div class=\"line\">    p_ply_ihandler *driver = ply-&gt;idriver-&gt;ihandler; </div>\n\
<div class=\"line\">    p_ply_ihandler handler = driver[<span class=\"keyword\">property</span>-&gt;type];</div>\n\
<div class=\"line\">    argument-&gt;length = 1;</div>\n\
<div class=\"line\">    argument-&gt;value_index = 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!handler(ply, &amp;argument-&gt;value)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Error reading &#39;%s&#39; of &#39;%s&#39; number %d&quot;</span>,</div>\n\
<div class=\"line\">                property-&gt;name, element-&gt;name, argument-&gt;instance_index);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (read_cb &amp;&amp; !read_cb(argument)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Aborted by user&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_property(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_property property, p_ply_argument argument) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (property-&gt;type == PLY_LIST) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ply_read_list_property(ply, element, property, argument);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ply_read_scalar_property(ply, element, property, argument);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_element(p_ply ply, p_ply_element element, </div>\n\
<div class=\"line\">        p_ply_argument argument) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> j, k;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* for each element of this type */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (j = 0; j &lt; element-&gt;ninstances; j++) {</div>\n\
<div class=\"line\">        argument-&gt;instance_index = j;</div>\n\
<div class=\"line\">        <span class=\"comment\">/* for each property */</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (k = 0; k &lt; element-&gt;nproperties; k++) {</div>\n\
<div class=\"line\">            p_ply_property <span class=\"keyword\">property</span> = &amp;element-&gt;property[k];</div>\n\
<div class=\"line\">            argument-&gt;property = property;</div>\n\
<div class=\"line\">            argument-&gt;pdata = <span class=\"keyword\">property</span>-&gt;pdata;</div>\n\
<div class=\"line\">            argument-&gt;idata = <span class=\"keyword\">property</span>-&gt;idata;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!ply_read_property(ply, element, property, argument))</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_find_string(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *item, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span>* <span class=\"keyword\">const</span> list[]) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i;</div>\n\
<div class=\"line\">    assert(item &amp;&amp; list);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; list[i]; i++) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!strcmp(list[i], item)) <span class=\"keywordflow\">return</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> -1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_element ply_find_element(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name) {</div>\n\
<div class=\"line\">    p_ply_element element;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i, nelements;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; name); </div>\n\
<div class=\"line\">    element = ply-&gt;element;</div>\n\
<div class=\"line\">    nelements = ply-&gt;nelements;</div>\n\
<div class=\"line\">    assert(element || nelements == 0); </div>\n\
<div class=\"line\">    assert(!element || nelements &gt; 0); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; nelements; i++) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!strcmp(element[i].name, name)) <span class=\"keywordflow\">return</span> &amp;element[i];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_property ply_find_property(p_ply_element element, </div>\n\
<div class=\"line\">        <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *name) {</div>\n\
<div class=\"line\">    p_ply_property property;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> i, nproperties;</div>\n\
<div class=\"line\">    assert(element &amp;&amp; name); </div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = element-&gt;property;</div>\n\
<div class=\"line\">    nproperties = element-&gt;nproperties;</div>\n\
<div class=\"line\">    assert(property || nproperties == 0); </div>\n\
<div class=\"line\">    assert(!property || nproperties &gt; 0); </div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; nproperties; i++) </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!strcmp(property[i].name, name)) <span class=\"keywordflow\">return</span> &amp;<span class=\"keyword\">property</span>[i];</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_check_word(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strlen(BLINE(ply)) &gt;= WORDSIZE) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Word too long&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_word(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a653819996e713edf9c01a5b564199189\">t</a> = 0;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* skip leading blanks */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (1) {</div>\n\
<div class=\"line\">        t = strspn(BFIRST(ply), <span class=\"stringliteral\">&quot; \\n\\r\\t&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"comment\">/* check if all buffer was made of blanks */</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (t &gt;= BSIZE(ply)) {</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (!BREFILL(ply)) {</div>\n\
<div class=\"line\">                ply_error(ply, <span class=\"stringliteral\">&quot;Unexpected end of file&quot;</span>);</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">            }</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">break</span>; </div>\n\
<div class=\"line\">    } </div>\n\
<div class=\"line\">    BSKIP(ply, t); </div>\n\
<div class=\"line\">    <span class=\"comment\">/* look for a space after the current word */</span></div>\n\
<div class=\"line\">    t = strcspn(BFIRST(ply), <span class=\"stringliteral\">&quot; \\n\\r\\t&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* if we didn&#39;t reach the end of the buffer, we are done */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (t &lt; BSIZE(ply)) {</div>\n\
<div class=\"line\">        ply-&gt;buffer_token = ply-&gt;buffer_first;</div>\n\
<div class=\"line\">        BSKIP(ply, t);</div>\n\
<div class=\"line\">        *BFIRST(ply) = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">        BSKIP(ply, 1);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ply_check_word(ply);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* otherwise, try to refill buffer */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!BREFILL(ply)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Unexpected end of file&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* keep looking from where we left */</span></div>\n\
<div class=\"line\">    t += strcspn(BFIRST(ply) + t, <span class=\"stringliteral\">&quot; \\n\\r\\t&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* check if the token is too large for our buffer */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (t &gt;= BSIZE(ply)) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Token too large&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* we are done */</span></div>\n\
<div class=\"line\">    ply-&gt;buffer_token = ply-&gt;buffer_first;</div>\n\
<div class=\"line\">    BSKIP(ply, t);</div>\n\
<div class=\"line\">    *BFIRST(ply) = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    BSKIP(ply, 1);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply_check_word(ply);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_check_line(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strlen(BLINE(ply)) &gt;= LINESIZE) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Line too long&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_line(p_ply ply) {</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a> = NULL;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* look for a end of line */</span></div>\n\
<div class=\"line\">    end = strchr(BFIRST(ply), <span class=\"charliteral\">&#39;\\n&#39;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* if we didn&#39;t reach the end of the buffer, we are done */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (end) {</div>\n\
<div class=\"line\">        ply-&gt;buffer_token = ply-&gt;buffer_first;</div>\n\
<div class=\"line\">        BSKIP(ply, end - BFIRST(ply));</div>\n\
<div class=\"line\">        *BFIRST(ply) = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">        BSKIP(ply, 1);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> ply_check_line(ply);</div>\n\
<div class=\"line\">    } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">        end = ply-&gt;buffer + BSIZE(ply); </div>\n\
<div class=\"line\">        <span class=\"comment\">/* otherwise, try to refill buffer */</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!BREFILL(ply)) {</div>\n\
<div class=\"line\">            ply_error(ply, <span class=\"stringliteral\">&quot;Unexpected end of file&quot;</span>);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* keep looking from where we left */</span></div>\n\
<div class=\"line\">    end = strchr(end, <span class=\"charliteral\">&#39;\\n&#39;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">/* check if the token is too large for our buffer */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!end) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Token too large&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* we are done */</span></div>\n\
<div class=\"line\">    ply-&gt;buffer_token = ply-&gt;buffer_first;</div>\n\
<div class=\"line\">    BSKIP(ply, end - BFIRST(ply));</div>\n\
<div class=\"line\">    *BFIRST(ply) = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    BSKIP(ply, 1);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply_check_line(ply);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_chunk(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> size) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3667f558219c90437106b544a3ca00b8\">buffer</a> = (<span class=\"keywordtype\">char</span> *) anybuffer;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> i = 0;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    assert(ply-&gt;buffer_first &lt;= ply-&gt;buffer_last);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (i &lt; size) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ply-&gt;buffer_first &lt; ply-&gt;buffer_last) {</div>\n\
<div class=\"line\">            buffer[i] = ply-&gt;buffer[ply-&gt;buffer_first];</div>\n\
<div class=\"line\">            ply-&gt;buffer_first++;</div>\n\
<div class=\"line\">            i++;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            ply-&gt;buffer_first = 0;</div>\n\
<div class=\"line\">            ply-&gt;buffer_last = fread(ply-&gt;buffer, 1, BUFFERSIZE, ply-&gt;fp);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (ply-&gt;buffer_last &lt;= 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_write_chunk(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> size) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *buffer = (<span class=\"keywordtype\">char</span> *) anybuffer;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> i = 0;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_WRITE);</div>\n\
<div class=\"line\">    assert(ply-&gt;buffer_last &lt;= BUFFERSIZE);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (i &lt; size) {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (ply-&gt;buffer_last &lt; BUFFERSIZE) {</div>\n\
<div class=\"line\">            ply-&gt;buffer[ply-&gt;buffer_last] = buffer[i];</div>\n\
<div class=\"line\">            ply-&gt;buffer_last++;</div>\n\
<div class=\"line\">            i++;</div>\n\
<div class=\"line\">        } <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">            ply-&gt;buffer_last = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (fwrite(ply-&gt;buffer, 1, BUFFERSIZE, ply-&gt;fp) &lt; BUFFERSIZE)</div>\n\
<div class=\"line\">                <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_write_chunk_reverse(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> size) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ret = 0;</div>\n\
<div class=\"line\">    ply_reverse(anybuffer, size);</div>\n\
<div class=\"line\">    ret = ply_write_chunk(ply, anybuffer, size);</div>\n\
<div class=\"line\">    ply_reverse(anybuffer, size);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ret;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_chunk_reverse(p_ply ply, <span class=\"keywordtype\">void</span> *anybuffer, <span class=\"keywordtype\">size_t</span> size) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_chunk(ply, anybuffer, size)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    ply_reverse(anybuffer, size);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_reverse(<span class=\"keywordtype\">void</span> *anydata, <span class=\"keywordtype\">size_t</span> size) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a> = (<span class=\"keywordtype\">char</span> *) anydata;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> temp;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">size_t</span> i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (i = 0; i &lt; size/2; i++) {</div>\n\
<div class=\"line\">        temp = data[i];</div>\n\
<div class=\"line\">        data[i] = data[size-i-1];</div>\n\
<div class=\"line\">        data[size-i-1] = temp;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_init(p_ply ply) {</div>\n\
<div class=\"line\">    ply-&gt;c = <span class=\"charliteral\">&#39; &#39;</span>;</div>\n\
<div class=\"line\">    ply-&gt;element = NULL;</div>\n\
<div class=\"line\">    ply-&gt;nelements = 0;</div>\n\
<div class=\"line\">    ply-&gt;comment = NULL;</div>\n\
<div class=\"line\">    ply-&gt;ncomments = 0;</div>\n\
<div class=\"line\">    ply-&gt;obj_info = NULL;</div>\n\
<div class=\"line\">    ply-&gt;nobj_infos = 0;</div>\n\
<div class=\"line\">    ply-&gt;idriver = NULL;</div>\n\
<div class=\"line\">    ply-&gt;odriver = NULL;</div>\n\
<div class=\"line\">    ply-&gt;buffer[0] = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    ply-&gt;buffer_first = ply-&gt;buffer_last = ply-&gt;buffer_token = 0;</div>\n\
<div class=\"line\">    ply-&gt;welement = 0;</div>\n\
<div class=\"line\">    ply-&gt;wproperty = 0;</div>\n\
<div class=\"line\">    ply-&gt;winstance_index = 0;</div>\n\
<div class=\"line\">    ply-&gt;wlength = 0;</div>\n\
<div class=\"line\">    ply-&gt;wvalue_index = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_element_init(p_ply_element element) {</div>\n\
<div class=\"line\">    element-&gt;name[0] = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    element-&gt;ninstances = 0;</div>\n\
<div class=\"line\">    element-&gt;property = NULL;</div>\n\
<div class=\"line\">    element-&gt;nproperties = 0; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_property_init(p_ply_property property) {</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;name[0] = <span class=\"charliteral\">&#39;\\0&#39;</span>;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;type = -1;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;length_type = -1;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;value_type = -1;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;read_cb = (p_ply_read_cb) NULL;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;pdata = NULL;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;idata = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply ply_alloc(<span class=\"keywordtype\">void</span>) {</div>\n\
<div class=\"line\">    p_ply ply = (p_ply) malloc(<span class=\"keyword\">sizeof</span>(t_ply));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply) <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    ply_init(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> *ply_grow_array(p_ply ply, <span class=\"keywordtype\">void</span> **<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a5229d099e9ac4bec02ec527c371b2d50\">pointer</a>, </div>\n\
<div class=\"line\">        <span class=\"keywordtype\">long</span> *nmemb, <span class=\"keywordtype\">long</span> size) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> *temp = *<a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a5229d099e9ac4bec02ec527c371b2d50\">pointer</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a> = *nmemb + 1;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!temp) temp = malloc(count*size);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> temp = realloc(temp, count*size);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!temp) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Out of memory&quot;</span>);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    *pointer = temp;</div>\n\
<div class=\"line\">    *nmemb = <a name=\"a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a9274fa62feb8371797c4c0312446e333\">count</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> (<span class=\"keywordtype\">char</span> *) temp + (count-1) * size;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_element ply_grow_element(p_ply ply) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    assert(ply); </div>\n\
<div class=\"line\">    assert(ply-&gt;element || ply-&gt;nelements == 0); </div>\n\
<div class=\"line\">    assert(!ply-&gt;element || ply-&gt;nelements &gt; 0); </div>\n\
<div class=\"line\">    element = (p_ply_element) ply_grow_array(ply, (<span class=\"keywordtype\">void</span> **) &amp;ply-&gt;element, </div>\n\
<div class=\"line\">            &amp;ply-&gt;nelements, <span class=\"keyword\">sizeof</span>(t_ply_element));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!element) <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    ply_element_init(element);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> element; </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> p_ply_property ply_grow_property(p_ply ply, p_ply_element element) {</div>\n\
<div class=\"line\">    p_ply_property <span class=\"keyword\">property</span> = NULL;</div>\n\
<div class=\"line\">    assert(ply);</div>\n\
<div class=\"line\">    assert(element);</div>\n\
<div class=\"line\">    assert(element-&gt;property || element-&gt;nproperties == 0);</div>\n\
<div class=\"line\">    assert(!element-&gt;property || element-&gt;nproperties &gt; 0);</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = (p_ply_property) ply_grow_array(ply, </div>\n\
<div class=\"line\">            (<span class=\"keywordtype\">void</span> **) &amp;element-&gt;property, </div>\n\
<div class=\"line\">            &amp;element-&gt;nproperties, <span class=\"keyword\">sizeof</span>(t_ply_property));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!property) <span class=\"keywordflow\">return</span> NULL;</div>\n\
<div class=\"line\">    ply_property_init(property);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> property;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_format(p_ply ply) {</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;format&quot;</span>)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    ply-&gt;storage_mode = ply_find_string(BWORD(ply), ply_storage_mode_list);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;storage_mode == (e_ply_storage_mode) (-1)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (ply-&gt;storage_mode == PLY_ASCII) ply-&gt;idriver = &amp;ply_idriver_ascii;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (ply-&gt;storage_mode == ply_arch_endian()) </div>\n\
<div class=\"line\">        ply-&gt;idriver = &amp;ply_idriver_binary;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> ply-&gt;idriver = &amp;ply_idriver_binary_reverse;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;1.0&quot;</span>)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_comment(p_ply ply) {</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;comment&quot;</span>)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_line(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_add_comment(ply, BLINE(ply))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_obj_info(p_ply ply) {</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;obj_info&quot;</span>)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_line(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_add_obj_info(ply, BLINE(ply))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_property(p_ply ply) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    p_ply_property <span class=\"keyword\">property</span> = NULL;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* make sure it is a property */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;property&quot;</span>)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    element = &amp;ply-&gt;element[ply-&gt;nelements-1];</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span> = ply_grow_property(ply, element);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!property) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* get property type */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keyword\">property</span>-&gt;type = ply_find_string(BWORD(ply), ply_type_list);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (property-&gt;type == (e_ply_type) (-1)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (property-&gt;type == PLY_LIST) {</div>\n\
<div class=\"line\">        <span class=\"comment\">/* if it&#39;s a list, we need the base types */</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">property</span>-&gt;length_type = ply_find_string(BWORD(ply), ply_type_list);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (property-&gt;length_type == (e_ply_type) (-1)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">        <span class=\"keyword\">property</span>-&gt;value_type = ply_find_string(BWORD(ply), ply_type_list);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (property-&gt;value_type == (e_ply_type) (-1)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">/* get property name */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(property-&gt;name, BWORD(ply));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_read_header_element(p_ply ply) {</div>\n\
<div class=\"line\">    p_ply_element element = NULL;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> dummy;</div>\n\
<div class=\"line\">    assert(ply &amp;&amp; ply-&gt;fp &amp;&amp; ply-&gt;io_mode == PLY_READ);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (strcmp(BWORD(ply), <span class=\"stringliteral\">&quot;element&quot;</span>)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* allocate room for new element */</span></div>\n\
<div class=\"line\">    element = ply_grow_element(ply);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!element) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* get element name */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    strcpy(element-&gt;name, BWORD(ply));</div>\n\
<div class=\"line\">    <span class=\"comment\">/* get number of elements of this type */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (sscanf(BWORD(ply), <span class=\"stringliteral\">&quot;%ld&quot;</span>, &amp;dummy) != 1) {</div>\n\
<div class=\"line\">        ply_error(ply, <span class=\"stringliteral\">&quot;Expected number got &#39;%s&#39;&quot;</span>, BWORD(ply));</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    element-&gt;ninstances = dummy;</div>\n\
<div class=\"line\">    <span class=\"comment\">/* get all properties for this element */</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">while</span> (ply_read_header_property(ply) || </div>\n\
<div class=\"line\">        ply_read_header_comment(ply) || ply_read_header_obj_info(ply))</div>\n\
<div class=\"line\">        <span class=\"comment\">/* do nothing */</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_error_cb(<span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *message) {</div>\n\
<div class=\"line\">    fprintf(stderr, <span class=\"stringliteral\">&quot;RPly: %s\\n&quot;</span>, message);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">void</span> ply_error(p_ply ply, <span class=\"keyword\">const</span> <span class=\"keywordtype\">char</span> *fmt, ...) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> buffer[1024];</div>\n\
<div class=\"line\">    va_list ap;</div>\n\
<div class=\"line\">    va_start(ap, fmt);</div>\n\
<div class=\"line\">    vsprintf(buffer, fmt, ap);</div>\n\
<div class=\"line\">    va_end(ap);</div>\n\
<div class=\"line\">    ply-&gt;error_cb(buffer);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> e_ply_storage_mode ply_arch_endian(<span class=\"keywordtype\">void</span>) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> i = 1;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ad585a1393cfa368fa9dc3d8ebff640d5\">s</a> = (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> *) &amp;i;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*s == 1) <span class=\"keywordflow\">return</span> PLY_LITTLE_ENDIAN;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">return</span> PLY_BIG_ENDIAN;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ply_type_check(<span class=\"keywordtype\">void</span>) {</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>) == 1);</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>) == 1);</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">short</span>) == 2);</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>) == 2);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WIN32</span></div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">long</span>) == 4);</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span>) == 4);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">long</span>) == 8);</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span>) == 8);</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>) == 4);</div>\n\
<div class=\"line\">    assert(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>) == 8);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">char</span>) != 1) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>) != 1) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">short</span>) != 2) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>) != 2) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#ifdef WIN32</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">long</span>) != 4) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span>) != 4) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">long</span>) != 8) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span>) != 8) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">float</span>) != 4) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>) != 8) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Output handlers</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_int8(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; CHAR_MAX || value &lt; CHAR_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%d &quot;</span>, (<span class=\"keywordtype\">char</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_uint8(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; UCHAR_MAX || value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%d &quot;</span>, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_int16(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; SHRT_MAX || value &lt; SHRT_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%d &quot;</span>, (<span class=\"keywordtype\">short</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_uint16(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; USHRT_MAX || value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%d &quot;</span>, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_int32(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; LONG_MAX || value &lt; LONG_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%d &quot;</span>, (<span class=\"keywordtype\">int</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_uint32(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; ULONG_MAX || value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%d &quot;</span>, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_float32(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value &lt; -FLT_MAX || value &gt;</a> FLT_MAX) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%g &quot;</span>, (<span class=\"keywordtype\">float</span>) value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> oascii_float64(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value &lt; -DBL_MAX || value &gt;</a> DBL_MAX) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> fprintf(ply-&gt;fp, <span class=\"stringliteral\">&quot;%g &quot;</span>, value) &gt; 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_int8(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> int8 = (char) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; CHAR_MAX || value &lt; CHAR_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;int8, <span class=\"keyword\">sizeof</span>(int8));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_uint8(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> uint8 = (<span class=\"keywordtype\">unsigned</span> char) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; UCHAR_MAX || value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;uint8, <span class=\"keyword\">sizeof</span>(uint8)); </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_int16(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">short</span> int16 = (short) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; SHRT_MAX || value &lt; SHRT_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;int16, <span class=\"keyword\">sizeof</span>(int16));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_uint16(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> uint16 = (<span class=\"keywordtype\">unsigned</span> short) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; USHRT_MAX || value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;uint16, <span class=\"keyword\">sizeof</span>(uint16)); </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_int32(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> int32 = (long) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; LONG_MAX || value &lt; LONG_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;int32, <span class=\"keyword\">sizeof</span>(int32));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_uint32(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> uint32 = (<span class=\"keywordtype\">unsigned</span> long) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; ULONG_MAX || value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;uint32, <span class=\"keyword\">sizeof</span>(uint32));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_float32(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> float32 = (float) value;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (value &gt; FLT_MAX || value &lt; -FLT_MAX) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;float32, <span class=\"keyword\">sizeof</span>(float32));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> obinary_float64(p_ply ply, <span class=\"keywordtype\">double</span> value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;odriver-&gt;ochunk(ply, &amp;value, <span class=\"keyword\">sizeof</span>(value)); </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Input  handlers</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_int8(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a name=\"a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtol(BWORD(ply), &amp;end, 10);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *value &gt; CHAR_MAX || *value &lt; CHAR_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_uint8(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtol(BWORD(ply), &amp;end, 10);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *value &gt; UCHAR_MAX || *value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_int16(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtol(BWORD(ply), &amp;end, 10);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *value &gt; SHRT_MAX || *value &lt; SHRT_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_uint16(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtol(BWORD(ply), &amp;end, 10);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *value &gt; USHRT_MAX || *value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_int32(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtol(BWORD(ply), &amp;end, 10);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *value &gt; LONG_MAX || *value &lt; LONG_MIN) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_uint32(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtol(BWORD(ply), &amp;end, 10);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *value &lt; 0) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_float32(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtod(BWORD(ply), &amp;end);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value &lt; -FLT_MAX || *value &gt;</a> FLT_MAX) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> iascii_float64(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a432111147038972f06e049e18a837002\">end</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read_word(ply)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = strtod(BWORD(ply), &amp;end);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (*end || *<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aed27f17ebdc1fd207871bc2ed5da0d0f\">value &lt; -DBL_MAX || *value &gt;</a> DBL_MAX) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_int8(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">char</span> int8;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;int8, 1)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = int8;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_uint8(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">char</span> uint8;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;uint8, 1)) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = uint8;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_int16(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">short</span> int16;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;int16, <span class=\"keyword\">sizeof</span>(int16))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = int16;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_uint16(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">short</span> uint16;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;uint16, <span class=\"keyword\">sizeof</span>(uint16))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = uint16;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_int32(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> int32;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;int32, <span class=\"keyword\">sizeof</span>(int32))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = int32;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_uint32(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">long</span> uint32;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;uint32, <span class=\"keyword\">sizeof</span>(uint32))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = uint32;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_float32(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">float</span> float32;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply-&gt;idriver-&gt;ichunk(ply, &amp;float32, <span class=\"keyword\">sizeof</span>(float32))) <span class=\"keywordflow\">return</span> 0;</div>\n\
<div class=\"line\">    *value = float32;</div>\n\
<div class=\"line\">    ply_reverse(&amp;float32, <span class=\"keyword\">sizeof</span>(float32));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> ibinary_float64(p_ply ply, <span class=\"keywordtype\">double</span> *value) {</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> ply-&gt;idriver-&gt;ichunk(ply, value, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>));</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Constants</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_idriver ply_idriver_ascii = {</div>\n\
<div class=\"line\">    {   iascii_int8, iascii_uint8, iascii_int16, iascii_uint16,</div>\n\
<div class=\"line\">        iascii_int32, iascii_uint32, iascii_float32, iascii_float64,</div>\n\
<div class=\"line\">        iascii_int8, iascii_uint8, iascii_int16, iascii_uint16,</div>\n\
<div class=\"line\">        iascii_int32, iascii_uint32, iascii_float32, iascii_float64</div>\n\
<div class=\"line\">    }, <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\">    NULL,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;ascii input&quot;</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_idriver ply_idriver_binary = {</div>\n\
<div class=\"line\">    {   ibinary_int8, ibinary_uint8, ibinary_int16, ibinary_uint16,</div>\n\
<div class=\"line\">        ibinary_int32, ibinary_uint32, ibinary_float32, ibinary_float64,</div>\n\
<div class=\"line\">        ibinary_int8, ibinary_uint8, ibinary_int16, ibinary_uint16,</div>\n\
<div class=\"line\">        ibinary_int32, ibinary_uint32, ibinary_float32, ibinary_float64</div>\n\
<div class=\"line\">    }, <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\">    ply_read_chunk,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;binary input&quot;</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_idriver ply_idriver_binary_reverse = {</div>\n\
<div class=\"line\">    {   ibinary_int8, ibinary_uint8, ibinary_int16, ibinary_uint16,</div>\n\
<div class=\"line\">        ibinary_int32, ibinary_uint32, ibinary_float32, ibinary_float64,</div>\n\
<div class=\"line\">        ibinary_int8, ibinary_uint8, ibinary_int16, ibinary_uint16,</div>\n\
<div class=\"line\">        ibinary_int32, ibinary_uint32, ibinary_float32, ibinary_float64</div>\n\
<div class=\"line\">    }, <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\">    ply_read_chunk_reverse,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;reverse binary input&quot;</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_odriver ply_odriver_ascii = {</div>\n\
<div class=\"line\">    {   oascii_int8, oascii_uint8, oascii_int16, oascii_uint16,</div>\n\
<div class=\"line\">        oascii_int32, oascii_uint32, oascii_float32, oascii_float64,</div>\n\
<div class=\"line\">        oascii_int8, oascii_uint8, oascii_int16, oascii_uint16,</div>\n\
<div class=\"line\">        oascii_int32, oascii_uint32, oascii_float32, oascii_float64</div>\n\
<div class=\"line\">    }, <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\">    NULL,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;ascii output&quot;</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_odriver ply_odriver_binary = {</div>\n\
<div class=\"line\">    {   obinary_int8, obinary_uint8, obinary_int16, obinary_uint16,</div>\n\
<div class=\"line\">        obinary_int32, obinary_uint32, obinary_float32, obinary_float64,</div>\n\
<div class=\"line\">        obinary_int8, obinary_uint8, obinary_int16, obinary_uint16,</div>\n\
<div class=\"line\">        obinary_int32, obinary_uint32, obinary_float32, obinary_float64</div>\n\
<div class=\"line\">    }, <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\">    ply_write_chunk,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;binary output&quot;</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> t_ply_odriver ply_odriver_binary_reverse = {</div>\n\
<div class=\"line\">    {   obinary_int8, obinary_uint8, obinary_int16, obinary_uint16,</div>\n\
<div class=\"line\">        obinary_int32, obinary_uint32, obinary_float32, obinary_float64,</div>\n\
<div class=\"line\">        obinary_int8, obinary_uint8, obinary_int16, obinary_uint16,</div>\n\
<div class=\"line\">        obinary_int32, obinary_uint32, obinary_float32, obinary_float64</div>\n\
<div class=\"line\">    }, <span class=\"comment\">/* order matches e_ply_type enum */</span></div>\n\
<div class=\"line\">    ply_write_chunk_reverse,</div>\n\
<div class=\"line\">    <span class=\"stringliteral\">&quot;reverse binary output&quot;</span></div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">/* ----------------------------------------------------------------------</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Copyright (C) 2003 Diego Nehab.  All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * Permission is hereby granted, free of charge, to any person obtaining</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * a copy of this software and associated documentation files (the</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * &quot;Software&quot;), to deal in the Software without restriction, including</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * without limitation the rights to use, copy, modify, merge, publish,</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * distribute, sublicense, and/or sell copies of the Software, and to</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * permit persons to whom the Software is furnished to do so, subject to</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * the following conditions:</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * The above copyright notice and this permission notice shall be</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * included in all copies or substantial portions of the Software.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> *</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND,</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</span></div>\n\
<div class=\"line\"><span class=\"comment\"> * ---------------------------------------------------------------------- */</span></div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";