var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PLYImport/Importer.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_p_l_y_import_2_importer_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PLYImport/Importer.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PLYImport/Importer.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Copyright (c) 2008 Autodesk, Inc.</span></div>\n\
<div class=\"line\"><span class=\"comment\">// All rights reserved.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">// Use of this software is subject to the terms of the Autodesk license</span></div>\n\
<div class=\"line\"><span class=\"comment\">// agreement provided at the time of installation or download, or which</span></div>\n\
<div class=\"line\"><span class=\"comment\">// otherwise accompanies this software in either electronic or hard copy form.</span></div>\n\
<div class=\"line\"><span class=\"comment\">//</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"><span class=\"comment\">// DESCRIPTION:</span></div>\n\
<div class=\"line\"><span class=\"comment\">// CREATED: October 2008</span></div>\n\
<div class=\"line\"><span class=\"comment\">//**************************************************************************/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;rply.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;stdio.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the SDK header, all plugins have to include it.</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtCore/QCoreApplication&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtCore/QFile&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;QtCore/QTextStream&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#if defined(JAMBUILD)</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html\">Mudbox/mudbox.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#else</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;../../include/Mudbox/mudbox.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#endif</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">using namespace </span><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html\">mudbox</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This macro makes a record in the memory to describe the plugin.</span></div>\n\
<div class=\"line\"><a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#afa2df46a730e8fc8bceb9410c0ff6838\">MB_PLUGIN</a>( <span class=\"stringliteral\">&quot;PLY Importer&quot;</span>, <span class=\"stringliteral\">&quot;PLY file import/export plugin&quot;</span>, <span class=\"stringliteral\">&quot;Autodesk&quot;</span>, <span class=\"stringliteral\">&quot;http://www.mudbox3d.com&quot;</span>, 0 );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The following class will implement the Importer interface.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PLYImporter : <span class=\"keyword\">public</span> <a name=\"_a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_importer.html\">Importer</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/qcoreapplication_8h.html#af36246d0c49dc6f1d54e495dd2c0a4ef\">Q_DECLARE_TR_FUNCTIONS</a>(FLYImporter);</div>\n\
<div class=\"line\"><span class=\"keyword\">public</span>:</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// The following line must be used in every class which wants to use RTTI.</span></div>\n\
<div class=\"line\">    <a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/node_8h.html#a431009564592a24e5f46f5df421131a1\">DECLARE_CLASS</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Just a plain empty constructor to initialize some data.</span></div>\n\
<div class=\"line\">    PLYImporter( <span class=\"keywordtype\">void</span> );</div>\n\
<div class=\"line\">    <span class=\"comment\">// And a destructor to destroy some.</span></div>\n\
<div class=\"line\">    ~PLYImporter( <span class=\"keywordtype\">void</span> );</div>\n\
<div class=\"line\">    <span class=\"comment\">// The following function is responsible to return the supported file extension(s) by the plugin.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a name=\"_a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> Extension( <span class=\"keywordtype\">void</span> )<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;ply&quot;</span>); };</div>\n\
<div class=\"line\">    <span class=\"comment\">// This will return a description of the file type we are importing.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> Description( <span class=\"keywordtype\">void</span> )<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> tr(<span class=\"stringliteral\">&quot;Polygon File&quot;</span>); };</div>\n\
<div class=\"line\">    <a name=\"_a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html\">QVector&lt;FileExtension&gt;</a> SupportedExtensions( <span class=\"keywordtype\">void</span> )<span class=\"keyword\"> const </span>{ <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html\">QVector&lt;FileExtension&gt;</a> ret; ret.<a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html#ab32da790af34509a87008eacf308e3f6\">push_back</a>(<a name=\"_a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_file_extension.html\">FileExtension</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;ply&quot;</span>), tr(<span class=\"stringliteral\">&quot;Polygon File&quot;</span>))); <span class=\"keywordflow\">return</span> ret; }</div>\n\
<div class=\"line\">    <span class=\"comment\">// This is the main function, this will be called when a file should be imported.</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">virtual</span> <span class=\"keywordtype\">void</span> Import( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> &amp;sFileName, <a name=\"_a9\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/structmudbox_1_1_scene_1_1_load_data.html\">mudbox::Scene::LoadData</a> &amp;cData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Internal stuff follows. The next function will be called when some new vertex data (coordinate) is read from the file.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> OnVertexData( <span class=\"keywordtype\">float</span> fData );</div>\n\
<div class=\"line\">    <span class=\"comment\">// This is called when new face data (vertex index) is read.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> OnFaceData( <span class=\"keywordtype\">int</span> iIndex, <span class=\"keywordtype\">int</span> iFaceSize, <span class=\"keywordtype\">int</span> iData );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pointer to the result mesh.</span></div>\n\
<div class=\"line\">    <a name=\"_a10\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_mesh.html\">Mesh</a> *m_pMesh;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Index of the current vertex which is being read.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_iVertexIndex;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Index of the current corner of the triangle which is being read (possible values are 0, 1, 2).</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_iCornerIndex;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Index of the current triangle which is being read.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> m_iTriangleIndex;</div>\n\
<div class=\"line\">    <span class=\"comment\">// Coordinates of the current vertex.</span></div>\n\
<div class=\"line\">    <a name=\"_a11\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_vector.html\">Vector</a> m_vPosition;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The PLY import code uses C functions from the RPly library. Since we cannot pass instances</span></div>\n\
<div class=\"line\"><span class=\"comment\">// of Importers into these functions we define a global pointer to the current ply importer.</span></div>\n\
<div class=\"line\">PLYImporter* g_pImporter = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PLYImporter::PLYImporter( <span class=\"keywordtype\">void</span> )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a name=\"a12\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <span class=\"stringliteral\">&quot;PLY Import plugin initialized\\n&quot;</span> );</div>\n\
<div class=\"line\">    m_pMesh = 0;</div>\n\
<div class=\"line\">    g_pImporter = <span class=\"keyword\">this</span>;</div>\n\
<div class=\"line\">    m_iVertexIndex = 0;</div>\n\
<div class=\"line\">    m_iCornerIndex = 0;</div>\n\
<div class=\"line\">    m_iTriangleIndex = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">PLYImporter::~PLYImporter( <span class=\"keywordtype\">void</span> )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span>( g_pImporter == <span class=\"keyword\">this</span> )</div>\n\
<div class=\"line\">        g_pImporter = 0;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// The code reads one coordinate of a vertex at a time, so this function is called three times for each vertex.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PLYImporter::OnVertexData( <span class=\"keywordtype\">float</span> fData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// Store the incoming data to the current vector, and step to the next coordinate of the vector.</span></div>\n\
<div class=\"line\">    m_vPosition[m_iCornerIndex++] = fData;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// If the vector is ready (i.e. it has all the three coorinates filled) then store it in the mesh.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_iCornerIndex == 3 )</div>\n\
<div class=\"line\">    {   </div>\n\
<div class=\"line\">        <span class=\"comment\">// Restart filling up the vector</span></div>\n\
<div class=\"line\">        m_iCornerIndex = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Just to be sure we check the number of vertices.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_iVertexIndex &lt; m_pMesh-&gt;VertexCount() )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            m_pMesh-&gt;SetVertexPosition( m_iVertexIndex++, m_vPosition );</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressSet( m_iVertexIndex );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a name=\"a13\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>( <span class=\"stringliteral\">&quot;Too much vertex in file&quot;</span> );</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Same as above, the code reads one index at a time, so this function will be called three times for a triangle.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PLYImporter::OnFaceData( <span class=\"keywordtype\">int</span> iIndex, <span class=\"keywordtype\">int</span> iFaceSize, <span class=\"keywordtype\">int</span> iData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( iIndex == -1 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( iFaceSize == 3 )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>( <span class=\"stringliteral\">&quot;Face with more than 3 vertex found in file (not supported)&quot;</span> );</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( m_iTriangleIndex &lt; m_pMesh-&gt;FaceCount() &amp;&amp; iIndex &lt; 3 &amp;&amp; iIndex &gt;= 0 )</div>\n\
<div class=\"line\">        m_pMesh-&gt;SetTriangleIndex( m_iTriangleIndex, iIndex, iData );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>( <span class=\"stringliteral\">&quot;Vertex index out of range&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( iIndex == 2 )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        m_iTriangleIndex++;</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressSet( m_iVertexIndex+m_iTriangleIndex );</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is a callback function for the PLY reader code to use for vertices.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> vertex_cb(p_ply_argument argument) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    g_pImporter-&gt;OnVertexData( (<span class=\"keywordtype\">float</span>)ply_get_argument_value(argument) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// And this is for faces.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">static</span> <span class=\"keywordtype\">int</span> face_cb(p_ply_argument argument) </div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">long</span> iLength, iValueIndex;</div>\n\
<div class=\"line\">    ply_get_argument_property(argument, 0, &amp;iLength, &amp;iValueIndex);</div>\n\
<div class=\"line\">    g_pImporter-&gt;OnFaceData( iValueIndex, iLength, (<span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span>)ply_get_argument_value(argument) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span> 1;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This is the main function which will do the importing.</span></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PLYImporter::Import( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> &amp;sFileName, <a class=\"code\" href=\"#!/url=./cpp_ref/structmudbox_1_1_scene_1_1_load_data.html\">mudbox::Scene::LoadData</a> &amp;cData )</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iVertexCount, iTriangleCount;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Open the file.</span></div>\n\
<div class=\"line\">    <a name=\"_a14\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_byte_array.html\">QByteArray</a> qbaFileName = <a name=\"a15\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_file.html#a548ef3f34e5265ca50980914ccabbfde\">QFile::encodeName</a>(sFileName);</div>\n\
<div class=\"line\">    p_ply ply = ply_open(qbaFileName.<a name=\"a16\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_byte_array.html#acd2173722996016205933aa3053f895f\">constData</a>(), 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Check for errors. If something is wrong we use the MB_ERROR macro, which will throw an exception, so the execution of the function will be stopped here.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !ply )</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>( tr(<span class=\"stringliteral\">&quot;Invalid file: %1&quot;</span>).arg(sFileName) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> ( !ply_read_header(ply) )</div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>( tr(<span class=\"stringliteral\">&quot;Invalid file: %1&quot;</span>).arg(sFileName) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize vertex reading for three coordinates with the same callback.</span></div>\n\
<div class=\"line\">    iVertexCount = ply_set_read_cb(ply, <span class=\"stringliteral\">&quot;vertex&quot;</span>, <span class=\"stringliteral\">&quot;x&quot;</span>, vertex_cb, 0, 0);</div>\n\
<div class=\"line\">    ply_set_read_cb(ply, <span class=\"stringliteral\">&quot;vertex&quot;</span>, <span class=\"stringliteral\">&quot;y&quot;</span>, vertex_cb, 0, 0);</div>\n\
<div class=\"line\">    ply_set_read_cb(ply, <span class=\"stringliteral\">&quot;vertex&quot;</span>, <span class=\"stringliteral\">&quot;z&quot;</span>, vertex_cb, 0, 1);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize face reading.</span></div>\n\
<div class=\"line\">    iTriangleCount = ply_set_read_cb(ply, <span class=\"stringliteral\">&quot;face&quot;</span>, <span class=\"stringliteral\">&quot;vertex_indices&quot;</span>, face_cb, 0, 0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Log some information, just for debugging purposes.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Log( <a name=\"a17\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#a1b7f65502ea5b58cca15f85d9e78ca06\">NTRQ</a>(<span class=\"stringliteral\">&quot;\\t%1 vertices, %2 triangles.&quot;</span>).arg(iVertexCount).arg(iTriangleCount) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Create a mesh.</span></div>\n\
<div class=\"line\">    m_pMesh = <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Scene()-&gt;CreateMesh( <a name=\"a18\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_topology.html#a461eba4998b5d5dac48d6102c8c63beca8458eba8ae564ca5f914a2f93eedeaed\">Topology::typeTriangular</a> );</div>\n\
<div class=\"line\">    m_pMesh-&gt;SetName(<span class=\"stringliteral\">&quot;PlyMesh&quot;</span>);</div>\n\
<div class=\"line\">    <span class=\"comment\">// Initialize the mesh to match the specs from the file.</span></div>\n\
<div class=\"line\">    m_pMesh-&gt;SetFaceCount( iTriangleCount );</div>\n\
<div class=\"line\">    m_pMesh-&gt;SetVertexCount( iVertexCount );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Start a progress bar in Mudbox.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressStart( <span class=\"stringliteral\">&quot;importing...&quot;</span>, iVertexCount+iTriangleCount );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Try to read the file. If something went wrong, just throw an exception.</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!ply_read(ply)) </div>\n\
<div class=\"line\">        <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a78d8bd615152a82160d33c6063f0e308\">MB_ERROR</a>( tr(<span class=\"stringliteral\">&quot;Invalid file: %1&quot;</span>).arg(sFileName) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Close the file.</span></div>\n\
<div class=\"line\">    ply_close(ply);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Remove the progress bar.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/namespacemudbox.html#ae9df9ee935ec6744f98a1585d9db01df\">Kernel</a>()-&gt;Interface()-&gt;ProgressEnd();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Importing is done. Add the converted mesh to the Importer&#39;s scene.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mudbox will then merge that scene into it&#39;s scene, after this call is done.</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// Note that the importer&#39;s scene will be automatically destroyed by Mudbox </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// when it  is no longer needed. Plugin writers do not need to manage memory </span></div>\n\
<div class=\"line\">    <span class=\"comment\">// of objects in the importer&#39;s scene.</span></div>\n\
<div class=\"line\">    AddMesh( m_pMesh );</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// This macro is needed for all classes which want to use RTTI</span></div>\n\
<div class=\"line\"><a name=\"a19\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/node_8h.html#a1d51ad935ab5d26fe95dff62601b602c\">IMPLEMENT_CLASS</a>( PLYImporter, <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_importer.html\">Importer</a>, <span class=\"stringliteral\">&quot;PLY Importer&quot;</span> );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// Implementation of the Exporter interface, to handle writting to PLY files.</span></div>\n\
<div class=\"line\"><span class=\"keyword\">class </span>PLYExporter : <span class=\"keyword\">public</span> <a name=\"_a20\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_exporter.html\">Exporter</a></div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/qcoreapplication_8h.html#af36246d0c49dc6f1d54e495dd2c0a4ef\">Q_DECLARE_TR_FUNCTIONS</a>(PLYExporter)</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">public:</div>\n\
<div class=\"line\">    <span class=\"comment\">// Needed for RTTI.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/node_8h.html#a431009564592a24e5f46f5df421131a1\">DECLARE_CLASS</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Pass file extension to Mudbox.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> Extension( <span class=\"keywordtype\">void</span> )<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;ply&quot;</span>;) };</div>\n\
<div class=\"line\">    <span class=\"comment\">// And file description. These will be visible in the browse dialog.</span></div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> Description( <span class=\"keywordtype\">void</span> )<span class=\"keyword\"> const </span>{ <span class=\"keywordflow\">return</span> tr(<span class=\"stringliteral\">&quot;Polygon file&quot;</span>); };</div>\n\
<div class=\"line\">    <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html\">QVector&lt;FileExtension&gt;</a> SupportedExtensions( <span class=\"keywordtype\">void</span> )<span class=\"keyword\"> const </span>{ <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html\">QVector&lt;FileExtension&gt;</a> ret; ret.<a class=\"code\" href=\"#!/url=./cpp_ref/class_q_vector.html#ab32da790af34509a87008eacf308e3f6\">push_back</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_file_extension.html\">FileExtension</a>(<a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;ply&quot;</span>), tr(<span class=\"stringliteral\">&quot;Polygon File&quot;</span>))); <span class=\"keywordflow\">return</span> ret; }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Mudbox will call these two functions, to let the exporter know which meshes should be exported. First it tells the number of meshes,</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> SetMeshCount( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iMeshCount ) { m_aMeshes.SetItemCount( iMeshCount ); };</div>\n\
<div class=\"line\">    <span class=\"comment\">// And then a pointer to each mesh.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> SetMesh( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> iIndex, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_mesh.html\">Mesh</a> *pMesh ) { m_aMeshes[iIndex] = pMesh; };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Internal function, used to write a single line into a text file (such as the PLY).</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> Write( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> &amp;sText ) </div>\n\
<div class=\"line\">    { </div>\n\
<div class=\"line\">        m_pStream &lt;&lt; sText;</div>\n\
<div class=\"line\">        m_pStream &lt;&lt; <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;\\n&quot;</span>);</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// Main function, this is doing the export itself. The function gets the filename as a parameter.</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">void</span> Export( <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> &amp;sFileName, <span class=\"keyword\">const</span> <a class=\"code\" href=\"#!/url=./cpp_ref/class_q_string.html\">QString</a> &amp; )</div>\n\
<div class=\"line\">    {</div>\n\
<div class=\"line\">        <span class=\"comment\">// If there is no mesh to export, we do nothing.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_aMeshes.ItemCount() == 0 )</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">        <span class=\"comment\">// If there are more than one mesh to export, we report an error since this implementation only supports a single mesh.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_aMeshes.ItemCount() &gt; 1 )</div>\n\
<div class=\"line\">            <a name=\"a21\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a3d3dc0b6143eb6b7b067ef45fdca8af3\">MB_ERRORQ</a>( tr(<span class=\"stringliteral\">&quot;Only a single mesh can be exported to PLY file format.&quot;</span>) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Create and open the file as usual.</span></div>\n\
<div class=\"line\">        m_pFile.setFileName(sFileName);</div>\n\
<div class=\"line\">        </div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (!m_pFile.open(<a name=\"a22\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_i_o_device.html#a45153e842709466a940079b370bd6f40a068f8c22e7e359d9000e7d3a4a809b4c\">QIODevice::WriteOnly</a>))</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/mudbox_8h.html#a3d3dc0b6143eb6b7b067ef45fdca8af3\">MB_ERRORQ</a>( tr(<span class=\"stringliteral\">&quot;Can&#39;t open %1 for writing: %2&quot;</span>).arg(sFileName).arg(m_pFile.errorString()) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        m_pStream.setDevice(&amp;m_pFile);</div>\n\
<div class=\"line\">        m_pStream.setCodec(<a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;UTF-8&quot;</span>));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Write the header of the file. This is hardcoded, this plugin only writes the most simple format of PLY files.</span></div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;ply&quot;</span>) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;format ascii 1.0&quot;</span>) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#a1b7f65502ea5b58cca15f85d9e78ca06\">NTRQ</a>(<span class=\"stringliteral\">&quot;element vertex %1&quot;</span>).arg(m_aMeshes[0]-&gt;VertexCount() ) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;property float x&quot;</span>) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;property float y&quot;</span>) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;property float z&quot;</span>) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#a1b7f65502ea5b58cca15f85d9e78ca06\">NTRQ</a>(<span class=\"stringliteral\">&quot;element face %1&quot;</span>).arg( m_aMeshes[0]-&gt;FaceCount() ) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;property list uchar int vertex_indices&quot;</span>) );</div>\n\
<div class=\"line\">        Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#aa4e0fec95bdcbdcbe9b3140339e17771\">NTR</a>(<span class=\"stringliteral\">&quot;end_header&quot;</span>) );</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Write all the vertex positions into the file.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> &lt; m_aMeshes[0]-&gt;VertexCount(); <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>++ )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_vector.html\">Vector</a> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#aa5367c14d90f462230c2611b81b41d23\">p</a> = m_aMeshes[0]-&gt;VertexPosition( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a> );</div>\n\
<div class=\"line\">            Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#a1b7f65502ea5b58cca15f85d9e78ca06\">NTRQ</a>(<span class=\"stringliteral\">&quot;%1 %2 %3&quot;</span>).arg(p.<a name=\"a23\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_vector.html#ad0da36b2558901e21e7a30f6c227a45e\">x</a>).arg(p.<a name=\"a24\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_vector.html#aa4f0d3eebc3c443f9be81bf48561a217\">y</a>).arg(p.<a name=\"a25\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_vector.html#af73583b1e980b0aa03f9884812e9fd4d\">z</a> ) );</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// And then write the vertex indices from the faces.</span></div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> ( m_aMeshes[0]-&gt;Type() == <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_topology.html#a461eba4998b5d5dac48d6102c8c63beca8458eba8ae564ca5f914a2f93eedeaed\">Mesh::typeTriangular</a> )</div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// If the mesh has triangles, write three indices in a row.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> &lt; m_aMeshes[0]-&gt;FaceCount(); <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>++ )</div>\n\
<div class=\"line\">                Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#a1b7f65502ea5b58cca15f85d9e78ca06\">NTRQ</a>(<span class=\"stringliteral\">&quot;3 %1 %2 %3&quot;</span>).arg(m_aMeshes[0]-&gt;TriangleIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 0 )).arg( m_aMeshes[0]-&gt;TriangleIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 1 )).arg( m_aMeshes[0]-&gt;TriangleIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 2 ) ) );</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">        {</div>\n\
<div class=\"line\">            <span class=\"comment\">// And write four indices if there are quads in the mesh.</span></div>\n\
<div class=\"line\">            <span class=\"keywordflow\">for</span> ( <span class=\"keywordtype\">unsigned</span> <span class=\"keywordtype\">int</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = 0; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> &lt; m_aMeshes[0]-&gt;FaceCount(); <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>++ )</div>\n\
<div class=\"line\">                Write( <a class=\"code\" href=\"#!/url=./cpp_ref/i18n_8h.html#a1b7f65502ea5b58cca15f85d9e78ca06\">NTRQ</a>(<span class=\"stringliteral\">&quot;4 %1 %2 %3 %4&quot;</span>).arg(m_aMeshes[0]-&gt;QuadIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 0 )).arg( m_aMeshes[0]-&gt;QuadIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 1 )).arg( m_aMeshes[0]-&gt;QuadIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 2 )).arg( m_aMeshes[0]-&gt;QuadIndex( <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a>, 3 ) ) );</div>\n\
<div class=\"line\">        };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">        <span class=\"comment\">// Thats all, close the file and we are ready.</span></div>\n\
<div class=\"line\">        m_pStream.flush();</div>\n\
<div class=\"line\">        m_pFile.close();</div>\n\
<div class=\"line\">    };</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// This array will be used to store the list of meshes which has to be exported.</span></div>\n\
<div class=\"line\">    <a name=\"_a26\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_store.html\">Store&lt;const Mesh *&gt;</a> m_aMeshes;</div>\n\
<div class=\"line\">    <span class=\"comment\">// A simple handler to the file we are writting to.</span></div>\n\
<div class=\"line\">    <a name=\"_a27\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_file.html\">QFile</a> m_pFile;</div>\n\
<div class=\"line\">    <a name=\"_a28\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/class_q_text_stream.html\">QTextStream</a> m_pStream;</div>\n\
<div class=\"line\">};</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"comment\">// RTTI information about the PLYExporter class.</span></div>\n\
<div class=\"line\"><a class=\"code\" href=\"#!/url=./cpp_ref/node_8h.html#a1d51ad935ab5d26fe95dff62601b602c\">IMPLEMENT_CLASS</a>( PLYExporter, <a class=\"code\" href=\"#!/url=./cpp_ref/classmudbox_1_1_exporter.html\">Exporter</a>, QT_TRANSLATE_NOOP(<span class=\"stringliteral\">&quot;PLYExporter&quot;</span>, <span class=\"stringliteral\">&quot;PLY Exporter&quot;</span>) );</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";