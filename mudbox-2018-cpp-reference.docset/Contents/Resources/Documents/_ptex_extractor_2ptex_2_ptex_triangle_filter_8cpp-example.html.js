var topic = "<!-- saved from url=(0024)http://docs.autodesk.com -->\n\
<html>\n\
   <head><script src=\"../scripts/yepnope.1.5.4-min.js\" type=\"text/javascript\"></script><script src=\"../scripts/lib/jquery-1.11.1.min.js\" type=\"text/javascript\"></script><meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"><meta name=\"product\" content=\"MOBPRO\"><meta name=\"release\" content=\"2018\"><meta name=\"book\" content=\"GeneralUser\"><meta name=\"created\" content=\"2017-09-08\"><meta name=\"topicid\" content=\"GUID-02FA7DD3-6C7A-4C6A-B7BC-824765AE1CB2\"><meta name=\"topic-type\" content=\"concept\">\n\
      <title>PtexExtractor/ptex/PtexTriangleFilter.cpp</title>\n\
   \n\
\n\
</head>\n\
   <body height=\"100%\"><div class=\"body_content\" id=\"body-content\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/navtree.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/doxygen.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"cpp_ref/tabs.css\"><link rel=\"stylesheet\" type=\"text/css\" href=\"style/adsk.cpm.css\"><script language=\"javascript\">var index = \'index.html\';</script><script>$(document).ready(function() { yepnope.injectJs(\"./scripts/ac_common.js\"); });</script><script type=\"text/javascript\">\n\
var tocSystemNeedsToBeLoaded = typeof(cpp_ref_adsk_ref_toc) == \'undefined\';\n\
var weAreIn21 = $(\'div#main.view-active\').length;\n\
var tocPrefix = \'\';\n\
if (weAreIn21)\n\
{ tocPrefix = \'cpp_ref/\'; }\n\
function cpp_ref_initializeToc(forceTrigger) {\n\
    cpp_ref_adsk_ref_toc.initResizable();\n\
    cpp_ref_adsk_ref_toc.initNavTree(\'_ptex_extractor_2ptex_2_ptex_triangle_filter_8cpp-example.html\', tocPrefix);\n\
    dQuery(document).trigger(\'toc_initialized\');\n\
}\n\
if (tocSystemNeedsToBeLoaded)\n\
{\n\
	yepnope([{\n\
	load:[tocPrefix + \'json3.min.js\', tocPrefix + \'jquery.js\', tocPrefix + \'ref-toc-controller.js\', tocPrefix + \'dynsections.js\'],\n\
	complete: function() {\n\
	  if (typeof(dQuery) == \'undefined\')\n\
	  {\n\
	    dQuery = jQuery.noConflict(true);\n\
	  }\n\
	  else { jQuery.noConflict(true); }\n\
	  $(document).ready(cpp_ref_initializeToc);\n\
	}\n\
 	}])\n\
}\n\
if (!weAreIn21) { // if in AKN...\n\
$(window).load( function() {\n\
    setTimeout( function() {\n\
        var content = $(\'body > div\').not(\'#body-content\');     // take any divs under body that are not id=body-content\n\
        content.each( function() { \n\
            $(this).css( { \'padding-left\': $(this).css(\'margin-left\') } );       // and if they have any padding-left already, move it to margin-left.\n\
        } );\n\
        var width = cpp_ref_adsk_ref_toc.readFromStorage(\'width\');\n\
        content.css({marginLeft:parseInt(width)+6+\"px\"});\n\
    }, 100);\n\
} ); \n\
}\n\
</script><script>$(\"div#WidgetFloaterPanels,link[href*=\'microsofttranslator.com\'],script[src*=\'microsofttranslator.com\'],script[src*=\'bing.com\']\").remove();</script><script type=\'text/javascript\'>$(\"div#navigation,div#breadcrumbs,div#banner\").attr(\"translate\",\"no\"); var mtLocation = ((location && location.href && location.href.indexOf(\'https\') == 0)?\'https://ssl.microsofttranslator.com\':\'http://www.microsofttranslator.com\')+\'/ajax/v3/WidgetV3.ashx?ctf=True&ui=true&settings=Manual&from=en&hidelanguages=\'; yepnope.injectJs(mtLocation, function() {}, { charset:\'utf-8\', type:\'text/javascript\' } );</script><script>\n\
 if (!tocSystemNeedsToBeLoaded) { cpp_ref_initializeToc(); }\n\
 </script><!-- begin MT -->\n\
            \n\
            <div id=\'MicrosoftTranslatorWidget\' class=\'Dark\' style=\'float:right;z-index:100;color:white;background-color:#bbbbbb;height:58px;overflow:hidden\'></div>\n\
      <div>\n\
         <div class=\"head\">\n\
            <h1>PtexExtractor/ptex/PtexTriangleFilter.cpp</h1>\n\
         </div>\n\
\n\
    <div id=\"top\"><!-- Generated by Doxygen 1.8.10 -->\n\
  <div id=\"navrow1\" class=\"tabs\">\n\
    <ul class=\"tablist\">\n\
      <li><a href=\"#!/url=./cpp_ref/index.html\"><span>Main&#160;Page</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/pages.html\"><span>Topics</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/modules.html\"><span>Modules</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/namespaces.html\"><span>Namespaces</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/annotated.html\"><span>Classes</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/files.html\"><span>Files</span></a></li>\n\
      <li><a href=\"#!/url=./cpp_ref/examples.html\"><span>Examples</span></a></li>\n\
    </ul>\n\
  </div>\n\
</div><!-- top -->\n\
<div id=\"side-nav\" class=\"ui-resizable side-nav-resizable\">\n\
  <div id=\"nav-tree\">\n\
    <div id=\"nav-tree-contents\">\n\
      <div id=\"nav-sync\" class=\"sync\"></div>\n\
    </div>\n\
  </div>\n\
  <div id=\"splitbar\" style=\"-moz-user-select:none;\" class=\"ui-resizable-handle\">\n\
  </div>\n\
</div>\n\
\n\
<div id=\"doc-content\">\n\
<div class=\"header\">\n\
  <div class=\"headertitle\">\n\
<div class=\"title\">PtexExtractor/ptex/PtexTriangleFilter.cpp</div>  </div>\n\
</div><!--header-->\n\
<div class=\"contents\">\n\
<div class=\"fragment\"><div class=\"line\"><span class=\"comment\">/* </span></div>\n\
<div class=\"line\"><span class=\"comment\">PTEX SOFTWARE</span></div>\n\
<div class=\"line\"><span class=\"comment\">Copyright 2009 Disney Enterprises, Inc.  All rights reserved</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Redistribution and use in source and binary forms, with or without</span></div>\n\
<div class=\"line\"><span class=\"comment\">modification, are permitted provided that the following conditions are</span></div>\n\
<div class=\"line\"><span class=\"comment\">met:</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions of source code must retain the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * Redistributions in binary form must reproduce the above copyright</span></div>\n\
<div class=\"line\"><span class=\"comment\">    notice, this list of conditions and the following disclaimer in</span></div>\n\
<div class=\"line\"><span class=\"comment\">    the documentation and/or other materials provided with the</span></div>\n\
<div class=\"line\"><span class=\"comment\">    distribution.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">  * The names &quot;Disney&quot;, &quot;Walt Disney Pictures&quot;, &quot;Walt Disney Animation</span></div>\n\
<div class=\"line\"><span class=\"comment\">    Studios&quot; or the names of its contributors may NOT be used to</span></div>\n\
<div class=\"line\"><span class=\"comment\">    endorse or promote products derived from this software without</span></div>\n\
<div class=\"line\"><span class=\"comment\">    specific prior written permission from Walt Disney Pictures.</span></div>\n\
<div class=\"line\"><span class=\"comment\"></span></div>\n\
<div class=\"line\"><span class=\"comment\">Disclaimer: THIS SOFTWARE IS PROVIDED BY WALT DISNEY PICTURES AND</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,</span></div>\n\
<div class=\"line\"><span class=\"comment\">BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS</span></div>\n\
<div class=\"line\"><span class=\"comment\">FOR A PARTICULAR PURPOSE, NONINFRINGEMENT AND TITLE ARE DISCLAIMED.</span></div>\n\
<div class=\"line\"><span class=\"comment\">IN NO EVENT SHALL WALT DISNEY PICTURES, THE COPYRIGHT HOLDER OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,</span></div>\n\
<div class=\"line\"><span class=\"comment\">EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR</span></div>\n\
<div class=\"line\"><span class=\"comment\">PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND BASED ON ANY</span></div>\n\
<div class=\"line\"><span class=\"comment\">THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>\n\
<div class=\"line\"><span class=\"comment\">(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>\n\
<div class=\"line\"><span class=\"comment\">OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</span></div>\n\
<div class=\"line\"><span class=\"comment\">*/</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexPlatform.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;<a class=\"code\" href=\"#!/url=./cpp_ref/math_8h.html\">math.h</a>&gt;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &lt;assert.h&gt;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexTriangleFilter.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexTriangleKernel.h&quot;</span></div>\n\
<div class=\"line\"><span class=\"preprocessor\">#include &quot;PtexUtils.h&quot;</span></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keyword\">namespace </span>{</div>\n\
<div class=\"line\">    <span class=\"keyword\">inline</span> <span class=\"keywordtype\">double</span> squared(<span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>) { <span class=\"keywordflow\">return</span> x*<a name=\"a0\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a09b61c9254503800358fe9680a997626\">x</a>; }</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexTriangleFilter::eval(<span class=\"keywordtype\">float</span>* result, <span class=\"keywordtype\">int</span> firstChan, <span class=\"keywordtype\">int</span> nChannels,</div>\n\
<div class=\"line\">                  <span class=\"keywordtype\">int</span> faceid, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>,</div>\n\
<div class=\"line\">                  <span class=\"keywordtype\">float</span> uw1, <span class=\"keywordtype\">float</span> vw1, <span class=\"keywordtype\">float</span> uw2, <span class=\"keywordtype\">float</span> vw2,</div>\n\
<div class=\"line\">                  <span class=\"keywordtype\">float</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ac112eef468530a44b7a653ddac190a22\">width</a>, <span class=\"keywordtype\">float</span> blur)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// init</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!_tx || nChannels &lt;= 0) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (faceid &lt; 0 || faceid &gt;= _tx-&gt;numFaces()) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    _ntxchan = _tx-&gt;numChannels();</div>\n\
<div class=\"line\">    _dt = _tx-&gt;dataType();</div>\n\
<div class=\"line\">    _firstChanOffset = firstChan*DataSize(_dt);</div>\n\
<div class=\"line\">    _nchan = PtexUtils::min(nChannels, _ntxchan-firstChan);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get face info</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> FaceInfo&amp; <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a691492ec0bd6383f91200e49f6ae40ed\">f</a> = _tx-&gt;getFaceInfo(faceid);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// if neighborhood is constant, just return constant value of face</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (f.isNeighborhoodConstant()) {</div>\n\
<div class=\"line\">    PtexPtr&lt;PtexFaceData&gt; <a name=\"a1\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a> ( _tx-&gt;getData(faceid, 0) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">char</span>* d = (<span class=\"keywordtype\">char</span>*) <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a2cc7c8468af76cf855e1755c27945693\">data</a>-&gt;getData() + _firstChanOffset;</div>\n\
<div class=\"line\">        Ptex::ConvertToFloat(result, d, _dt, _nchan);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp u and v</span></div>\n\
<div class=\"line\">    u = <a name=\"a2\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(u, 0.0f, 1.0f);</div>\n\
<div class=\"line\">    v = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a3878d3005eeb2d2ef414abc752ba3c9b\">PtexUtils::clamp</a>(v, 0.0f, 1.0f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build kernel</span></div>\n\
<div class=\"line\">    PtexTriangleKernel k;</div>\n\
<div class=\"line\">    buildKernel(k, u, v, uw1, vw1, uw2, vw2, width, blur, f.res);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// accumulate the weight as we apply</span></div>\n\
<div class=\"line\">    _weight = 0;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// allocate temporary double-precision result</span></div>\n\
<div class=\"line\">    _result = (<span class=\"keywordtype\">double</span>*) alloca(<span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>)*_nchan);</div>\n\
<div class=\"line\">    memset(_result, 0, <span class=\"keyword\">sizeof</span>(<span class=\"keywordtype\">double</span>)*_nchan);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// apply to faces</span></div>\n\
<div class=\"line\">    splitAndApply(k, faceid, f);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// normalize (both for data type and cumulative kernel weight applied)</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// and output result</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a> = 1.0 / (_weight * OneValue(_dt));</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> i = 0; i &lt; _nchan; i++) result[i] = <span class=\"keywordtype\">float</span>(_result[i] * scale);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// clear temp result</span></div>\n\
<div class=\"line\">    _result = 0;</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexTriangleFilter::buildKernel(PtexTriangleKernel&amp; k, <span class=\"keywordtype\">float</span> u, <span class=\"keywordtype\">float</span> v, </div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">float</span> uw1, <span class=\"keywordtype\">float</span> vw1, <span class=\"keywordtype\">float</span> uw2, <span class=\"keywordtype\">float</span> vw2,</div>\n\
<div class=\"line\">                     <span class=\"keywordtype\">float</span> width, <span class=\"keywordtype\">float</span> blur, Res faceRes)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> sqrt3 = 1.7320508075688772;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute ellipse coefficients, A*u^2 + B*u*v + C*v^2 == AC - B^2/4</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scaleAC = 0.25 * width*<a name=\"a3\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#ac112eef468530a44b7a653ddac190a22\">width</a>;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scaleB = -2 * scaleAC;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> A = (vw1*vw1 + vw2*vw2) * scaleAC;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> B = (uw1*vw1 + uw2*vw2) * scaleB;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> C = (uw1*uw1 + uw2*uw2) * scaleAC;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// convert to cartesian domain</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Ac = 0.75 * A;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Bc = (sqrt3/2) * (B-A);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> Cc = 0.25 * A - 0.5 * B + C;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute min blur for eccentricity clamping</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> maxEcc = 15; <span class=\"comment\">// max eccentricity</span></div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> <span class=\"keywordtype\">double</span> eccRatio = (maxEcc*maxEcc + 1) / (maxEcc*maxEcc - 1);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> X = sqrt(squared(Ac - Cc) + squared(Bc));</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> b_e = 0.5 * (eccRatio * X - (Ac + Cc));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute min blur for texel clamping</span></div>\n\
<div class=\"line\">    <span class=\"comment\">// (ensure that ellipse is no smaller than a texel)</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> b_t = squared(0.5 / faceRes.u());</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// add blur</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> b_b = 0.25 * blur * blur;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a> = <a name=\"a4\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(b_b, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(b_e, b_t));</div>\n\
<div class=\"line\">    Ac += <a name=\"a5\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a>;</div>\n\
<div class=\"line\">    Cc += <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a08f98740667f706cd68d5e873088ffa6\">b</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// compute minor radius</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> m = sqrt(2*(Ac*Cc - 0.25*Bc*Bc) / (Ac + Cc + X));</div>\n\
<div class=\"line\">    </div>\n\
<div class=\"line\">    <span class=\"comment\">// choose desired resolution</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> reslog2 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(0, <span class=\"keywordtype\">int</span>(ceil(log2(0.5/m))));</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// convert back to triangular domain</span></div>\n\
<div class=\"line\">    A = (4/3.0) * Ac;</div>\n\
<div class=\"line\">    B = (2/sqrt3) * Bc + A;</div>\n\
<div class=\"line\">    C = -0.25 * A + 0.5 * B + Cc;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// scale by kernel width</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> scale = PtexTriangleKernelWidth * PtexTriangleKernelWidth;</div>\n\
<div class=\"line\">    A *= <a name=\"a6\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a>;</div>\n\
<div class=\"line\">    B *= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a>;</div>\n\
<div class=\"line\">    C *= <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a281421b881aa7a1266842b73a3bc7655\">scale</a>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// find u,v,w extents</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> uw = PtexUtils::min(sqrt(C), 1.0);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> vw = PtexUtils::min(sqrt(A), 1.0);</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> ww = PtexUtils::min(sqrt(A-B+C), 1.0);</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// init kernel</span></div>\n\
<div class=\"line\">    <span class=\"keywordtype\">double</span> <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a775b535bae9cb9131338b1cda0807472\">w</a> = 1 - u - <a name=\"a7\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a14cfbe2fc2234f5504618905b69d1e06\">v</a>;</div>\n\
<div class=\"line\">    k.set(Res(reslog2, reslog2), u, v, u-uw, v-vw, w-ww, u+uw, v+vw, w+ww, A, B, C);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexTriangleFilter::splitAndApply(PtexTriangleKernel&amp; k, <span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// do we need to split? if so, split kernel and apply across edge(s)</span></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (k.u1 &lt; 0 &amp;&amp; f.adjface(2) &gt;= 0) {</div>\n\
<div class=\"line\">    PtexTriangleKernel ka;</div>\n\
<div class=\"line\">    k.splitU(ka);</div>\n\
<div class=\"line\">    applyAcrossEdge(ka, f, 2);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (k.v1 &lt; 0 &amp;&amp; f.adjface(0) &gt;= 0) {</div>\n\
<div class=\"line\">    PtexTriangleKernel ka;</div>\n\
<div class=\"line\">    k.splitV(ka);</div>\n\
<div class=\"line\">    applyAcrossEdge(ka, f, 0);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (k.w1 &lt; 0 &amp;&amp; f.adjface(1) &gt;= 0) {</div>\n\
<div class=\"line\">    PtexTriangleKernel ka;</div>\n\
<div class=\"line\">    k.splitW(ka);</div>\n\
<div class=\"line\">    applyAcrossEdge(ka, f, 1);</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"comment\">// apply to local face</span></div>\n\
<div class=\"line\">    apply(k, faceid, f); </div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexTriangleFilter::applyAcrossEdge(PtexTriangleKernel&amp; k, </div>\n\
<div class=\"line\">                     <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f, <span class=\"keywordtype\">int</span> eid)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> afid = f.adjface(eid), aeid = f.adjedge(eid);</div>\n\
<div class=\"line\">    <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; af = _tx-&gt;getFaceInfo(afid);</div>\n\
<div class=\"line\">    k.reorient(eid, aeid);</div>\n\
<div class=\"line\">    splitAndApply(k, afid, af);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexTriangleFilter::apply(PtexTriangleKernel&amp; k, <span class=\"keywordtype\">int</span> faceid, <span class=\"keyword\">const</span> Ptex::FaceInfo&amp; f)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"comment\">// clamp kernel face (resolution and extent)</span></div>\n\
<div class=\"line\">    k.clampRes(f.res);</div>\n\
<div class=\"line\">    k.clampExtent();</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// build kernel iterators</span></div>\n\
<div class=\"line\">    PtexTriangleKernelIter keven, kodd;</div>\n\
<div class=\"line\">    k.getIterators(keven, kodd);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!keven.valid &amp;&amp; !kodd.valid) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"comment\">// get face data, and apply</span></div>\n\
<div class=\"line\">    PtexPtr&lt;PtexFaceData&gt; <a name=\"a8\"></a><a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a> ( _tx-&gt;getData(faceid, k.res) );</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (!<a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>) <span class=\"keywordflow\">return</span>;</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (keven.valid) applyIter(keven, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>);</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (kodd.valid) applyIter(kodd, <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>);</div>\n\
<div class=\"line\">}</div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"></div>\n\
<div class=\"line\"><span class=\"keywordtype\">void</span> PtexTriangleFilter::applyIter(PtexTriangleKernelIter&amp; k, PtexFaceData* <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a7e9cc00a03db31e765a5cc7fce338bbc\">dh</a>)</div>\n\
<div class=\"line\">{</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">if</span> (dh-&gt;isConstant()) {</div>\n\
<div class=\"line\">    k.applyConst(_result, (<span class=\"keywordtype\">char</span>*)dh-&gt;getData()+_firstChanOffset, _dt, _nchan);</div>\n\
<div class=\"line\">    _weight += k.weight;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> <span class=\"keywordflow\">if</span> (dh-&gt;isTiled()) {</div>\n\
<div class=\"line\">    Ptex::Res tileres = dh-&gt;tileRes();</div>\n\
<div class=\"line\">    PtexTriangleKernelIter kt = k;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileresu = tileres.u();</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> tileresv = tileres.v();</div>\n\
<div class=\"line\">    kt.rowlen = tileresu;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> ntilesu = k.rowlen / kt.rowlen;</div>\n\
<div class=\"line\">    <span class=\"keywordtype\">int</span> wOffsetBase = k.rowlen - tileresu;</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> tilev = k.v1 / tileresv, tilevEnd = (k.v2-1) / tileresv; tilev &lt;= tilevEnd; tilev++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> vOffset = tilev * tileresv;</div>\n\
<div class=\"line\">        kt.v = k.v - vOffset;</div>\n\
<div class=\"line\">        kt.v1 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(0, k.v1 - vOffset);</div>\n\
<div class=\"line\">        kt.v2 = PtexUtils::min(k.v2 - vOffset, tileresv);</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">for</span> (<span class=\"keywordtype\">int</span> tileu = k.u1 / tileresu, tileuEnd = (k.u2-1) / tileresu; tileu &lt;= tileuEnd; tileu++) {</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> uOffset = tileu * tileresu;</div>\n\
<div class=\"line\">        <span class=\"keywordtype\">int</span> wOffset = wOffsetBase - uOffset - vOffset;</div>\n\
<div class=\"line\">        kt.u = k.u - uOffset;</div>\n\
<div class=\"line\">        kt.u1 = <a class=\"code\" href=\"#!/url=./cpp_ref/_g_lee_8h.html#a8fa4ae5e2b2ef3e57a2bde9530581904\">PtexUtils::max</a>(0, k.u1 - uOffset);</div>\n\
<div class=\"line\">        kt.u2 = PtexUtils::min(k.u2 - uOffset, tileresu);</div>\n\
<div class=\"line\">        kt.w1 = k.w1 - wOffset;</div>\n\
<div class=\"line\">        kt.w2 = k.w2 - wOffset;</div>\n\
<div class=\"line\">        PtexPtr&lt;PtexFaceData&gt; th ( dh-&gt;getTile(tilev * ntilesu + tileu) );</div>\n\
<div class=\"line\">        <span class=\"keywordflow\">if</span> (th) {</div>\n\
<div class=\"line\">            kt.weight = 0;</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">if</span> (th-&gt;isConstant())</div>\n\
<div class=\"line\">            kt.applyConst(_result, (<span class=\"keywordtype\">char</span>*)th-&gt;getData()+_firstChanOffset, _dt, _nchan);</div>\n\
<div class=\"line\">            <span class=\"keywordflow\">else</span></div>\n\
<div class=\"line\">            kt.apply(_result, (<span class=\"keywordtype\">char</span>*)th-&gt;getData()+_firstChanOffset, _dt, _nchan, _ntxchan);</div>\n\
<div class=\"line\">            _weight += kt.weight;</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">        }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">    <span class=\"keywordflow\">else</span> {</div>\n\
<div class=\"line\">    k.apply(_result, (<span class=\"keywordtype\">char</span>*)dh-&gt;getData()+_firstChanOffset, _dt, _nchan, _ntxchan);</div>\n\
<div class=\"line\">    _weight += k.weight;</div>\n\
<div class=\"line\">    }</div>\n\
<div class=\"line\">}</div>\n\
</div><!-- fragment --> </div><!-- contents -->\n\
</div><!-- doc-content -->\n\
          <div class=\"footer-block\"><a href=\"../html/ac.cmtdialog.htm\" class=\"comments-anchor\" target=\"_blank\"><span class=\"comments-link\">Please send us your comment about this page</span></a></div></div>\n\
   </div></body>\n\
</html>\n\
";